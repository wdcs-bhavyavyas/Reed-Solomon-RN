
  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1048576, "");
  base64DecodeToExistingUint8Array(bufferView, 1120448, "KwAQABwAAABHABAAGAAAAOQDAAANAAAAXwAQACEAAABHABAAGAAAAPkCAAAJAAAAkAAQABkAAACAABAACgAAAC8AAAAWAAAAkAAQABkAAACAABAACgAAAEIAAAAWAAAA7AAQAAAAAADsABAAAgAAAO4AEAAVAAAA5QMAAAUAAAADAAAAAAAAAAEAAAAEAAAABQAAAAYAAAAHAAAAAAAAAAEAAAAEAAAABQAAAAYAAAAIAAAABAAAAAQAAAAJAAAACgAAAAsAAAAMAAAADQAAAC4BEAAhAAAATwEQABgAAACnAgAACQAAAGcBEAAcAAAATwEQABgAAADkAwAADQAAAJABEABVAAAAGgUAABIAAADwARAAXwAAAH4AAAAUAAAAUAIQAFwAAAC+AgAAJAAAAFACEABcAAAAzAIAACkAAABQAhAAXAAAACgFAAAQAAAAUAIQAFwAAABMBQAAEQAAAFACEABcAAAAYQUAABUAAABQAhAAXAAAAG8FAAAcAAAArAIQAAAAAACsAhAAAgAAAK4CEAAVAAAA5QMAAAUAAAASAAAACAAAAAQAAAATAAAAFAAAABIAAAAIAAAABAAAABUAAAAWAAAAAAAAAAEAAAAXAAAA4AIQAFUAAAAaBQAAEgAAAOACEABVAAAAIQUAABYAAAA1AxAAQQAAAHYDEAAIAAAAfgMQAF8AAABmAAAADQAAAN0DEAAvAAAAdgMQAAgAAAB+AxAAXwAAAHgAAAANAAAAfgMQAF8AAADnAAAADQAAAD4EEABVAAAAigIAAA0AAADABBAAXwAAAB4AAAAJAAAAfgUQAC0AAACrBRAADAAAALcFEAABAAAAHwUQAF8AAABOAAAABQAAAB8FEABfAAAAeAAAAAUAAAC2CBEAHAAAABYAAAAJAAAAIAkRAEgAAADxCQAADgAAAGgJEQBnAAAAKgAAACAAAABoCREAZwAAAGsAAAAgAAAAwAoRACsAAADrChEAFQAAAFkBAAAVAAAAGwAAAAQAAAAEAAAAHAAAAB0AAAAeAAAAHwAAAAAAAAABAAAAIAAAACEAAAAQAAAABAAAACIAAAAjAAAAJAAAAAwAAAAEAAAAJQAAABcLEQARAAAAAAsRABcAAADqAgAABQAAACgLEQAAAAAAKQsRAAIAAAArAAAAAAAAAAEAAAAsAAAAKwsRACAAAABLCxEAEgAAAF0LEQArAAAAiAsRABUAAABZAQAAFQAAALULEQAGAAAAuwsRACIAAACdCxEAGAAAAG0JAAAFAAAA3QsRABYAAADzCxEADQAAAJ0LEQAYAAAAcwkAAAUAAAAbDBEACwAAACYMEQAWAAAAKAsRAAEAAAAADBEAFgAAANoHAAAJAAAAPAwRAA4AAABKDBEABAAAAE4MEQAQAAAAKAsRAAEAAAAADBEAFgAAAN4HAAAFAAAAGwwRAAsAAABeDBEAJgAAAIQMEQAIAAAAjAwRAAYAAAAoCxEAAQAAAAAMEQAWAAAA6wcAAAUAAABgDREAFgAAAEgEAAAoAAAAYA0RABYAAABUBAAAEQAAAIANEQAgAAAAJwAAABkAAACADREAIAAAACgAAAAgAAAAgA0RACAAAAAqAAAAGQAAAIANEQAgAAAAKwAAABgAAACADREAIAAAACwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7/////v7YAAAAAAAAAAAD/BwAAAAAA+P//AAABAAAAAAAAAAAAAADAn589AAAAAAIAAAD///8HAAAAAAAAAAAAAMD/AQAAAAAAAPgPILgSEQBKAAAACBURAAACAAAIFxEANwAAAAABAgMEBQYHCAkICgsMDQ4PEBESExQCFRYXGBkaGxwdHh8gAgICAgICAgICAiECAgICAgICAgICAgICAiIjJCUmAicCKAICAikqKwIsLS4vMAICMQICAjICAgICAgICAjMCAjQCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjUCNgI3AgICAgICAgI4AjkCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjo7PAICAgI9AgI+P0BBQkNERUYCAgJHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkgCAgICAgICAgICAkkCAgICAjsCAAECAgICAwICAgIEAgUGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg==");
  base64DecodeToExistingUint8Array(bufferView
}
function wasm2js_trap() { throw new Error('abort'); }

function asmFunc(imports) {
 var buffer = new ArrayBuffer(1179648);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var nan = NaN;
 var infinity = Infinity;
 var global$0 = 1048576;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 function reed_solomon_erasure__ReedSolomon__reconstruct_internal__hd438acba54572b30($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $12 = 0, $7 = 0, $10 = 0, $13 = 0, $9 = 0, $8 = 0, $11 = 0, $20 = 0, $16 = 0, $17 = 0, i64toi32_i32$0 = 0, $19 = 0, $18 = 0, i64toi32_i32$1 = 0, $6 = 0, $24 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $23 = 0, $43 = 0, $28 = 0, $25 = 0, $26 = 0, $27 = 0, $644 = 0, $662 = 0, $821 = 0, $917 = 0, $932 = 0, $948 = 0, $1031 = 0, $1162 = 0, $1185 = 0, $1288 = 0, $1324 = 0, $1425 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = global$0 - 4720 | 0;
  global$0 = $6;
  $7 = 0;
  label$1 : {
   $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if ($8 >>> 0 > $2 >>> 0) {
    break label$1
   }
   $7 = 1;
   if ($8 >>> 0 < $2 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           if (!$2) {
            break label$9
           }
           label$10 : {
            label$11 : {
             $9 = HEAP32[($1 + 4 | 0) >> 2] | 0;
             if (!$9) {
              break label$11
             }
             $10 = $2 << 3 | 0;
             $11 = $1 + $10 | 0;
             $12 = $1;
             label$12 : while (1) {
              if (!$10) {
               break label$10
              }
              $10 = $10 + -8 | 0;
              $7 = 8;
              $13 = HEAP32[($12 + 4 | 0) >> 2] | 0;
              $12 = $12 + 8 | 0;
              if (($13 | 0) == ($9 | 0)) {
               continue label$12
              }
              break label$1;
             };
            }
            global$0 = $6 + 4720 | 0;
            return 10 | 0;
           }
           $7 = 11;
           if (($2 | 0) != ($4 | 0)) {
            break label$1
           }
           $12 = 0;
           $10 = 0;
           label$13 : while (1) {
            $12 = $12 + (HEAPU8[($3 + $10 | 0) >> 0] | 0) | 0;
            $10 = $10 + 1 | 0;
            if ($10 >>> 0 < $2 >>> 0) {
             continue label$13
            }
            break label$13;
           };
           $7 = 13;
           if (($12 | 0) == ($8 | 0)) {
            break label$1
           }
           $7 = 9;
           $10 = HEAP32[$0 >> 2] | 0;
           if ($12 >>> 0 < $10 >>> 0) {
            break label$1
           }
           i64toi32_i32$1 = $6;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 3680 | 0) >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 3684 | 0) >> 2] = i64toi32_i32$0;
           label$14 : {
            if ($10 >>> 0 < 33 >>> 0) {
             break label$14
            }
            $smallvec__SmallVec_A____grow__hb1d87153157c9a98($6 + 3680 | 0 | 0, $10 | 0);
           }
           $12 = memcpy($6 | 0, $6 + 3680 | 0 | 0, 264 | 0) | 0;
           $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           i64toi32_i32$1 = $12;
           i64toi32_i32$0 = 0;
           HEAP32[($12 + 3680 | 0) >> 2] = 0;
           HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
           label$15 : {
            if ($10 >>> 0 < 33 >>> 0) {
             break label$15
            }
            $smallvec__SmallVec_A____grow__hda194786982433d3($12 + 3680 | 0 | 0, $10 | 0);
            $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           }
           memcpy($12 + 264 | 0 | 0, $12 + 3680 | 0 | 0, 264 | 0) | 0;
           i64toi32_i32$1 = $12;
           i64toi32_i32$0 = 0;
           HEAP32[($12 + 3680 | 0) >> 2] = 0;
           HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
           label$16 : {
            if ($10 >>> 0 < 33 >>> 0) {
             break label$16
            }
            $smallvec__SmallVec_A____grow__hda194786982433d3($12 + 3680 | 0 | 0, $10 | 0);
           }
           memcpy($12 + 528 | 0 | 0, $12 + 3680 | 0 | 0, 264 | 0) | 0;
           $10 = HEAP32[$0 >> 2] | 0;
           i64toi32_i32$1 = $12;
           i64toi32_i32$0 = 0;
           HEAP32[($12 + 3680 | 0) >> 2] = 0;
           HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
           label$17 : {
            if ($10 >>> 0 < 33 >>> 0) {
             break label$17
            }
            $smallvec__SmallVec_A____grow__h383ea6e3b3c827e0($12 + 3680 | 0 | 0, $10 | 0);
            $10 = HEAP32[$0 >> 2] | 0;
           }
           memcpy($12 + 792 | 0 | 0, $12 + 3680 | 0 | 0, 136 | 0) | 0;
           i64toi32_i32$1 = $12;
           i64toi32_i32$0 = 0;
           HEAP32[($12 + 3680 | 0) >> 2] = 0;
           HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
           label$18 : {
            if ($10 >>> 0 < 33 >>> 0) {
             break label$18
            }
            $smallvec__SmallVec_A____grow__h383ea6e3b3c827e0($12 + 3680 | 0 | 0, $10 | 0);
           }
           memcpy($12 + 928 | 0 | 0, $12 + 3680 | 0 | 0, 136 | 0) | 0;
           label$19 : {
            if (($11 | 0) == ($1 | 0)) {
             break label$19
            }
            $13 = $2 << 3 | 0;
            $4 = ($12 + 928 | 0) + 12 | 0;
            $11 = ($12 + 928 | 0) + 8 | 0;
            $14 = ($12 + 264 | 0) + 8 | 0;
            $15 = ($12 + 528 | 0) + 8 | 0;
            $16 = ($12 + 792 | 0) + 12 | 0;
            $17 = ($12 + 792 | 0) + 8 | 0;
            $18 = $12 + 8 | 0;
            $10 = 0;
            label$20 : while (1) {
             if ($10 >>> 0 >= $2 >>> 0) {
              break label$8
             }
             label$21 : {
              label$22 : {
               label$23 : {
                if (!(HEAPU8[($3 + $10 | 0) >> 0] | 0)) {
                 break label$23
                }
                $7 = HEAP32[$12 >> 2] | 0;
                $8 = $7 >>> 0 > 32 >>> 0;
                $9 = (wasm2js_i32$0 = HEAP32[($12 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                if ($9 >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) {
                 break label$21
                }
                $19 = HEAP32[($1 + 4 | 0) >> 2] | 0;
                $20 = HEAP32[$1 >> 2] | 0;
                label$24 : {
                 if (($9 | 0) != (($8 ? $7 : 32) | 0)) {
                  break label$24
                 }
                 $7 = ($9 + 1 | 0) >>> 0 < 2 >>> 0 ? 0 : -1 >>> Math_clz32($9) | 0;
                 $8 = $7 + 1 | 0;
                 $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 | 0, ($8 >>> 0 < $7 >>> 0 ? -1 : $8) | 0);
                 $7 = HEAP32[$12 >> 2] | 0;
                }
                $8 = HEAP32[$18 >> 2] | 0;
                $7 = $7 >>> 0 > 32 >>> 0;
                HEAP32[($12 + ($7 ? 12 : 0) | 0) >> 2] = $9 + 1 | 0;
                $7 = ($7 ? $8 : $18) + ($9 << 3 | 0) | 0;
                HEAP32[($7 + 4 | 0) >> 2] = $19;
                HEAP32[$7 >> 2] = $20;
                label$25 : {
                 $9 = HEAP32[($12 + 792 | 0) >> 2] | 0;
                 $8 = $9 >>> 0 > 32 >>> 0;
                 $7 = (wasm2js_i32$0 = HEAP32[$16 >> 2] | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $8 = $8 ? $9 : 32;
                 if (($7 | 0) != ($8 | 0)) {
                  break label$25
                 }
                 label$26 : {
                  label$27 : {
                   $9 = $8 + 1 | 0;
                   if ($9 >>> 0 < $8 >>> 0) {
                    break label$27
                   }
                   $8 = 0;
                   label$28 : {
                    if ($9 >>> 0 < 2 >>> 0) {
                     break label$28
                    }
                    $8 = -1 >>> Math_clz32($9 + -1 | 0) | 0;
                   }
                   $9 = $8 + 1 | 0;
                   if ($9 >>> 0 >= $8 >>> 0) {
                    break label$26
                   }
                  }
                  $9 = -1;
                 }
                 $smallvec__SmallVec_A____grow__h383ea6e3b3c827e0($12 + 792 | 0 | 0, $9 | 0);
                 $9 = HEAP32[($12 + 792 | 0) >> 2] | 0;
                }
                $8 = $9 >>> 0 > 32 >>> 0;
                $9 = (wasm2js_i32$0 = HEAP32[$17 >> 2] | 0, wasm2js_i32$1 = $17, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                $8 = $8 ? $16 : $12 + 792 | 0;
                break label$22;
               }
               $9 = HEAP32[($1 + 4 | 0) >> 2] | 0;
               $8 = HEAP32[$1 >> 2] | 0;
               label$29 : {
                label$30 : {
                 if ($10 >>> 0 >= (HEAP32[$0 >> 2] | 0) >>> 0) {
                  break label$30
                 }
                 label$31 : {
                  $7 = HEAP32[($12 + 264 | 0) >> 2] | 0;
                  $20 = $7 >>> 0 > 32 >>> 0;
                  $19 = (wasm2js_i32$0 = HEAP32[(($12 + 264 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $20, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                  $20 = $20 ? $7 : 32;
                  if (($19 | 0) != ($20 | 0)) {
                   break label$31
                  }
                  label$32 : {
                   label$33 : {
                    $7 = $20 + 1 | 0;
                    if ($7 >>> 0 < $20 >>> 0) {
                     break label$33
                    }
                    $20 = 0;
                    label$34 : {
                     if ($7 >>> 0 < 2 >>> 0) {
                      break label$34
                     }
                     $20 = -1 >>> Math_clz32($7 + -1 | 0) | 0;
                    }
                    $7 = $20 + 1 | 0;
                    if ($7 >>> 0 >= $20 >>> 0) {
                     break label$32
                    }
                   }
                   $7 = -1;
                  }
                  $smallvec__SmallVec_A____grow__hda194786982433d3($12 + 264 | 0 | 0, $7 | 0);
                  $7 = HEAP32[($12 + 264 | 0) >> 2] | 0;
                 }
                 $20 = HEAP32[$14 >> 2] | 0;
                 $7 = $7 >>> 0 > 32 >>> 0;
                 HEAP32[(($12 + 264 | 0) + ($7 ? 12 : 0) | 0) >> 2] = $19 + 1 | 0;
                 $7 = ($7 ? $20 : $14) + ($19 << 3 | 0) | 0;
                 HEAP32[$7 >> 2] = $8;
                 $7 = $7 + 4 | 0;
                 break label$29;
                }
                label$35 : {
                 $7 = HEAP32[($12 + 528 | 0) >> 2] | 0;
                 $20 = $7 >>> 0 > 32 >>> 0;
                 $19 = (wasm2js_i32$0 = HEAP32[(($12 + 528 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $20, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $20 = $20 ? $7 : 32;
                 if (($19 | 0) != ($20 | 0)) {
                  break label$35
                 }
                 label$36 : {
                  label$37 : {
                   $7 = $20 + 1 | 0;
                   if ($7 >>> 0 < $20 >>> 0) {
                    break label$37
                   }
                   $20 = 0;
                   label$38 : {
                    if ($7 >>> 0 < 2 >>> 0) {
                     break label$38
                    }
                    $20 = -1 >>> Math_clz32($7 + -1 | 0) | 0;
                   }
                   $7 = $20 + 1 | 0;
                   if ($7 >>> 0 >= $20 >>> 0) {
                    break label$36
                   }
                  }
                  $7 = -1;
                 }
                 $smallvec__SmallVec_A____grow__hda194786982433d3($12 + 528 | 0 | 0, $7 | 0);
                 $7 = HEAP32[($12 + 528 | 0) >> 2] | 0;
                }
                $20 = HEAP32[$15 >> 2] | 0;
                $7 = $7 >>> 0 > 32 >>> 0;
                HEAP32[(($12 + 528 | 0) + ($7 ? 12 : 0) | 0) >> 2] = $19 + 1 | 0;
                $7 = ($7 ? $20 : $15) + ($19 << 3 | 0) | 0;
                HEAP32[$7 >> 2] = $8;
                $7 = $7 + 4 | 0;
               }
               HEAP32[$7 >> 2] = $9;
               label$39 : {
                $9 = HEAP32[($12 + 928 | 0) >> 2] | 0;
                $8 = $9 >>> 0 > 32 >>> 0;
                $7 = (wasm2js_i32$0 = HEAP32[$4 >> 2] | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                $8 = $8 ? $9 : 32;
                if (($7 | 0) != ($8 | 0)) {
                 break label$39
                }
                label$40 : {
                 label$41 : {
                  $9 = $8 + 1 | 0;
                  if ($9 >>> 0 < $8 >>> 0) {
                   break label$41
                  }
                  $8 = 0;
                  label$42 : {
                   if ($9 >>> 0 < 2 >>> 0) {
                    break label$42
                   }
                   $8 = -1 >>> Math_clz32($9 + -1 | 0) | 0;
                  }
                  $9 = $8 + 1 | 0;
                  if ($9 >>> 0 >= $8 >>> 0) {
                   break label$40
                  }
                 }
                 $9 = -1;
                }
                $smallvec__SmallVec_A____grow__h383ea6e3b3c827e0($12 + 928 | 0 | 0, $9 | 0);
                $9 = HEAP32[($12 + 928 | 0) >> 2] | 0;
               }
               $8 = $9 >>> 0 > 32 >>> 0;
               $9 = (wasm2js_i32$0 = HEAP32[$11 >> 2] | 0, wasm2js_i32$1 = $11, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
               $8 = $8 ? $4 : $12 + 928 | 0;
              }
              HEAP32[$8 >> 2] = $7 + 1 | 0;
              HEAP32[($9 + ($7 << 2 | 0) | 0) >> 2] = $10;
             }
             $1 = $1 + 8 | 0;
             $10 = $10 + 1 | 0;
             $13 = $13 + -8 | 0;
             if ($13) {
              continue label$20
             }
             break label$20;
            };
           }
           $8 = ($12 + 792 | 0) + 8 | 0;
           $4 = HEAP32[$8 >> 2] | 0;
           $1 = HEAP32[(($12 + 792 | 0) + 12 | 0) >> 2] | 0;
           $9 = HEAP32[($12 + 792 | 0) >> 2] | 0;
           $21 = $0 + 1052 | 0;
           $10 = ($12 + 928 | 0) + 8 | 0;
           $7 = HEAP32[($12 + 928 | 0) >> 2] | 0;
           $13 = $7 >>> 0 > 32 >>> 0;
           $22 = (wasm2js_i32$0 = HEAP32[$10 >> 2] | 0, wasm2js_i32$1 = $10, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
           $23 = (wasm2js_i32$0 = HEAP32[(($12 + 928 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
           $10 = reed_solomon_erasure__inversion_tree__InversionTree__get_inverted_matrix__hdc0822e175f11f98($21 | 0, $22 | 0, $23 | 0) | 0;
           HEAP32[($12 + 1336 | 0) >> 2] = $10;
           if ($10) {
            break label$2
           }
           $7 = HEAP32[$0 >> 2] | 0;
           $10 = Math_imul($7, $7);
           if (($10 | 0) <= (-1 | 0)) {
            break label$7
           }
           label$43 : {
            label$44 : {
             label$45 : {
              if (!$10) {
               break label$45
              }
              $11 = 1;
              $13 = __rust_alloc_zeroed($10 | 0, 1 | 0) | 0;
              if (!$13) {
               break label$3
              }
              $18 = $10;
              if ($10 >>> 0 <= 1024 >>> 0) {
               break label$44
              }
              break label$43;
             }
             $13 = 1;
            }
            memcpy($12 + 3680 | 0 | 0, $13 | 0, $10 | 0) | 0;
            HEAP8[(($12 + 1072 | 0) + 2 | 0) >> 0] = HEAPU8[(($12 + 3680 | 0) + 2 | 0) >> 0] | 0;
            HEAP16[($12 + 1072 | 0) >> 1] = HEAPU8[($12 + 3680 | 0) >> 0] | 0 | ((HEAPU8[($12 + 3681 | 0) >> 0] | 0) << 8 | 0) | 0;
            $16 = HEAPU8[($12 + 3683 | 0) >> 0] | 0 | ((HEAPU8[($12 + 3684 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($12 + 3685 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($12 + 3686 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
            $18 = HEAPU8[($12 + 3687 | 0) >> 0] | 0 | ((HEAPU8[($12 + 3688 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($12 + 3689 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($12 + 3690 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
            memcpy($12 + 2640 | 0 | 0, $12 + 3691 | 0 | 0, 1016 | 0) | 0;
            $11 = 0;
            label$46 : {
             if (!$10) {
              break label$46
             }
             __rust_dealloc($13 | 0, $10 | 0, 1 | 0);
            }
            $13 = $16;
           }
           HEAP8[($12 + 1612 | 0) >> 0] = $11;
           $16 = $12 + 1613 | 0;
           $43 = HEAPU16[($12 + 1072 | 0) >> 1] | 0;
           HEAP8[$16 >> 0] = $43;
           HEAP8[($16 + 1 | 0) >> 0] = $43 >>> 8 | 0;
           $17 = ($12 + 1600 | 0) + 20 | 0;
           HEAP32[$17 >> 2] = $18;
           $18 = ($12 + 1600 | 0) + 16 | 0;
           HEAP32[$18 >> 2] = $13;
           HEAP8[($12 + 1615 | 0) >> 0] = HEAPU8[(($12 + 1072 | 0) + 2 | 0) >> 0] | 0;
           HEAP32[($12 + 1608 | 0) >> 2] = $10;
           HEAP32[($12 + 1604 | 0) >> 2] = $7;
           HEAP32[($12 + 1600 | 0) >> 2] = $7;
           memcpy($12 + 1624 | 0 | 0, $12 + 2640 | 0 | 0, 1016 | 0) | 0;
           label$47 : {
            label$48 : {
             label$49 : {
              $10 = $9 >>> 0 > 32 >>> 0;
              $7 = $10 ? $1 : $9;
              if (!$7) {
               break label$49
              }
              $24 = $10 ? $4 : $8;
              $25 = $24 + ($7 << 2 | 0) | 0;
              $19 = $0 + 25 | 0;
              $8 = 0;
              $20 = $0 + 20 | 0;
              $14 = $0 + 32 | 0;
              $15 = $0 + 16 | 0;
              $26 = $12 + 1608 | 0;
              $27 = $0 + 28 | 0;
              label$50 : while (1) {
               label$51 : {
                $4 = HEAP32[$0 >> 2] | 0;
                if (!$4) {
                 break label$51
                }
                $11 = HEAP32[$24 >> 2] | 0;
                $10 = 0;
                label$52 : while (1) {
                 $7 = HEAP32[$20 >> 2] | 0;
                 $644 = $7;
                 $7 = $7 >>> 0 > 1024 >>> 0;
                 $9 = (wasm2js_i32$0 = HEAP32[$14 >> 2] | 0, wasm2js_i32$1 = $644, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $13 = $10 + Math_imul(HEAP32[$15 >> 2] | 0, $11) | 0;
                 if ($9 >>> 0 <= $13 >>> 0) {
                  break label$48
                 }
                 $9 = HEAP32[$26 >> 2] | 0;
                 $662 = $9;
                 $9 = $9 >>> 0 > 1024 >>> 0;
                 $28 = (wasm2js_i32$0 = HEAP32[$17 >> 2] | 0, wasm2js_i32$1 = $662, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $1 = $10 + Math_imul($8, HEAP32[($12 + 1604 | 0) >> 2] | 0) | 0;
                 if ($28 >>> 0 <= $1 >>> 0) {
                  break label$47
                 }
                 HEAP8[((wasm2js_i32$0 = HEAP32[$18 >> 2] | 0, wasm2js_i32$1 = $16, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $1 | 0) >> 0] = HEAPU8[((wasm2js_i32$0 = HEAP32[$27 >> 2] | 0, wasm2js_i32$1 = $19, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $13 | 0) >> 0] | 0;
                 $10 = $10 + 1 | 0;
                 if ($10 >>> 0 < $4 >>> 0) {
                  continue label$52
                 }
                 break label$52;
                };
               }
               $8 = $8 + 1 | 0;
               $24 = $24 + 4 | 0;
               if (($24 | 0) != ($25 | 0)) {
                continue label$50
               }
               break label$50;
              };
             }
             reed_solomon_erasure__matrix__Matrix__invert__h18a6cfdcd52db06f($12 + 3680 | 0 | 0, $12 + 1600 | 0 | 0);
             if ((HEAPU8[($12 + 3692 | 0) >> 0] | 0 | 0) == (2 | 0)) {
              break label$6
             }
             memcpy($12 + 2640 | 0 | 0, $12 + 3680 | 0 | 0, 1040 | 0) | 0;
             $10 = __rust_alloc(1048 | 0, 4 | 0) | 0;
             if (!$10) {
              break label$5
             }
             i64toi32_i32$1 = $10;
             i64toi32_i32$0 = 1;
             HEAP32[$10 >> 2] = 1;
             HEAP32[($10 + 4 | 0) >> 2] = i64toi32_i32$0;
             memcpy($10 + 8 | 0 | 0, $12 + 2640 | 0 | 0, 1040 | 0) | 0;
             HEAP32[($12 + 3680 | 0) >> 2] = $10;
             $7 = (reed_solomon_erasure__inversion_tree__InversionTree__insert_inverted_matrix__h21d4b53dbc33c1b2($21 | 0, $22 | 0, $23 | 0, $12 + 3680 | 0 | 0) | 0) & 255 | 0;
             if (($7 | 0) != (2 | 0)) {
              break label$4
             }
             label$53 : {
              $7 = HEAP32[(($12 + 1600 | 0) + 8 | 0) >> 2] | 0;
              if ($7 >>> 0 < 1025 >>> 0) {
               break label$53
              }
              __rust_dealloc(HEAP32[($12 + 1616 | 0) >> 2] | 0 | 0, $7 | 0, 1 | 0);
             }
             $7 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
             if (!$7) {
              break label$2
             }
             $13 = HEAP32[$7 >> 2] | 0;
             HEAP32[$7 >> 2] = $13 + -1 | 0;
             if (($13 | 0) != (1 | 0)) {
              break label$2
             }
             $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($12 + 1336 | 0 | 0);
             break label$2;
            }
            core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $13 | 0, $9 | 0);
            wasm2js_trap();
           }
           core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $1 | 0, $28 | 0);
           wasm2js_trap();
          }
          core__panicking__panic_bounds_check__h273e49a380d01fb7(1120720 | 0, 0 | 0, 0 | 0);
          wasm2js_trap();
         }
         core__panicking__panic_bounds_check__h273e49a380d01fb7(1120768 | 0, $10 | 0, $2 | 0);
         wasm2js_trap();
        }
        $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
        wasm2js_trap();
       }
       core__result__unwrap_failed__ha514fcd751db317e(1048835 | 0, 43 | 0);
       wasm2js_trap();
      }
      alloc__alloc__handle_alloc_error__h2bf444f047049b0e(1048 | 0, 4 | 0);
      wasm2js_trap();
     }
     core__result__unwrap_failed__h09c73adcaf303a47(1048835 | 0, 43 | 0, $7 & 1 | 0 | 0);
     wasm2js_trap();
    }
    alloc__alloc__handle_alloc_error__h2bf444f047049b0e($10 | 0, 1 | 0);
    wasm2js_trap();
   }
   HEAP32[($12 + 1068 | 0) >> 2] = $10;
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = $12;
   i64toi32_i32$0 = 0;
   HEAP32[($12 + 3680 | 0) >> 2] = 0;
   HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
   label$54 : {
    if ($10 >>> 0 < 33 >>> 0) {
     break label$54
    }
    $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 3680 | 0 | 0, $10 | 0);
   }
   memcpy($12 + 1072 | 0 | 0, $12 + 3680 | 0 | 0, 264 | 0) | 0;
   label$55 : {
    label$56 : {
     label$57 : {
      label$58 : {
       label$59 : {
        label$60 : {
         label$61 : {
          label$62 : {
           label$63 : {
            label$64 : {
             label$65 : {
              label$66 : {
               label$67 : {
                label$68 : {
                 label$69 : {
                  $1 = HEAP32[$0 >> 2] | 0;
                  if (!$1) {
                   break label$69
                  }
                  $8 = $12 + 1080 | 0;
                  $10 = 0;
                  label$70 : while (1) {
                   if ($10 >>> 0 >= $2 >>> 0) {
                    break label$67
                   }
                   label$71 : {
                    label$72 : {
                     if (!(HEAPU8[($3 + $10 | 0) >> 0] | 0)) {
                      break label$72
                     }
                     $10 = $10 + 1 | 0;
                     if ($10 >>> 0 < $1 >>> 0) {
                      continue label$70
                     }
                     break label$71;
                    }
                    $7 = HEAP32[($12 + 1068 | 0) >> 2] | 0;
                    $13 = HEAP32[($7 + 12 | 0) >> 2] | 0;
                    $9 = Math_imul($13, $10);
                    $4 = $9 + $13 | 0;
                    if ($4 >>> 0 < $9 >>> 0) {
                     break label$62
                    }
                    $11 = HEAP32[($7 + 16 | 0) >> 2] | 0;
                    $821 = $11;
                    $11 = $11 >>> 0 > 1024 >>> 0;
                    $16 = (wasm2js_i32$0 = HEAP32[($7 + 28 | 0) >> 2] | 0, wasm2js_i32$1 = $821, wasm2js_i32$2 = $11, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                    if ($16 >>> 0 < $4 >>> 0) {
                     break label$61
                    }
                    $4 = (wasm2js_i32$0 = HEAP32[($7 + 24 | 0) >> 2] | 0, wasm2js_i32$1 = $7 + 21 | 0, wasm2js_i32$2 = $11, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $9 | 0;
                    label$73 : {
                     $7 = HEAP32[($12 + 1072 | 0) >> 2] | 0;
                     $11 = $7 >>> 0 > 32 >>> 0;
                     $9 = (wasm2js_i32$0 = HEAP32[(($12 + 1072 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $11, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                     $11 = $11 ? $7 : 32;
                     if (($9 | 0) != ($11 | 0)) {
                      break label$73
                     }
                     label$74 : {
                      label$75 : {
                       $7 = $11 + 1 | 0;
                       if ($7 >>> 0 < $11 >>> 0) {
                        break label$75
                       }
                       $11 = 0;
                       label$76 : {
                        if ($7 >>> 0 < 2 >>> 0) {
                         break label$76
                        }
                        $11 = -1 >>> Math_clz32($7 + -1 | 0) | 0;
                       }
                       $7 = $11 + 1 | 0;
                       if ($7 >>> 0 >= $11 >>> 0) {
                        break label$74
                       }
                      }
                      $7 = -1;
                     }
                     $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 1072 | 0 | 0, $7 | 0);
                     $7 = HEAP32[($12 + 1072 | 0) >> 2] | 0;
                    }
                    $11 = HEAP32[$8 >> 2] | 0;
                    $7 = $7 >>> 0 > 32 >>> 0;
                    HEAP32[(($12 + 1072 | 0) + ($7 ? 12 : 0) | 0) >> 2] = $9 + 1 | 0;
                    $7 = ($7 ? $11 : $8) + ($9 << 3 | 0) | 0;
                    HEAP32[($7 + 4 | 0) >> 2] = $13;
                    HEAP32[$7 >> 2] = $4;
                    $10 = $10 + 1 | 0;
                    if ($10 >>> 0 < $1 >>> 0) {
                     continue label$70
                    }
                   }
                   break label$70;
                  };
                  $9 = HEAP32[$0 >> 2] | 0;
                  break label$68;
                 }
                 $9 = 0;
                }
                $19 = ($12 + 264 | 0) + 8 | 0;
                $18 = $12 + 8 | 0;
                label$77 : {
                 if (!$9) {
                  break label$77
                 }
                 $10 = HEAP32[($12 + 264 | 0) >> 2] | 0;
                 $917 = $10;
                 $10 = $10 >>> 0 > 32 >>> 0;
                 $1 = (wasm2js_i32$0 = HEAP32[(($12 + 264 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $917, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $8 = (wasm2js_i32$0 = HEAP32[$19 >> 2] | 0, wasm2js_i32$1 = $19, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $10 = HEAP32[$12 >> 2] | 0;
                 $932 = $10;
                 $10 = $10 >>> 0 > 32 >>> 0;
                 $4 = (wasm2js_i32$0 = HEAP32[($12 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $932, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $10 = (wasm2js_i32$0 = HEAP32[$18 >> 2] | 0, wasm2js_i32$1 = $18, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $7 = HEAP32[($12 + 1072 | 0) >> 2] | 0;
                 $948 = $7;
                 $7 = $7 >>> 0 > 32 >>> 0;
                 $11 = (wasm2js_i32$0 = HEAP32[(($12 + 1072 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $948, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $13 = ($12 + 1072 | 0) + 8 | 0;
                 $16 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $7 = 0;
                 label$78 : while (1) {
                  if ($7 >>> 0 >= $4 >>> 0) {
                   break label$66
                  }
                  reed_solomon_erasure__ReedSolomon__code_single_slice__h4d085708e8812f71($0 | 0, $16 | 0, $11 | 0, $7 | 0, HEAP32[$10 >> 2] | 0 | 0, HEAP32[($10 + 4 | 0) >> 2] | 0 | 0, $8 | 0, $1 | 0);
                  $10 = $10 + 8 | 0;
                  $13 = $7 + 1 | 0;
                  $7 = $13;
                  if ($7 >>> 0 < $9 >>> 0) {
                   continue label$78
                  }
                  break label$78;
                 };
                }
                if ($5) {
                 break label$55
                }
                $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                i64toi32_i32$1 = $12;
                i64toi32_i32$0 = 0;
                HEAP32[($12 + 3680 | 0) >> 2] = 0;
                HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
                label$79 : {
                 if ($10 >>> 0 < 33 >>> 0) {
                  break label$79
                 }
                 $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 3680 | 0 | 0, $10 | 0);
                }
                memcpy($12 + 1336 | 0 | 0, $12 + 3680 | 0 | 0, 264 | 0) | 0;
                reed_solomon_erasure__ReedSolomon__get_parity_rows__h67582b0f15cf00b6($12 + 1600 | 0 | 0, $0 | 0);
                label$80 : {
                 $7 = HEAP32[$0 >> 2] | 0;
                 $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                 if ($7 >>> 0 >= $1 >>> 0) {
                  break label$80
                 }
                 $10 = $7 << 3 | 0;
                 $8 = ($12 + 1336 | 0) + 8 | 0;
                 $4 = ($12 + 1600 | 0) + 8 | 0;
                 $20 = ($12 + 1600 | 0) + 12 | 0;
                 label$81 : while (1) {
                  if ($7 >>> 0 >= $2 >>> 0) {
                   break label$63
                  }
                  label$82 : {
                   if (HEAPU8[($3 + $7 | 0) >> 0] | 0) {
                    break label$82
                   }
                   $13 = HEAP32[($12 + 1600 | 0) >> 2] | 0;
                   $1031 = $13;
                   $13 = $13 >>> 0 > 32 >>> 0;
                   $11 = (wasm2js_i32$0 = HEAP32[$20 >> 2] | 0, wasm2js_i32$1 = $1031, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                   $9 = HEAP32[$0 >> 2] | 0;
                   $16 = $7 - $9 | 0;
                   if ($11 >>> 0 <= $16 >>> 0) {
                    break label$58
                   }
                   $13 = ((wasm2js_i32$0 = HEAP32[$4 >> 2] | 0, wasm2js_i32$1 = $4, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) - ($9 << 3 | 0) | 0) + $10 | 0;
                   $11 = HEAP32[$13 >> 2] | 0;
                   $16 = HEAP32[($13 + 4 | 0) >> 2] | 0;
                   label$83 : {
                    $13 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
                    $17 = $13 >>> 0 > 32 >>> 0;
                    $9 = (wasm2js_i32$0 = HEAP32[(($12 + 1336 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $17, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                    $17 = $17 ? $13 : 32;
                    if (($9 | 0) != ($17 | 0)) {
                     break label$83
                    }
                    label$84 : {
                     label$85 : {
                      $13 = $17 + 1 | 0;
                      if ($13 >>> 0 < $17 >>> 0) {
                       break label$85
                      }
                      $17 = 0;
                      label$86 : {
                       if ($13 >>> 0 < 2 >>> 0) {
                        break label$86
                       }
                       $17 = -1 >>> Math_clz32($13 + -1 | 0) | 0;
                      }
                      $13 = $17 + 1 | 0;
                      if ($13 >>> 0 >= $17 >>> 0) {
                       break label$84
                      }
                     }
                     $13 = -1;
                    }
                    $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 1336 | 0 | 0, $13 | 0);
                    $13 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
                   }
                   $17 = HEAP32[$8 >> 2] | 0;
                   $13 = $13 >>> 0 > 32 >>> 0;
                   HEAP32[(($12 + 1336 | 0) + ($13 ? 12 : 0) | 0) >> 2] = $9 + 1 | 0;
                   $13 = ($13 ? $17 : $8) + ($9 << 3 | 0) | 0;
                   HEAP32[($13 + 4 | 0) >> 2] = $16;
                   HEAP32[$13 >> 2] = $11;
                  }
                  $10 = $10 + 8 | 0;
                  $7 = $7 + 1 | 0;
                  if ($7 >>> 0 < $1 >>> 0) {
                   continue label$81
                  }
                  break label$81;
                 };
                 $7 = HEAP32[$0 >> 2] | 0;
                }
                i64toi32_i32$1 = $12;
                i64toi32_i32$0 = 0;
                HEAP32[($12 + 3680 | 0) >> 2] = 0;
                HEAP32[($12 + 3684 | 0) >> 2] = i64toi32_i32$0;
                label$87 : {
                 if ($7 >>> 0 < 33 >>> 0) {
                  break label$87
                 }
                 $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 3680 | 0 | 0, $7 | 0);
                 $7 = HEAP32[$0 >> 2] | 0;
                }
                memcpy($12 + 2640 | 0 | 0, $12 + 3680 | 0 | 0, 264 | 0) | 0;
                label$88 : {
                 label$89 : {
                  label$90 : {
                   if (!$7) {
                    break label$90
                   }
                   $8 = ($12 + 2640 | 0) + 8 | 0;
                   $20 = ($12 + 264 | 0) + 12 | 0;
                   $17 = 0;
                   $1 = 0;
                   $10 = 0;
                   label$91 : while (1) {
                    if ($10 >>> 0 >= $2 >>> 0) {
                     break label$65
                    }
                    label$92 : {
                     label$93 : {
                      if (!(HEAPU8[($3 + $10 | 0) >> 0] | 0)) {
                       break label$93
                      }
                      $13 = HEAP32[$12 >> 2] | 0;
                      $1162 = $13;
                      $13 = $13 >>> 0 > 32 >>> 0;
                      $9 = (wasm2js_i32$0 = HEAP32[($12 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $1162, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                      if ($9 >>> 0 <= $1 >>> 0) {
                       break label$60
                      }
                      $13 = (wasm2js_i32$0 = HEAP32[($12 + 8 | 0) >> 2] | 0, wasm2js_i32$1 = $18, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($1 << 3 | 0) | 0;
                      $1 = $1 + 1 | 0;
                      break label$92;
                     }
                     $13 = HEAP32[($12 + 264 | 0) >> 2] | 0;
                     $1185 = $13;
                     $13 = $13 >>> 0 > 32 >>> 0;
                     $9 = (wasm2js_i32$0 = HEAP32[$20 >> 2] | 0, wasm2js_i32$1 = $1185, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                     if ($9 >>> 0 <= $17 >>> 0) {
                      break label$59
                     }
                     $13 = (wasm2js_i32$0 = HEAP32[(($12 + 264 | 0) + 8 | 0) >> 2] | 0, wasm2js_i32$1 = $19, wasm2js_i32$2 = $13, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($17 << 3 | 0) | 0;
                     $17 = $17 + 1 | 0;
                    }
                    $10 = $10 + 1 | 0;
                    $4 = HEAP32[$13 >> 2] | 0;
                    $11 = HEAP32[($13 + 4 | 0) >> 2] | 0;
                    label$94 : {
                     $13 = HEAP32[($12 + 2640 | 0) >> 2] | 0;
                     $16 = $13 >>> 0 > 32 >>> 0;
                     $9 = (wasm2js_i32$0 = HEAP32[(($12 + 2640 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $16, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                     $16 = $16 ? $13 : 32;
                     if (($9 | 0) != ($16 | 0)) {
                      break label$94
                     }
                     label$95 : {
                      label$96 : {
                       $13 = $16 + 1 | 0;
                       if ($13 >>> 0 < $16 >>> 0) {
                        break label$96
                       }
                       $16 = 0;
                       label$97 : {
                        if ($13 >>> 0 < 2 >>> 0) {
                         break label$97
                        }
                        $16 = -1 >>> Math_clz32($13 + -1 | 0) | 0;
                       }
                       $13 = $16 + 1 | 0;
                       if ($13 >>> 0 >= $16 >>> 0) {
                        break label$95
                       }
                      }
                      $13 = -1;
                     }
                     $smallvec__SmallVec_A____grow__hb1d87153157c9a98($12 + 2640 | 0 | 0, $13 | 0);
                     $13 = HEAP32[($12 + 2640 | 0) >> 2] | 0;
                    }
                    $16 = HEAP32[$8 >> 2] | 0;
                    $13 = $13 >>> 0 > 32 >>> 0;
                    HEAP32[(($12 + 2640 | 0) + ($13 ? 12 : 0) | 0) >> 2] = $9 + 1 | 0;
                    $13 = ($13 ? $16 : $8) + ($9 << 3 | 0) | 0;
                    HEAP32[($13 + 4 | 0) >> 2] = $11;
                    HEAP32[$13 >> 2] = $4;
                    if ($10 >>> 0 < $7 >>> 0) {
                     continue label$91
                    }
                    break label$91;
                   };
                   $10 = HEAP32[($12 + 2640 | 0) >> 2] | 0;
                   $2 = HEAP32[$0 >> 2] | 0;
                   if ($2) {
                    break label$89
                   }
                   break label$88;
                  }
                  $2 = 0;
                  $10 = HEAP32[($12 + 2640 | 0) >> 2] | 0;
                  if (!0) {
                   break label$88
                  }
                 }
                 $7 = HEAP32[($12 + 528 | 0) >> 2] | 0;
                 $1288 = $7;
                 $7 = $7 >>> 0 > 32 >>> 0;
                 $9 = (wasm2js_i32$0 = HEAP32[(($12 + 528 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $1288, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $13 = ($12 + 528 | 0) + 8 | 0;
                 $1 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $7 = $10 >>> 0 > 32 >>> 0;
                 $3 = (wasm2js_i32$0 = HEAP32[(($12 + 2640 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $10, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $10 = ($12 + 2640 | 0) + 8 | 0;
                 $10 = (wasm2js_i32$0 = HEAP32[$10 >> 2] | 0, wasm2js_i32$1 = $10, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $7 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
                 $1324 = $7;
                 $7 = $7 >>> 0 > 32 >>> 0;
                 $8 = (wasm2js_i32$0 = HEAP32[(($12 + 1336 | 0) + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $1324, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $13 = ($12 + 1336 | 0) + 8 | 0;
                 $4 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                 $7 = 0;
                 label$98 : while (1) {
                  if ($7 >>> 0 >= $3 >>> 0) {
                   break label$64
                  }
                  reed_solomon_erasure__ReedSolomon__code_single_slice__h4d085708e8812f71($0 | 0, $4 | 0, $8 | 0, $7 | 0, HEAP32[$10 >> 2] | 0 | 0, HEAP32[($10 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $9 | 0);
                  $10 = $10 + 8 | 0;
                  $13 = $7 + 1 | 0;
                  $7 = $13;
                  if ($7 >>> 0 < $2 >>> 0) {
                   continue label$98
                  }
                  break label$98;
                 };
                 $10 = HEAP32[($12 + 2640 | 0) >> 2] | 0;
                }
                label$99 : {
                 label$100 : {
                  if ($10 >>> 0 >= 33 >>> 0) {
                   break label$100
                  }
                  $10 = HEAP32[($12 + 1600 | 0) >> 2] | 0;
                  if ($10 >>> 0 >= 33 >>> 0) {
                   break label$99
                  }
                  break label$57;
                 }
                 __rust_dealloc(HEAP32[($12 + 2648 | 0) >> 2] | 0 | 0, $10 << 3 | 0 | 0, 4 | 0);
                 $10 = HEAP32[($12 + 1600 | 0) >> 2] | 0;
                 if ($10 >>> 0 < 33 >>> 0) {
                  break label$57
                 }
                }
                __rust_dealloc(HEAP32[($12 + 1608 | 0) >> 2] | 0 | 0, $10 << 3 | 0 | 0, 4 | 0);
                $10 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
                if ($10 >>> 0 >= 33 >>> 0) {
                 break label$56
                }
                break label$55;
               }
               core__panicking__panic_bounds_check__h273e49a380d01fb7(1120784 | 0, $10 | 0, $2 | 0);
               wasm2js_trap();
              }
              core__panicking__panic_bounds_check__h273e49a380d01fb7(1120736 | 0, $7 | 0, $4 | 0);
              wasm2js_trap();
             }
             core__panicking__panic_bounds_check__h273e49a380d01fb7(1120816 | 0, $10 | 0, $2 | 0);
             wasm2js_trap();
            }
            core__panicking__panic_bounds_check__h273e49a380d01fb7(1120736 | 0, $7 | 0, $3 | 0);
            wasm2js_trap();
           }
           core__panicking__panic_bounds_check__h273e49a380d01fb7(1120800 | 0, $7 | 0, $2 | 0);
           wasm2js_trap();
          }
          core__slice__slice_index_order_fail__hdebcacf34982bb52($9 | 0, $4 | 0);
          wasm2js_trap();
         }
         core__slice__slice_index_len_fail__hf626520261f048fe($4 | 0, $16 | 0);
         wasm2js_trap();
        }
        core__panicking__panic_bounds_check__h273e49a380d01fb7(1120704 | 0, $1 | 0, $9 | 0);
        wasm2js_trap();
       }
       core__panicking__panic_bounds_check__h273e49a380d01fb7(1120704 | 0, $17 | 0, $9 | 0);
       wasm2js_trap();
      }
      core__panicking__panic_bounds_check__h273e49a380d01fb7(1120704 | 0, $16 | 0, $11 | 0);
      wasm2js_trap();
     }
     $10 = HEAP32[($12 + 1336 | 0) >> 2] | 0;
     if ($10 >>> 0 < 33 >>> 0) {
      break label$55
     }
    }
    __rust_dealloc(HEAP32[($12 + 1344 | 0) >> 2] | 0 | 0, $10 << 3 | 0 | 0, 4 | 0);
   }
   label$101 : {
    $10 = HEAP32[($12 + 1072 | 0) >> 2] | 0;
    if ($10 >>> 0 < 33 >>> 0) {
     break label$101
    }
    __rust_dealloc(HEAP32[($12 + 1080 | 0) >> 2] | 0 | 0, $10 << 3 | 0 | 0, 4 | 0);
   }
   $10 = HEAP32[($12 + 1068 | 0) >> 2] | 0;
   $1425 = $10;
   $10 = HEAP32[$10 >> 2] | 0;
   HEAP32[$1425 >> 2] = $10 + -1 | 0;
   label$102 : {
    label$103 : {
     label$104 : {
      label$105 : {
       label$106 : {
        label$107 : {
         label$108 : {
          label$109 : {
           label$110 : {
            label$111 : {
             label$112 : {
              if (($10 | 0) == (1 | 0)) {
               break label$112
              }
              $10 = 33;
              $7 = HEAP32[($12 + 928 | 0) >> 2] | 0;
              if ($7 >>> 0 >= 33 >>> 0) {
               break label$111
              }
              break label$110;
             }
             $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($12 + 1068 | 0 | 0);
             $10 = 33;
             $7 = HEAP32[($12 + 928 | 0) >> 2] | 0;
             if ($7 >>> 0 < 33 >>> 0) {
              break label$110
             }
            }
            __rust_dealloc(HEAP32[($12 + 936 | 0) >> 2] | 0 | 0, $7 << 2 | 0 | 0, 4 | 0);
            $7 = HEAP32[($12 + 792 | 0) >> 2] | 0;
            if ($7 >>> 0 < $10 >>> 0) {
             break label$109
            }
            break label$108;
           }
           $7 = HEAP32[($12 + 792 | 0) >> 2] | 0;
           if ($7 >>> 0 >= $10 >>> 0) {
            break label$108
           }
          }
          $10 = 33;
          $7 = HEAP32[($12 + 528 | 0) >> 2] | 0;
          if ($7 >>> 0 >= 33 >>> 0) {
           break label$107
          }
          break label$106;
         }
         __rust_dealloc(HEAP32[($12 + 800 | 0) >> 2] | 0 | 0, $7 << 2 | 0 | 0, 4 | 0);
         $10 = 33;
         $7 = HEAP32[($12 + 528 | 0) >> 2] | 0;
         if ($7 >>> 0 < 33 >>> 0) {
          break label$106
         }
        }
        __rust_dealloc(HEAP32[($12 + 536 | 0) >> 2] | 0 | 0, $7 << 3 | 0 | 0, 4 | 0);
        $7 = HEAP32[($12 + 264 | 0) >> 2] | 0;
        if ($7 >>> 0 < $10 >>> 0) {
         break label$105
        }
        break label$104;
       }
       $7 = HEAP32[($12 + 264 | 0) >> 2] | 0;
       if ($7 >>> 0 >= $10 >>> 0) {
        break label$104
       }
      }
      $10 = HEAP32[$12 >> 2] | 0;
      if ($10 >>> 0 < 33 >>> 0) {
       break label$102
      }
      break label$103;
     }
     __rust_dealloc(HEAP32[($12 + 272 | 0) >> 2] | 0 | 0, $7 << 3 | 0 | 0, 4 | 0);
     $10 = HEAP32[$12 >> 2] | 0;
     if ($10 >>> 0 < 33 >>> 0) {
      break label$102
     }
    }
    __rust_dealloc(HEAP32[($12 + 8 | 0) >> 2] | 0 | 0, $10 << 3 | 0 | 0, 4 | 0);
   }
   $7 = 13;
  }
  global$0 = $6 + 4720 | 0;
  return $7 | 0;
 }
 
 function reed_solomon_erasure__matrix__Matrix__invert__h18a6cfdcd52db06f($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $2 = 0, $7 = 0, $4 = 0, $9 = 0, $8 = 0, $5 = 0, $10 = 0, $25 = 0, $42 = 0, $26 = 0, $24 = 0, $30 = 0, $44 = 0, $45 = 0, $17 = 0, $49 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $3 = 0, $22 = 0, $46 = 0, $57 = 0, $11 = 0, $18 = 0, $50 = 0, $12 = 0, $13 = 0, $20 = 0, $41 = 0, $43 = 0, $66 = 0, $14 = 0, $19 = 0, $21 = 0, $23 = 0, $27 = 0, $31 = 0, $36 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $48 = 0, $47 = 0, $15 = 0, $16 = 0, $29 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $233 = 0, $254 = 0, $320 = 0, $379 = 0, $501 = 0, $642 = 0, $791 = 0, $51 = 0, $56 = 0, $900 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = global$0 - 4144 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $3 = HEAP32[$1 >> 2] | 0;
         if (($3 | 0) != (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         reed_solomon_erasure__matrix__Matrix__identity__h89e4942cee2d2ce4($2 + 1040 | 0 | 0, $3 | 0);
         $4 = HEAP32[$1 >> 2] | 0;
         if (($4 | 0) != (HEAP32[($2 + 1040 | 0) >> 2] | 0 | 0)) {
          break label$6
         }
         $5 = (HEAP32[($2 + 1044 | 0) >> 2] | 0) + (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
         $6 = Math_imul($5, $4);
         if (($6 | 0) <= (-1 | 0)) {
          break label$5
         }
         label$8 : {
          label$9 : {
           label$10 : {
            if (!$6) {
             break label$10
            }
            $7 = 1;
            $8 = __rust_alloc_zeroed($6 | 0, 1 | 0) | 0;
            if (!$8) {
             break label$4
            }
            $9 = $6;
            if ($6 >>> 0 <= 1024 >>> 0) {
             break label$9
            }
            break label$8;
           }
           $8 = 1;
          }
          memcpy($2 + 2080 | 0 | 0, $8 | 0, $6 | 0) | 0;
          HEAP8[(($2 + 4140 | 0) + 2 | 0) >> 0] = HEAPU8[(($2 + 2080 | 0) + 2 | 0) >> 0] | 0;
          HEAP16[($2 + 4140 | 0) >> 1] = HEAPU8[($2 + 2080 | 0) >> 0] | 0 | ((HEAPU8[($2 + 2081 | 0) >> 0] | 0) << 8 | 0) | 0;
          $10 = HEAPU8[($2 + 2083 | 0) >> 0] | 0 | ((HEAPU8[($2 + 2084 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 2085 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 2086 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          $9 = HEAPU8[($2 + 2087 | 0) >> 0] | 0 | ((HEAPU8[($2 + 2088 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 2089 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 2090 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
          memcpy($2 + 3120 | 0 | 0, $2 + 2091 | 0 | 0, 1016 | 0) | 0;
          $7 = 0;
          label$11 : {
           if (!$6) {
            break label$11
           }
           __rust_dealloc($8 | 0, $6 | 0, 1 | 0);
          }
          $8 = $10;
         }
         HEAP8[($2 + 2092 | 0) >> 0] = $7;
         $11 = ($2 + 2080 | 0) + 13 | 0;
         $66 = HEAPU16[($2 + 4140 | 0) >> 1] | 0;
         HEAP8[$11 >> 0] = $66;
         HEAP8[($11 + 1 | 0) >> 0] = $66 >>> 8 | 0;
         $12 = ($2 + 2080 | 0) + 20 | 0;
         HEAP32[$12 >> 2] = $9;
         $13 = ($2 + 2080 | 0) + 16 | 0;
         HEAP32[$13 >> 2] = $8;
         HEAP8[($2 + 2095 | 0) >> 0] = HEAPU8[($2 + 4142 | 0) >> 0] | 0;
         HEAP32[($2 + 2088 | 0) >> 2] = $6;
         HEAP32[($2 + 2084 | 0) >> 2] = $5;
         HEAP32[($2 + 2080 | 0) >> 2] = $4;
         memcpy($2 + 2104 | 0 | 0, $2 + 3120 | 0 | 0, 1016 | 0) | 0;
         $14 = HEAP32[$1 >> 2] | 0;
         if (!$14) {
          break label$3
         }
         $15 = $1 + 13 | 0;
         $16 = ($2 + 1040 | 0) + 13 | 0;
         $17 = 0;
         $18 = 1;
         $19 = $1 + 4 | 0;
         $20 = 8;
         $21 = ($2 + 1040 | 0) + 8 | 0;
         $22 = 1024;
         $23 = ($2 + 1040 | 0) + 20 | 0;
         $24 = 0;
         break label$2;
        }
        std__panicking__begin_panic__h2418fa6fbb16e3a8(1049612 | 0, 36 | 0, 1121012 | 0);
        wasm2js_trap();
       }
       HEAP32[($2 + 3132 | 0) >> 2] = 24;
       HEAP32[($2 + 2100 | 0) >> 2] = 2;
       HEAP32[($2 + 3124 | 0) >> 2] = 24;
       HEAP32[($2 + 3120 | 0) >> 2] = $1;
       HEAP32[($2 + 2084 | 0) >> 2] = 2;
       HEAP32[($2 + 2088 | 0) >> 2] = 0;
       HEAP32[($2 + 2080 | 0) >> 2] = 1120980;
       HEAP32[($2 + 3128 | 0) >> 2] = $2 + 1040 | 0;
       HEAP32[($2 + 2096 | 0) >> 2] = $2 + 3120 | 0;
       std__panicking__begin_panic_fmt__hf8f8362495d2ae80($2 + 2080 | 0 | 0, 1120996 | 0);
       wasm2js_trap();
      }
      $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
      wasm2js_trap();
     }
     alloc__alloc__handle_alloc_error__h2bf444f047049b0e($6 | 0, 1 | 0);
     wasm2js_trap();
    }
    $6 = 0;
    break label$1;
   }
   $6 = 1;
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : {
        label$18 : {
         label$19 : {
          label$20 : {
           label$21 : {
            switch ($6 | 0) {
            case 0:
             label$23 : {
              $6 = memcpy($2 | 0, $2 + 2080 | 0 | 0, 1040 | 0) | 0;
              $8 = HEAP32[($6 + 1048 | 0) >> 2] | 0;
              if ($8 >>> 0 < 1025 >>> 0) {
               break label$23
              }
              __rust_dealloc(HEAP32[($6 + 1056 | 0) >> 2] | 0 | 0, $8 | 0, 1 | 0);
             }
             $27 = HEAP32[$6 >> 2] | 0;
             if (!$27) {
              break label$16
             }
             $28 = $6 + 13 | 0;
             $29 = 0;
             $30 = 1;
             $31 = 8;
             $32 = $6 + 8 | 0;
             $33 = 1024;
             $34 = $6 + 20 | 0;
             $35 = $6 + 16 | 0;
             $36 = 1050806;
             $37 = 1050040;
             $38 = 255;
             $39 = 510;
             $40 = 1050296;
             $41 = 1;
             $42 = 0;
             $24 = 1;
             break label$20;
            default:
             break label$21;
            };
           }
           label$24 : {
            label$25 : {
             label$26 : {
              label$27 : {
               label$28 : {
                label$29 : {
                 label$30 : {
                  label$31 : {
                   label$32 : {
                    label$33 : {
                     label$34 : {
                      label$35 : {
                       label$36 : {
                        label$37 : {
                         label$38 : {
                          label$39 : {
                           label$40 : {
                            switch ($24 | 0) {
                            case 0:
                             $6 = 0;
                             label$43 : {
                              $5 = HEAP32[$19 >> 2] | 0;
                              if (!$5) {
                               break label$43
                              }
                              $8 = 0;
                              $6 = $5;
                              label$44 : while (1) {
                               $4 = HEAP32[($1 + $20 | 0) >> 2] | 0;
                               $233 = $4;
                               $4 = $4 >>> 0 > $22 >>> 0;
                               $7 = (wasm2js_i32$0 = HEAP32[($1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $233, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $6 = $8 + Math_imul($17, $6) | 0;
                               if ($7 >>> 0 <= $6 >>> 0) {
                                break label$38
                               }
                               $7 = HEAP32[(($2 + 2080 | 0) + $20 | 0) >> 2] | 0;
                               $254 = $7;
                               $7 = $7 >>> 0 > $22 >>> 0;
                               $10 = (wasm2js_i32$0 = HEAP32[$12 >> 2] | 0, wasm2js_i32$1 = $254, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $9 = $8 + Math_imul($17, HEAP32[($2 + 2084 | 0) >> 2] | 0) | 0;
                               if ($10 >>> 0 <= $9 >>> 0) {
                                break label$37
                               }
                               HEAP8[((wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $11, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $9 | 0) >> 0] = HEAPU8[((wasm2js_i32$0 = HEAP32[($1 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $15, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $6 | 0) >> 0] | 0;
                               $6 = HEAP32[$19 >> 2] | 0;
                               $8 = $8 + $18 | 0;
                               if ($8 >>> 0 < $5 >>> 0) {
                                continue label$44
                               }
                               break label$44;
                              };
                             }
                             label$45 : {
                              $25 = HEAP32[($2 + 1044 | 0) >> 2] | 0;
                              if (!$25) {
                               break label$45
                              }
                              $8 = HEAP32[$21 >> 2] | 0;
                              $5 = $8 >>> 0 > $22 >>> 0;
                              $26 = (wasm2js_i32$0 = HEAP32[$23 >> 2] | 0, wasm2js_i32$1 = $8, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                              $10 = Math_imul($25, $17);
                              if ($26 >>> 0 <= $10 >>> 0) {
                               break label$31
                              }
                              $4 = 1;
                              $8 = 0;
                              label$46 : while (1) {
                               $7 = HEAP32[(($2 + 2080 | 0) + $20 | 0) >> 2] | 0;
                               $320 = $7;
                               $7 = $7 >>> 0 > $22 >>> 0;
                               $26 = (wasm2js_i32$0 = HEAP32[$12 >> 2] | 0, wasm2js_i32$1 = $320, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $9 = Math_imul($17, HEAP32[($2 + 2084 | 0) >> 2] | 0);
                               if ($26 >>> 0 <= (($6 + $8 | 0) + $9 | 0) >>> 0) {
                                break label$36
                               }
                               HEAP8[(((wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $11, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $6 | 0) + ($8 + $9 | 0) | 0) >> 0] = HEAPU8[((wasm2js_i32$0 = HEAP32[(($2 + 1040 | 0) + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $16, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $10 | 0) >> 0] | 0;
                               $7 = $8 + $18 | 0;
                               if ($7 >>> 0 >= $25 >>> 0) {
                                break label$45
                               }
                               $9 = Math_imul(HEAP32[($2 + 1044 | 0) >> 2] | 0, $17);
                               $10 = $9 + $4 | 0;
                               $8 = $7;
                               $4 = $4 + $18 | 0;
                               $5 = HEAP32[$21 >> 2] | 0;
                               $379 = $5;
                               $5 = $5 >>> 0 > $22 >>> 0;
                               $26 = (wasm2js_i32$0 = HEAP32[$23 >> 2] | 0, wasm2js_i32$1 = $379, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $7 = $9 + $7 | 0;
                               if ($26 >>> 0 > $7 >>> 0) {
                                continue label$46
                               }
                               break label$30;
                              };
                             }
                             $17 = $17 + $18 | 0;
                             if ($17 >>> 0 < $14 >>> 0) {
                              break label$24
                             }
                             $6 = 0;
                             continue label$12;
                            case 1:
                             $43 = HEAP32[$34 >> 2] | 0;
                             $44 = HEAP32[$32 >> 2] | 0;
                             $10 = $44 >>> 0 > $33 >>> 0;
                             $9 = $10 ? $43 : $44;
                             $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                             $45 = Math_imul($4, $42);
                             $24 = $45 + $42 | 0;
                             if ($9 >>> 0 <= $24 >>> 0) {
                              break label$29
                             }
                             label$47 : {
                              $25 = (wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                              if (HEAPU8[($25 + $24 | 0) >> 0] | 0) {
                               break label$47
                              }
                              $8 = Math_imul($4, $42);
                              $6 = $42 + Math_imul($4, $41) | 0;
                              $7 = 1;
                              $26 = HEAP32[$2 >> 2] | 0;
                              label$48 : while (1) {
                               if (($42 + $7 | 0) >>> 0 >= $26 >>> 0) {
                                break label$47
                               }
                               if ($9 >>> 0 <= $6 >>> 0) {
                                break label$35
                               }
                               $8 = $8 + $4 | 0;
                               $7 = $7 + $30 | 0;
                               $5 = $25 + $6 | 0;
                               $6 = $6 + $4 | 0;
                               if (!(HEAPU8[$5 >> 0] | 0)) {
                                continue label$48
                               }
                               break label$48;
                              };
                              if (!$4) {
                               break label$47
                              }
                              if (($7 | 0) == ($30 | 0)) {
                               break label$47
                              }
                              if ($9 >>> 0 <= $45 >>> 0) {
                               break label$32
                              }
                              $5 = Math_imul($4, $42);
                              $6 = 0;
                              label$49 : while (1) {
                               $7 = $8 + $6 | 0;
                               if ($9 >>> 0 <= $7 >>> 0) {
                                break label$34
                               }
                               $9 = (wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $10 = ($9 + $5 | 0) + $6 | 0;
                               $25 = HEAPU8[$10 >> 0] | 0;
                               HEAP8[$10 >> 0] = HEAPU8[(($9 + $8 | 0) + $6 | 0) >> 0] | 0;
                               $9 = HEAP32[$32 >> 2] | 0;
                               $501 = $9;
                               $9 = $9 >>> 0 > $33 >>> 0;
                               $10 = (wasm2js_i32$0 = HEAP32[$34 >> 2] | 0, wasm2js_i32$1 = $501, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               if ($10 >>> 0 <= $7 >>> 0) {
                                break label$33
                               }
                               HEAP8[(((wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $8 | 0) + $6 | 0) >> 0] = $25;
                               label$50 : {
                                $7 = $6 + $30 | 0;
                                if ($7 >>> 0 >= $4 >>> 0) {
                                 break label$50
                                }
                                $6 = $7;
                                $9 = HEAP32[$32 >> 2] | 0;
                                $10 = $9 >>> 0 > $33 >>> 0;
                                $9 = (wasm2js_i32$0 = HEAP32[$34 >> 2] | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                                $45 = $5 + $6 | 0;
                                if ($9 >>> 0 > $45 >>> 0) {
                                 continue label$49
                                }
                                break label$32;
                               }
                               break label$49;
                              };
                              $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                              $24 = Math_imul($4, $42) + $42 | 0;
                              $43 = HEAP32[$34 >> 2] | 0;
                              $44 = HEAP32[$32 >> 2] | 0;
                             }
                             $7 = $44 >>> 0 > $33 >>> 0;
                             $10 = $7 ? $43 : $44;
                             if ($10 >>> 0 <= $24 >>> 0) {
                              break label$28
                             }
                             label$51 : {
                              $8 = HEAP32[$35 >> 2] | 0;
                              $6 = HEAPU8[(($7 ? $8 : $28) + $24 | 0) >> 0] | 0;
                              if (($6 | 0) == ($30 | 0)) {
                               break label$51
                              }
                              if (!$6) {
                               break label$39
                              }
                              $6 = HEAPU8[($6 + $37 | 0) >> 0] | 0;
                              $6 = $6 ? $6 ^ $38 | 0 : $29 - $6 | 0;
                              if ($6 >>> 0 >= $39 >>> 0) {
                               break label$27
                              }
                              if (!$4) {
                               break label$51
                              }
                              $9 = Math_imul($4, $42);
                              if ($10 >>> 0 <= $9 >>> 0) {
                               break label$26
                              }
                              $25 = HEAPU8[($6 + $40 | 0) >> 0] | 0;
                              $8 = 1;
                              $6 = 0;
                              label$52 : while (1) {
                               $7 = (wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $9 | 0;
                               HEAP8[$7 >> 0] = HEAPU8[(((HEAPU8[$7 >> 0] | 0) << $31 | 0 | $25 | 0) + $36 | 0) >> 0] | 0;
                               $6 = $6 + $30 | 0;
                               if ($6 >>> 0 >= $4 >>> 0) {
                                break label$51
                               }
                               $5 = Math_imul(HEAP32[($2 + 4 | 0) >> 2] | 0, $42);
                               $9 = $5 + $8 | 0;
                               $8 = $8 + $30 | 0;
                               $7 = HEAP32[$32 >> 2] | 0;
                               $642 = $7;
                               $7 = $7 >>> 0 > $33 >>> 0;
                               $10 = (wasm2js_i32$0 = HEAP32[$34 >> 2] | 0, wasm2js_i32$1 = $642, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                               $5 = $5 + $6 | 0;
                               if ($10 >>> 0 > $5 >>> 0) {
                                continue label$52
                               }
                               break label$25;
                              };
                             }
                             $45 = $42 + $30 | 0;
                             $44 = HEAP32[$2 >> 2] | 0;
                             if ($45 >>> 0 >= $44 >>> 0) {
                              break label$17
                             }
                             $46 = $45;
                             $6 = 0;
                             break label$19;
                            default:
                             break label$40;
                            };
                           }
                           if (!$49) {
                            break label$18
                           }
                           $57 = 0;
                           $6 = 1;
                           break label$19;
                          }
                          HEAP8[($0 + 12 | 0) >> 0] = 2;
                          if ($44 >>> 0 < 1025 >>> 0) {
                           break label$15
                          }
                          __rust_dealloc($8 | 0, $44 | 0, 1 | 0);
                          break label$15;
                         }
                         core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $6 | 0, $7 | 0);
                         wasm2js_trap();
                        }
                        core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $9 | 0, $10 | 0);
                        wasm2js_trap();
                       }
                       core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, ($9 + $6 | 0) + $8 | 0 | 0, $26 | 0);
                       wasm2js_trap();
                      }
                      core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $6 | 0, $9 | 0);
                      wasm2js_trap();
                     }
                     core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $7 | 0, $9 | 0);
                     wasm2js_trap();
                    }
                    core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $7 | 0, $10 | 0);
                    wasm2js_trap();
                   }
                   core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $45 | 0, $9 | 0);
                   wasm2js_trap();
                  }
                  $7 = $10;
                 }
                 core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $7 | 0, $26 | 0);
                 wasm2js_trap();
                }
                core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $24 | 0, $9 | 0);
                wasm2js_trap();
               }
               core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $24 | 0, $10 | 0);
               wasm2js_trap();
              }
              core__panicking__panic_bounds_check__h273e49a380d01fb7(1121044 | 0, $6 | 0, 510 | 0);
              wasm2js_trap();
             }
             $5 = $9;
            }
            core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $5 | 0, $10 | 0);
            wasm2js_trap();
           }
           $24 = 0;
           $6 = 1;
           continue label$12;
          }
          $6 = 1;
          continue label$12;
         }
         label$53 : while (1) {
          label$54 : {
           label$55 : {
            label$56 : {
             label$57 : {
              label$58 : {
               label$59 : {
                label$60 : {
                 label$61 : {
                  label$62 : {
                   label$63 : {
                    label$64 : {
                     switch ($6 | 0) {
                     case 0:
                      $6 = HEAP32[$32 >> 2] | 0;
                      $4 = $6 >>> 0 > $33 >>> 0;
                      $7 = (wasm2js_i32$0 = HEAP32[$34 >> 2] | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                      $25 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                      $6 = Math_imul($25, $46) + $42 | 0;
                      if ($7 >>> 0 <= $6 >>> 0) {
                       break label$61
                      }
                      label$66 : {
                       $26 = HEAPU8[((wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $6 | 0) >> 0] | 0;
                       if (!$26) {
                        break label$66
                       }
                       if (!$25) {
                        break label$66
                       }
                       $9 = Math_imul($25, $42);
                       if ($7 >>> 0 <= $9 >>> 0) {
                        break label$59
                       }
                       $8 = 1;
                       $6 = 0;
                       $5 = $25;
                       label$67 : while (1) {
                        $5 = $6 + Math_imul($46, $5) | 0;
                        if ($7 >>> 0 <= $5 >>> 0) {
                         break label$63
                        }
                        $4 = (wasm2js_i32$0 = HEAP32[$35 >> 2] | 0, wasm2js_i32$1 = $28, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                        $7 = $4 + $5 | 0;
                        HEAP8[$7 >> 0] = (HEAPU8[$7 >> 0] | 0) ^ (HEAPU8[(($26 << $31 | 0 | (HEAPU8[($4 + $9 | 0) >> 0] | 0) | 0) + $36 | 0) >> 0] | 0) | 0;
                        $6 = $6 + $30 | 0;
                        if ($6 >>> 0 >= $25 >>> 0) {
                         break label$66
                        }
                        $5 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                        $10 = Math_imul($5, $42);
                        $9 = $10 + $8 | 0;
                        $8 = $8 + $30 | 0;
                        $4 = HEAP32[$32 >> 2] | 0;
                        $791 = $4;
                        $4 = $4 >>> 0 > $33 >>> 0;
                        $7 = (wasm2js_i32$0 = HEAP32[$34 >> 2] | 0, wasm2js_i32$1 = $791, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                        $10 = $10 + $6 | 0;
                        if ($7 >>> 0 > $10 >>> 0) {
                         continue label$67
                        }
                        break label$58;
                       };
                      }
                      $46 = $46 + $30 | 0;
                      if ($46 >>> 0 < $44 >>> 0) {
                       break label$55
                      }
                      break label$17;
                     default:
                      break label$64;
                     };
                    }
                    $6 = HEAP32[$52 >> 2] | 0;
                    $4 = $6 >>> 0 > $53 >>> 0;
                    $7 = (wasm2js_i32$0 = HEAP32[$54 >> 2] | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                    $25 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                    $6 = Math_imul($25, $57) + $49 | 0;
                    if ($7 >>> 0 <= $6 >>> 0) {
                     break label$60
                    }
                    label$68 : {
                     $26 = HEAPU8[((wasm2js_i32$0 = HEAP32[$55 >> 2] | 0, wasm2js_i32$1 = $48, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $6 | 0) >> 0] | 0;
                     if (!$26) {
                      break label$68
                     }
                     if (!$25) {
                      break label$68
                     }
                     $9 = Math_imul($25, $49);
                     if ($7 >>> 0 <= $9 >>> 0) {
                      break label$57
                     }
                     $8 = 1;
                     $6 = 0;
                     $5 = $25;
                     label$69 : while (1) {
                      $5 = $6 + Math_imul($57, $5) | 0;
                      if ($7 >>> 0 <= $5 >>> 0) {
                       break label$62
                      }
                      $4 = (wasm2js_i32$0 = HEAP32[$55 >> 2] | 0, wasm2js_i32$1 = $48, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                      $7 = $4 + $5 | 0;
                      HEAP8[$7 >> 0] = (HEAPU8[$7 >> 0] | 0) ^ (HEAPU8[(($26 << $51 | 0 | (HEAPU8[($4 + $9 | 0) >> 0] | 0) | 0) + $56 | 0) >> 0] | 0) | 0;
                      $6 = $6 + $50 | 0;
                      if ($6 >>> 0 >= $25 >>> 0) {
                       break label$68
                      }
                      $5 = HEAP32[($2 + 4 | 0) >> 2] | 0;
                      $10 = Math_imul($5, $49);
                      $9 = $10 + $8 | 0;
                      $8 = $8 + $50 | 0;
                      $4 = HEAP32[$52 >> 2] | 0;
                      $900 = $4;
                      $4 = $4 >>> 0 > $53 >>> 0;
                      $7 = (wasm2js_i32$0 = HEAP32[$54 >> 2] | 0, wasm2js_i32$1 = $900, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
                      $10 = $10 + $6 | 0;
                      if ($7 >>> 0 > $10 >>> 0) {
                       continue label$69
                      }
                      break label$56;
                     };
                    }
                    $57 = $57 + $50 | 0;
                    if ($57 >>> 0 < $49 >>> 0) {
                     break label$54
                    }
                    break label$18;
                   }
                   core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $5 | 0, $7 | 0);
                   wasm2js_trap();
                  }
                  core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $5 | 0, $7 | 0);
                  wasm2js_trap();
                 }
                 core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $6 | 0, $7 | 0);
                 wasm2js_trap();
                }
                core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $6 | 0, $7 | 0);
                wasm2js_trap();
               }
               $10 = $9;
              }
              core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $10 | 0, $7 | 0);
              wasm2js_trap();
             }
             $10 = $9;
            }
            core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $10 | 0, $7 | 0);
            wasm2js_trap();
           }
           $6 = 0;
           continue label$53;
          }
          $6 = 1;
          continue label$53;
         };
        }
        $49 = $49 + $50 | 0;
        if ($49 >>> 0 >= $47 >>> 0) {
         break label$16
        }
        $24 = 2;
        $6 = 1;
        continue label$12;
       }
       $41 = $41 + $30 | 0;
       $42 = $45;
       if ($42 >>> 0 < $27 >>> 0) {
        break label$14
       }
       $47 = HEAP32[$2 >> 2] | 0;
       if (!$47) {
        break label$16
       }
       $48 = $2 + 13 | 0;
       $49 = 0;
       $50 = 1;
       $51 = 8;
       $52 = $2 + 8 | 0;
       $53 = 1024;
       $54 = $2 + 20 | 0;
       $55 = $2 + 16 | 0;
       $56 = 1050806;
       $24 = 2;
       break label$13;
      }
      reed_solomon_erasure__matrix__Matrix__sub_matrix__h7dd09f8655f0cb2b($0 | 0, $2 | 0, 0 | 0, $3 | 0, $3 | 0, $3 << 1 | 0 | 0);
      $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      if ($6 >>> 0 < 1025 >>> 0) {
       break label$15
      }
      __rust_dealloc(HEAP32[($2 + 16 | 0) >> 2] | 0 | 0, $6 | 0, 1 | 0);
      global$0 = $2 + 4144 | 0;
      return;
     }
     global$0 = $2 + 4144 | 0;
     return;
    }
    $24 = 1;
    $6 = 1;
    continue label$12;
   }
   $6 = 1;
   continue label$12;
  };
 }
 
 function $str_20as_20core__fmt__Debug___fmt__he119db1bfac18c67($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, $12 = 0, $13 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $9 = 0, $18 = 0, $8 = 0, $18$hi = 0, $3 = 0, $10 = 0, $14 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $15 = 0, $5 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $16 = 0, $29 = 0, $11 = 0, $253 = 0, $253$hi = 0, $255$hi = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4 = 1;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[((HEAP32[($2 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[($2 + 24 | 0) >> 2] | 0, 34) | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!$1) {
      break label$3
     }
     $5 = $0 + $1 | 0;
     $6 = $2 + 24 | 0;
     $7 = $2 + 28 | 0;
     $8 = $0;
     $9 = 0;
     $10 = 0;
     label$4 : {
      label$5 : while (1) {
       $11 = $8;
       $12 = $8 + 1 | 0;
       label$6 : {
        label$7 : {
         $13 = HEAP8[$8 >> 0] | 0;
         if (($13 | 0) < (0 | 0)) {
          break label$7
         }
         $13 = $13 & 255 | 0;
         $8 = $12;
         break label$6;
        }
        label$8 : {
         label$9 : {
          if (($12 | 0) == ($5 | 0)) {
           break label$9
          }
          $14 = (HEAPU8[$12 >> 0] | 0) & 63 | 0;
          $8 = $8 + 2 | 0;
          $12 = $8;
          break label$8;
         }
         $14 = 0;
         $8 = $5;
        }
        $15 = $13 & 31 | 0;
        label$10 : {
         label$11 : {
          label$12 : {
           $13 = $13 & 255 | 0;
           if ($13 >>> 0 < 224 >>> 0) {
            break label$12
           }
           if (($8 | 0) == ($5 | 0)) {
            break label$11
           }
           $16 = (HEAPU8[$8 >> 0] | 0) & 63 | 0;
           $12 = $8 + 1 | 0;
           $17 = $12;
           break label$10;
          }
          $13 = $14 | ($15 << 6 | 0) | 0;
          $8 = $12;
          break label$6;
         }
         $16 = 0;
         $17 = $5;
        }
        $14 = $16 | ($14 << 6 | 0) | 0;
        label$13 : {
         label$14 : {
          label$15 : {
           if ($13 >>> 0 < 240 >>> 0) {
            break label$15
           }
           if (($17 | 0) == ($5 | 0)) {
            break label$14
           }
           $8 = $17 + 1 | 0;
           $13 = (HEAPU8[$17 >> 0] | 0) & 63 | 0;
           break label$13;
          }
          $13 = $14 | ($15 << 12 | 0) | 0;
          $8 = $12;
          break label$6;
         }
         $13 = 0;
         $8 = $12;
        }
        $13 = $14 << 6 | 0 | (($15 << 18 | 0) & 1835008 | 0) | 0 | $13 | 0;
        if (($13 | 0) == (1114112 | 0)) {
         break label$4
        }
       }
       $12 = 2;
       label$16 : {
        label$17 : {
         label$18 : {
          label$19 : {
           label$20 : {
            label$21 : {
             label$22 : {
              label$23 : {
               label$24 : {
                $15 = $13 + -9 | 0;
                if ($15 >>> 0 > 30 >>> 0) {
                 break label$24
                }
                $14 = 116;
                label$25 : {
                 switch ($15 | 0) {
                 case 4:
                  break label$21;
                 case 2:
                 case 3:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 9:
                 case 10:
                 case 11:
                 case 12:
                 case 13:
                 case 14:
                 case 15:
                 case 16:
                 case 17:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 23:
                 case 24:
                 case 26:
                 case 27:
                 case 28:
                 case 29:
                  break label$22;
                 case 25:
                 case 30:
                  break label$23;
                 case 1:
                  break label$25;
                 default:
                  break label$17;
                 };
                }
                $14 = 110;
                break label$20;
               }
               if (($13 | 0) != (92 | 0)) {
                break label$22
               }
              }
              $14 = $13;
              break label$17;
             }
             if (!(core__unicode__bool_trie__BoolTrie__lookup__h0292b62b164623f4(1121696 | 0, $13 | 0) | 0)) {
              break label$19
             }
             break label$18;
            }
            $14 = 114;
           }
           break label$17;
          }
          label$26 : {
           if ($13 >>> 0 > 65535 >>> 0) {
            break label$26
           }
           if (!(core__unicode__printable__check__h1a95ff94fcb738db($13 | 0, 1117600 | 0, 40 | 0, 1117680 | 0, 303 | 0, 1117983 | 0, 316 | 0) | 0)) {
            break label$18
           }
           break label$16;
          }
          label$27 : {
           if ($13 >>> 0 > 131071 >>> 0) {
            break label$27
           }
           if (!(core__unicode__printable__check__h1a95ff94fcb738db($13 | 0, 1118299 | 0, 33 | 0, 1118365 | 0, 158 | 0, 1118523 | 0, 381 | 0) | 0)) {
            break label$18
           }
           break label$16;
          }
          if ($13 >>> 0 > 917999 >>> 0) {
           break label$18
          }
          if (($13 + -195102 | 0) >>> 0 < 722658 >>> 0) {
           break label$18
          }
          if (($13 + -191457 | 0) >>> 0 < 3103 >>> 0) {
           break label$18
          }
          if (($13 + -183970 | 0) >>> 0 < 14 >>> 0) {
           break label$18
          }
          if (($13 & 2097150 | 0 | 0) == (178206 | 0)) {
           break label$18
          }
          if (($13 + -173783 | 0) >>> 0 < 41 >>> 0) {
           break label$18
          }
          if (($13 + -177973 | 0) >>> 0 > 10 >>> 0) {
           break label$16
          }
         }
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = (Math_clz32($13 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
         i64toi32_i32$1 = 5;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
         $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
         $18$hi = i64toi32_i32$1;
         $12 = 3;
         $14 = $13;
        }
        HEAP32[($3 + 4 | 0) >> 2] = $1;
        HEAP32[$3 >> 2] = $0;
        HEAP32[($3 + 8 | 0) >> 2] = $9;
        HEAP32[($3 + 12 | 0) >> 2] = $10;
        label$28 : {
         if ($10 >>> 0 < $9 >>> 0) {
          break label$28
         }
         label$29 : {
          if (!$9) {
           break label$29
          }
          if (($9 | 0) == ($1 | 0)) {
           break label$29
          }
          if ($9 >>> 0 >= $1 >>> 0) {
           break label$28
          }
          if ((HEAP8[($0 + $9 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
           break label$28
          }
         }
         label$30 : {
          if (!$10) {
           break label$30
          }
          if (($10 | 0) == ($1 | 0)) {
           break label$30
          }
          if ($10 >>> 0 >= $1 >>> 0) {
           break label$28
          }
          if ((HEAP8[($0 + $10 | 0) >> 0] | 0 | 0) <= (-65 | 0)) {
           break label$28
          }
         }
         label$31 : {
          if (FUNCTION_TABLE[HEAP32[((HEAP32[$7 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$6 >> 2] | 0, $0 + $9 | 0, $10 - $9 | 0) | 0) {
           break label$31
          }
          label$32 : while (1) {
           label$33 : {
            label$34 : {
             label$35 : {
              label$36 : {
               label$37 : {
                label$38 : {
                 label$39 : {
                  if (($12 | 0) == (1 | 0)) {
                   break label$39
                  }
                  $9 = 92;
                  label$40 : {
                   if (($12 | 0) == (2 | 0)) {
                    break label$40
                   }
                   if (($12 | 0) != (3 | 0)) {
                    break label$34
                   }
                   i64toi32_i32$1 = $18$hi;
                   i64toi32_i32$0 = $18;
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$3 = 32;
                   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = 0;
                    $29 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                   } else {
                    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                    $29 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
                   }
                   $12 = ($29 & 255 | 0) + -1 | 0;
                   if ($12 >>> 0 > 4 >>> 0) {
                    break label$34
                   }
                   label$41 : {
                    switch ($12 | 0) {
                    case 1:
                     break label$35;
                    case 3:
                     break label$36;
                    case 2:
                     break label$37;
                    case 4:
                     break label$38;
                    default:
                     break label$41;
                    };
                   }
                   i64toi32_i32$2 = $18$hi;
                   i64toi32_i32$1 = $18;
                   i64toi32_i32$0 = -256;
                   i64toi32_i32$3 = -1;
                   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
                   $18 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
                   $18$hi = i64toi32_i32$0;
                   $12 = 3;
                   $9 = 125;
                   break label$33;
                  }
                  $12 = 1;
                  break label$33;
                 }
                 $12 = 0;
                 $9 = $14;
                 break label$33;
                }
                i64toi32_i32$0 = $18$hi;
                i64toi32_i32$2 = $18;
                i64toi32_i32$1 = -256;
                i64toi32_i32$3 = -1;
                i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
                i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
                i64toi32_i32$2 = 4;
                i64toi32_i32$3 = 0;
                i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
                $18 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
                $18$hi = i64toi32_i32$2;
                $12 = 3;
                break label$33;
               }
               i64toi32_i32$2 = $18$hi;
               i64toi32_i32$1 = $18;
               i64toi32_i32$0 = -256;
               i64toi32_i32$3 = -1;
               i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
               i64toi32_i32$1 = 2;
               i64toi32_i32$3 = 0;
               i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
               $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
               $18$hi = i64toi32_i32$1;
               $12 = 3;
               $9 = 123;
               break label$33;
              }
              i64toi32_i32$1 = $18$hi;
              i64toi32_i32$0 = $18;
              i64toi32_i32$2 = -256;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
              i64toi32_i32$0 = 3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
              $18 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
              $18$hi = i64toi32_i32$0;
              $12 = 3;
              $9 = 117;
              break label$33;
             }
             i64toi32_i32$0 = $18$hi;
             $15 = $18;
             $12 = ($14 >>> (($18 << 2 | 0) & 28 | 0) | 0) & 15 | 0;
             $9 = $12 >>> 0 < 10 >>> 0 ? $12 | 48 | 0 : $12 + 87 | 0;
             label$42 : {
              if (!$18) {
               break label$42
              }
              i64toi32_i32$0 = $18$hi;
              i64toi32_i32$2 = $18;
              i64toi32_i32$1 = -1;
              i64toi32_i32$3 = -1;
              i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
              if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
               i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
              }
              i64toi32_i32$0 = i64toi32_i32$4;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = -1;
              i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
              $253 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
              $253$hi = i64toi32_i32$2;
              i64toi32_i32$2 = $18$hi;
              i64toi32_i32$5 = $18;
              i64toi32_i32$0 = -1;
              i64toi32_i32$3 = 0;
              i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
              $255$hi = i64toi32_i32$0;
              i64toi32_i32$0 = $253$hi;
              i64toi32_i32$2 = $253;
              i64toi32_i32$5 = $255$hi;
              i64toi32_i32$3 = $18 & i64toi32_i32$3 | 0;
              i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
              $18 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
              $18$hi = i64toi32_i32$5;
              $12 = 3;
              break label$33;
             }
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$5 = $18$hi;
             i64toi32_i32$0 = $18;
             i64toi32_i32$2 = -256;
             i64toi32_i32$3 = -1;
             i64toi32_i32$2 = $18$hi & i64toi32_i32$2 | 0;
             i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
             $18 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
             $18$hi = i64toi32_i32$0;
             $12 = 3;
             break label$33;
            }
            $12 = 1;
            label$43 : {
             if ($13 >>> 0 < 128 >>> 0) {
              break label$43
             }
             $12 = 2;
             if ($13 >>> 0 < 2048 >>> 0) {
              break label$43
             }
             $12 = $13 >>> 0 < 65536 >>> 0 ? 3 : 4;
            }
            $9 = $12 + $10 | 0;
            break label$16;
           }
           if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$7 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$6 >> 2] | 0, $9) | 0)) {
            continue label$32
           }
           break label$32;
          };
         }
         $4 = 1;
         break label$1;
        }
        HEAP32[($3 + 24 | 0) >> 2] = $3 + 12 | 0;
        HEAP32[($3 + 20 | 0) >> 2] = $3 + 8 | 0;
        HEAP32[($3 + 16 | 0) >> 2] = $3;
        core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__Range_usize____index___7b_7bclosure_7d_7d__h5a4b9c29955ace4b($3 + 16 | 0 | 0);
        wasm2js_trap();
       }
       $10 = ($10 - $11 | 0) + $8 | 0;
       if (($5 | 0) != ($8 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$9) {
      break label$2
     }
     if (($9 | 0) == ($1 | 0)) {
      break label$2
     }
     label$44 : {
      if ($9 >>> 0 >= $1 >>> 0) {
       break label$44
      }
      if ((HEAP8[($0 + $9 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
       break label$2
      }
     }
     core__str__slice_error_fail__h6cf288c1f70d29b2($0 | 0, $1 | 0, $9 | 0, $1 | 0);
     wasm2js_trap();
    }
    $9 = 0;
   }
   $12 = $2 + 24 | 0;
   $10 = $2 + 28 | 0;
   if (FUNCTION_TABLE[HEAP32[((HEAP32[$10 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$12 >> 2] | 0, $0 + $9 | 0, $1 - $9 | 0) | 0) {
    break label$1
   }
   $4 = FUNCTION_TABLE[HEAP32[((HEAP32[$10 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$12 >> 2] | 0, 34) | 0;
  }
  global$0 = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function core__fmt__write__h822cd2648d8eacf5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $7 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 36 | 0) >> 2] = $1;
  $4 = HEAP32[($2 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 52 | 0) >> 2] = $4;
  HEAP8[($3 + 56 | 0) >> 0] = 3;
  $5 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  HEAP32[($3 + 44 | 0) >> 2] = $5 + ($4 << 3 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[($3 + 12 | 0) >> 2] = 32;
  HEAP32[($3 + 32 | 0) >> 2] = $0;
  $6 = 0;
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 48 | 0) >> 2] = $5;
  HEAP32[($3 + 40 | 0) >> 2] = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $7 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       if (!$7) {
        break label$5
       }
       $8 = HEAP32[$2 >> 2] | 0;
       $9 = HEAP32[($2 + 4 | 0) >> 2] | 0;
       $5 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $10 = $5 >>> 0 > $9 >>> 0 ? $9 : $5;
       if (!$10) {
        break label$4
       }
       if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0, HEAP32[$8 >> 2] | 0, HEAP32[($8 + 4 | 0) >> 2] | 0) | 0) {
        break label$3
       }
       $5 = $8 + 12 | 0;
       $1 = $3 + 56 | 0;
       $11 = $3 + 52 | 0;
       $12 = $3 + 48 | 0;
       $6 = 1;
       label$6 : {
        label$7 : while (1) {
         HEAP8[$1 >> 0] = HEAPU8[($7 + 32 | 0) >> 0] | 0;
         HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($7 + 8 | 0) >> 2] | 0;
         HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($7 + 12 | 0) >> 2] | 0;
         $2 = 0;
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              $0 = HEAP32[($7 + 24 | 0) >> 2] | 0;
              if (($0 | 0) == (1 | 0)) {
               break label$12
              }
              label$13 : {
               if (($0 | 0) == (2 | 0)) {
                break label$13
               }
               if (($0 | 0) == (3 | 0)) {
                break label$8
               }
               $4 = HEAP32[($7 + 28 | 0) >> 2] | 0;
               break label$11;
              }
              $4 = ($3 + 8 | 0) + 32 | 0;
              $0 = HEAP32[$4 >> 2] | 0;
              if (($0 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
               break label$10
              }
              HEAP32[$4 >> 2] = $0 + 8 | 0;
              if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != (41 | 0)) {
               break label$8
              }
              $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
              break label$11;
             }
             $0 = HEAP32[($7 + 28 | 0) >> 2] | 0;
             $4 = HEAP32[$11 >> 2] | 0;
             if ($0 >>> 0 >= $4 >>> 0) {
              break label$9
             }
             $0 = (HEAP32[$12 >> 2] | 0) + ($0 << 3 | 0) | 0;
             if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != (41 | 0)) {
              break label$8
             }
             $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
            }
            $2 = 1;
            break label$8;
           }
           break label$8;
          }
          core__panicking__panic_bounds_check__h273e49a380d01fb7(1121600 | 0, $0 | 0, $4 | 0);
          wasm2js_trap();
         }
         HEAP32[(($3 + 8 | 0) + 12 | 0) >> 2] = $4;
         HEAP32[(($3 + 8 | 0) + 8 | 0) >> 2] = $2;
         $2 = 0;
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
              if (($0 | 0) == (1 | 0)) {
               break label$18
              }
              label$19 : {
               if (($0 | 0) == (2 | 0)) {
                break label$19
               }
               if (($0 | 0) == (3 | 0)) {
                break label$14
               }
               $4 = HEAP32[($7 + 20 | 0) >> 2] | 0;
               break label$17;
              }
              $4 = ($3 + 8 | 0) + 32 | 0;
              $0 = HEAP32[$4 >> 2] | 0;
              if (($0 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
               break label$16
              }
              HEAP32[$4 >> 2] = $0 + 8 | 0;
              if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != (41 | 0)) {
               break label$14
              }
              $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
              break label$17;
             }
             $0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
             $4 = HEAP32[$11 >> 2] | 0;
             if ($0 >>> 0 >= $4 >>> 0) {
              break label$15
             }
             $0 = (HEAP32[$12 >> 2] | 0) + ($0 << 3 | 0) | 0;
             if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != (41 | 0)) {
              break label$14
             }
             $4 = HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0;
            }
            $2 = 1;
            break label$14;
           }
           break label$14;
          }
          core__panicking__panic_bounds_check__h273e49a380d01fb7(1121600 | 0, $0 | 0, $4 | 0);
          wasm2js_trap();
         }
         HEAP32[(($3 + 8 | 0) + 20 | 0) >> 2] = $4;
         HEAP32[(($3 + 8 | 0) + 16 | 0) >> 2] = $2;
         label$20 : {
          label$21 : {
           label$22 : {
            if ((HEAP32[$7 >> 2] | 0 | 0) != (1 | 0)) {
             break label$22
            }
            $2 = HEAP32[($7 + 4 | 0) >> 2] | 0;
            $4 = HEAP32[$11 >> 2] | 0;
            if ($2 >>> 0 >= $4 >>> 0) {
             break label$20
            }
            $2 = (HEAP32[$12 >> 2] | 0) + ($2 << 3 | 0) | 0;
            break label$21;
           }
           $4 = ($3 + 8 | 0) + 32 | 0;
           $2 = HEAP32[$4 >> 2] | 0;
           if (($2 | 0) == (HEAP32[(($3 + 8 | 0) + 36 | 0) >> 2] | 0 | 0)) {
            break label$6
           }
           HEAP32[$4 >> 2] = $2 + 8 | 0;
          }
          if (FUNCTION_TABLE[HEAP32[($2 + 4 | 0) >> 2] | 0 | 0](HEAP32[$2 >> 2] | 0, $3 + 8 | 0) | 0) {
           break label$3
          }
          if ($6 >>> 0 >= $10 >>> 0) {
           break label$4
          }
          $2 = $5 + -4 | 0;
          $4 = HEAP32[$5 >> 2] | 0;
          $5 = $5 + 8 | 0;
          $7 = $7 + 36 | 0;
          $6 = $6 + 1 | 0;
          if (!(FUNCTION_TABLE[HEAP32[((HEAP32[(($3 + 8 | 0) + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[(($3 + 8 | 0) + 24 | 0) >> 2] | 0, HEAP32[$2 >> 2] | 0, $4) | 0)) {
           continue label$7
          }
          break label$3;
         }
         break label$7;
        };
        core__panicking__panic_bounds_check__h273e49a380d01fb7(1121584 | 0, $2 | 0, $4 | 0);
        wasm2js_trap();
       }
       core__panicking__panic__h3c512c7c2bb6da25(1121352 | 0);
       wasm2js_trap();
      }
      $8 = HEAP32[$2 >> 2] | 0;
      $9 = HEAP32[($2 + 4 | 0) >> 2] | 0;
      $10 = $4 >>> 0 > $9 >>> 0 ? $9 : $4;
      if (!$10) {
       break label$4
      }
      if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0, HEAP32[$8 >> 2] | 0, HEAP32[($8 + 4 | 0) >> 2] | 0) | 0) {
       break label$3
      }
      $7 = $8 + 12 | 0;
      $0 = $3 + 32 | 0;
      $1 = $3 + 36 | 0;
      $6 = 1;
      label$23 : while (1) {
       if (FUNCTION_TABLE[HEAP32[($5 + 4 | 0) >> 2] | 0 | 0](HEAP32[$5 >> 2] | 0, $3 + 8 | 0) | 0) {
        break label$3
       }
       if ($6 >>> 0 >= $10 >>> 0) {
        break label$4
       }
       $2 = $7 + -4 | 0;
       $4 = HEAP32[$7 >> 2] | 0;
       $7 = $7 + 8 | 0;
       $5 = $5 + 8 | 0;
       $6 = $6 + 1 | 0;
       if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$0 >> 2] | 0, HEAP32[$2 >> 2] | 0, $4) | 0)) {
        continue label$23
       }
       break label$3;
      };
     }
     if ($9 >>> 0 <= $6 >>> 0) {
      break label$2
     }
     $7 = $8 + ($6 << 3 | 0) | 0;
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[($3 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3 + 32 | 0) >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[($7 + 4 | 0) >> 2] | 0) | 0)) {
      break label$2
     }
    }
    $7 = 1;
    break label$1;
   }
   $7 = 0;
  }
  global$0 = $3 + 64 | 0;
  return $7 | 0;
 }
 
 function core__str__slice_error_fail__h6cf288c1f70d29b2($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $8 = 0, $6 = 0, $9 = 0, $5 = 0, $7 = 0, i64toi32_i32$0 = 0;
  $4 = global$0 - 112 | 0;
  global$0 = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $3;
  HEAP32[($4 + 8 | 0) >> 2] = $2;
  $5 = 1;
  $6 = $1;
  label$1 : {
   if ($1 >>> 0 < 257 >>> 0) {
    break label$1
   }
   $7 = 0 - $1 | 0;
   $8 = 256;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if ($8 >>> 0 >= $1 >>> 0) {
       break label$4
      }
      if ((HEAP8[($0 + $8 | 0) >> 0] | 0 | 0) > (-65 | 0)) {
       break label$2
      }
     }
     $6 = $8 + -1 | 0;
     $5 = 0;
     if (($8 | 0) == (1 | 0)) {
      break label$1
     }
     $9 = $7 + $8 | 0;
     $8 = $6;
     if (($9 | 0) != (1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $5 = 0;
   $6 = $8;
  }
  HEAP32[($4 + 20 | 0) >> 2] = $6;
  HEAP32[($4 + 16 | 0) >> 2] = $0;
  HEAP32[($4 + 28 | 0) >> 2] = $5 ? 0 : 5;
  HEAP32[($4 + 24 | 0) >> 2] = $5 ? 1116968 : 1117206;
  label$5 : {
   label$6 : {
    label$7 : {
     $8 = $2 >>> 0 > $1 >>> 0;
     if ($8) {
      break label$7
     }
     if ($3 >>> 0 > $1 >>> 0) {
      break label$7
     }
     if ($2 >>> 0 > $3 >>> 0) {
      break label$6
     }
     label$8 : {
      label$9 : {
       if (!$2) {
        break label$9
       }
       if (($1 | 0) == ($2 | 0)) {
        break label$9
       }
       if ($1 >>> 0 <= $2 >>> 0) {
        break label$8
       }
       if ((HEAP8[($0 + $2 | 0) >> 0] | 0 | 0) < (-64 | 0)) {
        break label$8
       }
      }
      $2 = $3;
     }
     HEAP32[($4 + 32 | 0) >> 2] = $2;
     label$10 : {
      label$11 : {
       if (!$2) {
        break label$11
       }
       if (($2 | 0) == ($1 | 0)) {
        break label$11
       }
       $9 = $1 + 1 | 0;
       label$12 : while (1) {
        label$13 : {
         if ($2 >>> 0 >= $1 >>> 0) {
          break label$13
         }
         if ((HEAP8[($0 + $2 | 0) >> 0] | 0 | 0) >= (-64 | 0)) {
          break label$11
         }
        }
        $8 = $2 + -1 | 0;
        if (($2 | 0) == (1 | 0)) {
         break label$10
        }
        $6 = ($9 | 0) == ($2 | 0);
        $2 = $8;
        if (!$6) {
         continue label$12
        }
        break label$10;
       };
      }
      $8 = $2;
     }
     if (($8 | 0) == ($1 | 0)) {
      break label$5
     }
     $6 = 1;
     $5 = 0;
     label$14 : {
      label$15 : {
       $9 = $0 + $8 | 0;
       $2 = HEAP8[$9 >> 0] | 0;
       if (($2 | 0) < (0 | 0)) {
        break label$15
       }
       HEAP32[($4 + 36 | 0) >> 2] = $2 & 255 | 0;
       $2 = $4 + 40 | 0;
       break label$14;
      }
      $6 = $0 + $1 | 0;
      $1 = $6;
      label$16 : {
       if (($9 + 1 | 0 | 0) == ($1 | 0)) {
        break label$16
       }
       $1 = $9 + 2 | 0;
       $5 = (HEAPU8[($9 + 1 | 0) >> 0] | 0) & 63 | 0;
      }
      $9 = $2 & 31 | 0;
      label$17 : {
       label$18 : {
        label$19 : {
         if (($2 & 255 | 0) >>> 0 < 224 >>> 0) {
          break label$19
         }
         $0 = 0;
         $7 = $6;
         label$20 : {
          if (($1 | 0) == ($6 | 0)) {
           break label$20
          }
          $7 = $1 + 1 | 0;
          $0 = (HEAPU8[$1 >> 0] | 0) & 63 | 0;
         }
         $1 = $0 | ($5 << 6 | 0) | 0;
         if (($2 & 255 | 0) >>> 0 < 240 >>> 0) {
          break label$18
         }
         $2 = 0;
         label$21 : {
          if (($7 | 0) == ($6 | 0)) {
           break label$21
          }
          $2 = (HEAPU8[$7 >> 0] | 0) & 63 | 0;
         }
         $1 = $1 << 6 | 0 | (($9 << 18 | 0) & 1835008 | 0) | 0 | $2 | 0;
         if (($1 | 0) == (1114112 | 0)) {
          break label$5
         }
         break label$17;
        }
        $1 = $5 | ($9 << 6 | 0) | 0;
        break label$17;
       }
       $1 = $1 | ($9 << 12 | 0) | 0;
      }
      HEAP32[($4 + 36 | 0) >> 2] = $1;
      $6 = 1;
      $2 = $4 + 40 | 0;
      if ($1 >>> 0 < 128 >>> 0) {
       break label$14
      }
      $6 = 2;
      if ($1 >>> 0 < 2048 >>> 0) {
       break label$14
      }
      $6 = $1 >>> 0 < 65536 >>> 0 ? 3 : 4;
     }
     HEAP32[($4 + 40 | 0) >> 2] = $8;
     HEAP32[($4 + 44 | 0) >> 2] = $6 + $8 | 0;
     HEAP32[($4 + 108 | 0) >> 2] = 38;
     HEAP32[($4 + 100 | 0) >> 2] = 38;
     HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 39;
     HEAP32[($4 + 84 | 0) >> 2] = 40;
     HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 5;
     HEAP32[($4 + 88 | 0) >> 2] = $2;
     HEAP32[($4 + 76 | 0) >> 2] = 24;
     i64toi32_i32$0 = 0;
     HEAP32[($4 + 52 | 0) >> 2] = 5;
     HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4 + 48 | 0) >> 2] = 1121528;
     HEAP32[($4 + 104 | 0) >> 2] = $4 + 24 | 0;
     HEAP32[($4 + 96 | 0) >> 2] = $4 + 16 | 0;
     HEAP32[($4 + 80 | 0) >> 2] = $4 + 36 | 0;
     HEAP32[($4 + 72 | 0) >> 2] = $4 + 32 | 0;
     HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
     core__panicking__panic_fmt__h472d766e4dff71a2($4 + 48 | 0 | 0, 1121568 | 0);
     wasm2js_trap();
    }
    HEAP32[($4 + 40 | 0) >> 2] = $8 ? $2 : $3;
    HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 38;
    HEAP32[($4 + 84 | 0) >> 2] = 38;
    HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 3;
    HEAP32[($4 + 76 | 0) >> 2] = 24;
    i64toi32_i32$0 = 0;
    HEAP32[($4 + 52 | 0) >> 2] = 3;
    HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 48 | 0) >> 2] = 1121440;
    HEAP32[($4 + 88 | 0) >> 2] = $4 + 24 | 0;
    HEAP32[($4 + 80 | 0) >> 2] = $4 + 16 | 0;
    HEAP32[($4 + 72 | 0) >> 2] = $4 + 40 | 0;
    HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
    core__panicking__panic_fmt__h472d766e4dff71a2($4 + 48 | 0 | 0, 1121464 | 0);
    wasm2js_trap();
   }
   HEAP32[($4 + 100 | 0) >> 2] = 38;
   HEAP32[(($4 + 72 | 0) + 20 | 0) >> 2] = 38;
   HEAP32[($4 + 84 | 0) >> 2] = 24;
   HEAP32[(($4 + 48 | 0) + 20 | 0) >> 2] = 4;
   HEAP32[($4 + 76 | 0) >> 2] = 24;
   i64toi32_i32$0 = 0;
   HEAP32[($4 + 52 | 0) >> 2] = 4;
   HEAP32[($4 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 48 | 0) >> 2] = 1121480;
   HEAP32[($4 + 96 | 0) >> 2] = $4 + 24 | 0;
   HEAP32[($4 + 88 | 0) >> 2] = $4 + 16 | 0;
   HEAP32[($4 + 80 | 0) >> 2] = $4 + 12 | 0;
   HEAP32[($4 + 72 | 0) >> 2] = $4 + 8 | 0;
   HEAP32[($4 + 64 | 0) >> 2] = $4 + 72 | 0;
   core__panicking__panic_fmt__h472d766e4dff71a2($4 + 48 | 0 | 0, 1121512 | 0);
   wasm2js_trap();
  }
  core__panicking__panic__h3c512c7c2bb6da25(1121352 | 0);
  wasm2js_trap();
 }
 
 function core__fmt__Formatter__pad__h96c9d32207b4250a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $10 = 0, $9 = 0, $6 = 0, $7 = 0, $5 = 0, $8 = 0, $11 = 0, $14 = 0, $4 = 0, $12 = 0, $13 = 0;
  $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if (($4 | 0) != (1 | 0)) {
            break label$9
           }
           if ($3) {
            break label$8
           }
           break label$3;
          }
          if (!$3) {
           break label$7
          }
         }
         if (!$2) {
          break label$6
         }
         $5 = $1 + $2 | 0;
         $6 = (HEAP32[($0 + 20 | 0) >> 2] | 0) ^ -1 | 0;
         $7 = 0;
         $3 = $1;
         $8 = $3;
         label$10 : while (1) {
          $9 = $3 + 1 | 0;
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               $10 = HEAP8[$3 >> 0] | 0;
               if (($10 | 0) < (0 | 0)) {
                break label$15
               }
               $10 = $10 & 255 | 0;
               break label$14;
              }
              label$16 : {
               label$17 : {
                if (($9 | 0) == ($5 | 0)) {
                 break label$17
                }
                $11 = (HEAPU8[$9 >> 0] | 0) & 63 | 0;
                $3 = $3 + 2 | 0;
                $9 = $3;
                break label$16;
               }
               $11 = 0;
               $3 = $5;
              }
              $12 = $10 & 31 | 0;
              label$18 : {
               label$19 : {
                label$20 : {
                 $10 = $10 & 255 | 0;
                 if ($10 >>> 0 < 224 >>> 0) {
                  break label$20
                 }
                 if (($3 | 0) == ($5 | 0)) {
                  break label$19
                 }
                 $13 = (HEAPU8[$3 >> 0] | 0) & 63 | 0;
                 $9 = $3 + 1 | 0;
                 $14 = $9;
                 break label$18;
                }
                $10 = $11 | ($12 << 6 | 0) | 0;
                break label$14;
               }
               $13 = 0;
               $14 = $5;
              }
              $11 = $13 | ($11 << 6 | 0) | 0;
              label$21 : {
               if ($10 >>> 0 < 240 >>> 0) {
                break label$21
               }
               if (($14 | 0) == ($5 | 0)) {
                break label$13
               }
               $3 = $14 + 1 | 0;
               $10 = (HEAPU8[$14 >> 0] | 0) & 63 | 0;
               break label$12;
              }
              $10 = $11 | ($12 << 12 | 0) | 0;
             }
             $3 = $9;
             $6 = $6 + 1 | 0;
             if ($6) {
              break label$11
             }
             break label$5;
            }
            $10 = 0;
            $3 = $9;
           }
           $10 = $11 << 6 | 0 | (($12 << 18 | 0) & 1835008 | 0) | 0 | $10 | 0;
           if (($10 | 0) == (1114112 | 0)) {
            break label$4
           }
           $6 = $6 + 1 | 0;
           if (!$6) {
            break label$5
           }
          }
          $7 = ($7 - $8 | 0) + $3 | 0;
          $8 = $3;
          if (($5 | 0) != ($3 | 0)) {
           continue label$10
          }
          break label$4;
         };
        }
        $3 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0;
        break label$1;
       }
       $2 = 0;
       if ($4) {
        break label$3
       }
       break label$2;
      }
      if (($10 | 0) == (1114112 | 0)) {
       break label$4
      }
      label$22 : {
       label$23 : {
        if (!$7) {
         break label$23
        }
        if (($7 | 0) == ($2 | 0)) {
         break label$23
        }
        $3 = 0;
        if ($7 >>> 0 >= $2 >>> 0) {
         break label$22
        }
        if ((HEAP8[($1 + $7 | 0) >> 0] | 0 | 0) < (-64 | 0)) {
         break label$22
        }
       }
       $3 = $1;
      }
      $2 = $3 ? $7 : $2;
      $1 = $3 ? $3 : $1;
     }
     if (!$4) {
      break label$2
     }
    }
    $9 = 0;
    label$24 : {
     if (!$2) {
      break label$24
     }
     $10 = $2;
     $3 = $1;
     label$25 : while (1) {
      $9 = $9 + (((HEAPU8[$3 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
      $3 = $3 + 1 | 0;
      $10 = $10 + -1 | 0;
      if ($10) {
       continue label$25
      }
      break label$25;
     };
    }
    label$26 : {
     label$27 : {
      label$28 : {
       label$29 : {
        $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if (($2 - $9 | 0) >>> 0 >= $6 >>> 0) {
         break label$29
        }
        $9 = 0;
        label$30 : {
         if (!$2) {
          break label$30
         }
         $9 = 0;
         $10 = $2;
         $3 = $1;
         label$31 : while (1) {
          $9 = $9 + (((HEAPU8[$3 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
          $3 = $3 + 1 | 0;
          $10 = $10 + -1 | 0;
          if ($10) {
           continue label$31
          }
          break label$31;
         };
        }
        $9 = ($9 - $2 | 0) + $6 | 0;
        $3 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
        $3 = ($3 | 0) == (3 | 0) ? 0 : $3;
        if (!($3 & 3 | 0)) {
         break label$28
        }
        if (($3 | 0) == (2 | 0)) {
         break label$27
        }
        $8 = 0;
        break label$26;
       }
       return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0 | 0;
      }
      $8 = $9;
      $9 = 0;
      break label$26;
     }
     $8 = ($9 + 1 | 0) >>> 1 | 0;
     $9 = $9 >>> 1 | 0;
    }
    $3 = -1;
    $10 = $0 + 4 | 0;
    $6 = $0 + 24 | 0;
    $7 = $0 + 28 | 0;
    label$32 : {
     label$33 : while (1) {
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= $9 >>> 0) {
       break label$32
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$7 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0)) {
       continue label$33
      }
      break label$33;
     };
     return 1 | 0;
    }
    $9 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = 1;
    $10 = $0 + 24 | 0;
    $6 = $0 + 28 | 0;
    if (FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$10 >> 2] | 0, $1, $2) | 0) {
     break label$1
    }
    $10 = HEAP32[$10 >> 2] | 0;
    $3 = -1;
    $6 = (HEAP32[$6 >> 2] | 0) + 16 | 0;
    label$34 : {
     label$35 : while (1) {
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 >= $8 >>> 0) {
       break label$34
      }
      if (!(FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($10, $9) | 0)) {
       continue label$35
      }
      break label$35;
     };
     return 1 | 0;
    }
    return 0 | 0;
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1, $2) | 0 | 0;
  }
  return $3 | 0;
 }
 
 function core__fmt__Formatter__pad_integral__hb936e47a334d7e83($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $9 = 0, $8 = 0, $10 = 0, $6 = 0, $7 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    $6 = HEAP32[$0 >> 2] | 0;
    $1 = $6 & 1 | 0;
    $7 = $1 ? 43 : 1114112;
    $8 = $1 + $5 | 0;
    break label$1;
   }
   $8 = $5 + 1 | 0;
   $6 = HEAP32[$0 >> 2] | 0;
   $7 = 45;
  }
  label$3 : {
   label$4 : {
    if ($6 & 4 | 0) {
     break label$4
    }
    $2 = 0;
    break label$3;
   }
   $9 = 0;
   label$5 : {
    if (!$3) {
     break label$5
    }
    $10 = $3;
    $1 = $2;
    label$6 : while (1) {
     $9 = $9 + (((HEAPU8[$1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) | 0;
     $1 = $1 + 1 | 0;
     $10 = $10 + -1 | 0;
     if ($10) {
      continue label$6
     }
     break label$6;
    };
   }
   $8 = ($8 + $3 | 0) - $9 | 0;
  }
  $1 = 1;
  label$7 : {
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              label$19 : {
               label$20 : {
                if ((HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
                 break label$20
                }
                $9 = HEAP32[($0 + 12 | 0) >> 2] | 0;
                if ($9 >>> 0 <= $8 >>> 0) {
                 break label$19
                }
                if ($6 & 8 | 0) {
                 break label$18
                }
                $1 = $9 - $8 | 0;
                $9 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
                $9 = ($9 | 0) == (3 | 0) ? 1 : $9;
                if (!($9 & 3 | 0)) {
                 break label$17
                }
                if (($9 | 0) == (2 | 0)) {
                 break label$16
                }
                $11 = 0;
                $9 = $1;
                break label$15;
               }
               if (core__fmt__Formatter__pad_integral__write_prefix__hfdcfd074be35c5e0($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
                break label$7
               }
               return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $4, $5) | 0 | 0;
              }
              if (core__fmt__Formatter__pad_integral__write_prefix__hfdcfd074be35c5e0($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
               break label$7
              }
              return FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $4, $5) | 0 | 0;
             }
             $1 = 1;
             HEAP8[($0 + 48 | 0) >> 0] = 1;
             HEAP32[($0 + 4 | 0) >> 2] = 48;
             if (core__fmt__Formatter__pad_integral__write_prefix__hfdcfd074be35c5e0($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
              break label$7
             }
             $1 = $9 - $8 | 0;
             $9 = HEAPU8[($0 + 48 | 0) >> 0] | 0;
             $9 = ($9 | 0) == (3 | 0) ? 1 : $9;
             if (!($9 & 3 | 0)) {
              break label$14
             }
             if (($9 | 0) == (2 | 0)) {
              break label$13
             }
             $8 = 0;
             $9 = $1;
             break label$12;
            }
            $9 = 0;
            $11 = $1;
            break label$15;
           }
           $9 = $1 >>> 1 | 0;
           $11 = ($1 + 1 | 0) >>> 1 | 0;
          }
          $1 = -1;
          $10 = $0 + 4 | 0;
          $8 = $0 + 24 | 0;
          $6 = $0 + 28 | 0;
          label$21 : {
           label$22 : while (1) {
            $1 = $1 + 1 | 0;
            if ($1 >>> 0 >= $9 >>> 0) {
             break label$21
            }
            if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$8 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0)) {
             continue label$22
            }
            break label$11;
           };
          }
          $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          $1 = 1;
          if (core__fmt__Formatter__pad_integral__write_prefix__hfdcfd074be35c5e0($0 | 0, $7 | 0, $2 | 0, $3 | 0) | 0) {
           break label$7
          }
          $9 = $0 + 24 | 0;
          $3 = $0 + 28 | 0;
          if (FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$9 >> 2] | 0, $4, $5) | 0) {
           break label$7
          }
          $0 = HEAP32[$9 >> 2] | 0;
          $9 = -1;
          $3 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
          label$23 : while (1) {
           $9 = $9 + 1 | 0;
           if ($9 >>> 0 >= $11 >>> 0) {
            break label$9
           }
           $1 = 1;
           if (!(FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0, $10) | 0)) {
            continue label$23
           }
           break label$7;
          };
         }
         $9 = 0;
         $8 = $1;
         break label$12;
        }
        $9 = $1 >>> 1 | 0;
        $8 = ($1 + 1 | 0) >>> 1 | 0;
       }
       $1 = -1;
       $10 = $0 + 4 | 0;
       $3 = $0 + 24 | 0;
       $2 = $0 + 28 | 0;
       label$24 : while (1) {
        $1 = $1 + 1 | 0;
        if ($1 >>> 0 >= $9 >>> 0) {
         break label$10
        }
        if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$2 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$3 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0)) {
         continue label$24
        }
        break label$24;
       };
      }
      $1 = 1;
      break label$7;
     }
     $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $1 = 1;
     $9 = $0 + 24 | 0;
     $3 = $0 + 28 | 0;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[$9 >> 2] | 0, $4, $5) | 0) {
      break label$7
     }
     $0 = HEAP32[$9 >> 2] | 0;
     $9 = -1;
     $3 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
     label$25 : while (1) {
      $9 = $9 + 1 | 0;
      if ($9 >>> 0 >= $8 >>> 0) {
       break label$8
      }
      $1 = 1;
      if (!(FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0, $10) | 0)) {
       continue label$25
      }
      break label$7;
     };
    }
    return 0 | 0;
   }
   return 0 | 0;
  }
  return $1 | 0;
 }
 
 function reed_solomon_erasure__matrix__Matrix__multiply__he7cd888fb638a99a($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, $3 = 0, $7 = 0, $9 = 0, $10 = 0, $5 = 0, $6 = 0, $18 = 0, $22 = 0, $11 = 0, $12 = 0, $4 = 0, $30 = 0, $13 = 0, $14 = 0, $15 = 0, $19 = 0, $21 = 0, $24 = 0, $16 = 0, $17 = 0, $20 = 0, $140 = 0, $151 = 0, $23 = 0, $25 = 0, $26 = 0, $212 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = global$0 - 2064 | 0;
  global$0 = $3;
  $4 = $1 + 4 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
      break label$3
     }
     $5 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     $6 = HEAP32[$1 >> 2] | 0;
     $7 = Math_imul($5, $6);
     if (($7 | 0) <= (-1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$7) {
         break label$6
        }
        $8 = 1;
        $9 = __rust_alloc_zeroed($7 | 0, 1 | 0) | 0;
        if (!$9) {
         break label$1
        }
        $10 = $7;
        if ($7 >>> 0 <= 1024 >>> 0) {
         break label$5
        }
        break label$4;
       }
       $9 = 1;
      }
      $8 = memcpy($3 | 0, $9 | 0, $7 | 0) | 0;
      HEAP8[(($8 + 2060 | 0) + 2 | 0) >> 0] = HEAPU8[($8 + 2 | 0) >> 0] | 0;
      HEAP16[($8 + 2060 | 0) >> 1] = HEAPU8[$8 >> 0] | 0 | ((HEAPU8[($8 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
      $11 = HEAPU8[($8 + 3 | 0) >> 0] | 0 | ((HEAPU8[($8 + 4 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8 + 5 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8 + 6 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $10 = HEAPU8[($8 + 7 | 0) >> 0] | 0 | ((HEAPU8[($8 + 8 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8 + 9 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8 + 10 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      memcpy($8 + 1040 | 0 | 0, $8 + 11 | 0 | 0, 1016 | 0) | 0;
      $8 = 0;
      label$7 : {
       if (!$7) {
        break label$7
       }
       __rust_dealloc($9 | 0, $7 | 0, 1 | 0);
      }
      $9 = $11;
     }
     HEAP8[($3 + 12 | 0) >> 0] = $8;
     $12 = $3 + 13 | 0;
     $30 = HEAPU16[($3 + 2060 | 0) >> 1] | 0;
     HEAP8[$12 >> 0] = $30;
     HEAP8[($12 + 1 | 0) >> 0] = $30 >>> 8 | 0;
     $13 = $3 + 20 | 0;
     HEAP32[$13 >> 2] = $10;
     $14 = $3 + 16 | 0;
     HEAP32[$14 >> 2] = $9;
     HEAP8[($3 + 15 | 0) >> 0] = HEAPU8[($3 + 2062 | 0) >> 0] | 0;
     HEAP32[($3 + 8 | 0) >> 2] = $7;
     HEAP32[($3 + 4 | 0) >> 2] = $5;
     HEAP32[$3 >> 2] = $6;
     memcpy($3 + 24 | 0 | 0, $3 + 1040 | 0 | 0, 1016 | 0) | 0;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         $15 = HEAP32[$1 >> 2] | 0;
         if (!$15) {
          break label$11
         }
         $16 = $2 + 13 | 0;
         $17 = $1 + 13 | 0;
         $18 = 0;
         $19 = $2 + 4 | 0;
         $20 = $3 + 8 | 0;
         label$12 : while (1) {
          label$13 : {
           $21 = HEAP32[$19 >> 2] | 0;
           if (!$21) {
            break label$13
           }
           $22 = 0;
           label$14 : while (1) {
            $9 = 0;
            label$15 : {
             $5 = HEAP32[$4 >> 2] | 0;
             if (!$5) {
              break label$15
             }
             $7 = HEAP32[($2 + 8 | 0) >> 2] | 0;
             $140 = $7;
             $7 = $7 >>> 0 > 1024 >>> 0;
             $6 = (wasm2js_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $140, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
             $8 = HEAP32[($1 + 8 | 0) >> 2] | 0;
             $151 = $8;
             $8 = $8 >>> 0 > 1024 >>> 0;
             $11 = (wasm2js_i32$0 = HEAP32[($1 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $151, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
             $23 = (wasm2js_i32$0 = HEAP32[($2 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $16, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
             $24 = Math_imul($18, $5);
             $25 = (wasm2js_i32$0 = HEAP32[($1 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $17, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $24 | 0;
             $26 = HEAP32[$19 >> 2] | 0;
             $9 = 0;
             $7 = $22;
             $8 = 0;
             label$16 : while (1) {
              $10 = $24 + $8 | 0;
              if ($11 >>> 0 <= $10 >>> 0) {
               break label$10
              }
              if ($6 >>> 0 <= $7 >>> 0) {
               break label$9
              }
              $9 = (HEAPU8[(((HEAPU8[($25 + $8 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[($23 + $7 | 0) >> 0] | 0) | 0) + 1050806 | 0) >> 0] | 0) ^ $9 | 0;
              $7 = $7 + $26 | 0;
              $10 = $8 + 1 | 0;
              $8 = $10;
              if ($8 >>> 0 < $5 >>> 0) {
               continue label$16
              }
              break label$16;
             };
            }
            $7 = HEAP32[$20 >> 2] | 0;
            $212 = $7;
            $7 = $7 >>> 0 > 1024 >>> 0;
            $10 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $212, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
            $8 = Math_imul(HEAP32[($3 + 4 | 0) >> 2] | 0, $18) + $22 | 0;
            if ($10 >>> 0 <= $8 >>> 0) {
             break label$8
            }
            HEAP8[((wasm2js_i32$0 = HEAP32[$14 >> 2] | 0, wasm2js_i32$1 = $12, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $8 | 0) >> 0] = $9;
            $22 = $22 + 1 | 0;
            if ($22 >>> 0 < $21 >>> 0) {
             continue label$14
            }
            break label$14;
           };
          }
          $18 = $18 + 1 | 0;
          if ($18 >>> 0 < $15 >>> 0) {
           continue label$12
          }
          break label$12;
         };
        }
        memcpy($0 | 0, $3 | 0, 1040 | 0) | 0;
        global$0 = $3 + 2064 | 0;
        return;
       }
       core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $10 | 0, $11 | 0);
       wasm2js_trap();
      }
      core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, $7 | 0, $6 | 0);
      wasm2js_trap();
     }
     core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $8 | 0, $10 | 0);
     wasm2js_trap();
    }
    HEAP32[($3 + 1052 | 0) >> 2] = 24;
    HEAP32[($3 + 20 | 0) >> 2] = 2;
    HEAP32[($3 + 1048 | 0) >> 2] = $2;
    HEAP32[($3 + 1044 | 0) >> 2] = 24;
    HEAP32[($3 + 1040 | 0) >> 2] = $4;
    HEAP32[($3 + 4 | 0) >> 2] = 2;
    HEAP32[($3 + 8 | 0) >> 2] = 0;
    HEAP32[$3 >> 2] = 1120948;
    HEAP32[($3 + 16 | 0) >> 2] = $3 + 1040 | 0;
    std__panicking__begin_panic_fmt__hf8f8362495d2ae80($3 | 0, 1120964 | 0);
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($7 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function reconstruct($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, i64toi32_i32$4 = 0, $8 = 0, i64toi32_i32$2 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $17 = 0, $10 = 0, $18 = 0, $10$hi = 0;
  $6 = global$0 - 2176 | 0;
  global$0 = $6;
  reed_solomon_erasure__ReedSolomon__new__hddc7e003b2284e9d($6 + 1088 | 0 | 0, $2 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           if ((HEAPU8[($6 + 1088 | 0) >> 0] | 0 | 0) == (1 | 0)) {
            break label$9
           }
           $7 = memcpy($6 | 0, $6 + 1088 | 0 | 4 | 0 | 0, 1084 | 0) | 0;
           $2 = $3 + $2 | 0;
           if (!$2) {
            break label$8
           }
           $6 = ($1 >>> 0) / ($2 >>> 0) | 0;
           if ($2 >>> 0 > $1 >>> 0) {
            break label$7
           }
           $8 = ($1 >>> 0) / ($6 >>> 0) | 0;
           $2 = Math_imul($8, $6);
           if ($1 >>> 0 < ($1 - $2 | 0) >>> 0) {
            break label$6
           }
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                if ($6 >>> 0 <= $2 >>> 0) {
                 break label$14
                }
                $8 = 0;
                $9 = 4;
                $3 = 0;
                if ($5) {
                 break label$13
                }
                break label$12;
               }
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $8;
               i64toi32_i32$1 = 0;
               i64toi32_i32$3 = 3;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
                $17 = 0;
               } else {
                i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
                $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
               }
               $10 = $17;
               $10$hi = i64toi32_i32$1;
               i64toi32_i32$0 = $10;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $18 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               if ($18) {
                break label$10
               }
               i64toi32_i32$2 = $10$hi;
               $1 = $10;
               if (($1 | 0) < (0 | 0)) {
                break label$10
               }
               $9 = __rust_alloc($1 | 0, 4 | 0) | 0;
               if (!$9) {
                break label$4
               }
               $3 = 0;
               $1 = $9;
               label$15 : while (1) {
                HEAP32[$1 >> 2] = $0;
                HEAP32[($1 + 4 | 0) >> 2] = $6;
                $1 = $1 + 8 | 0;
                $3 = $3 + 1 | 0;
                $0 = $0 + $6 | 0;
                $2 = $2 - $6 | 0;
                if ($2 >>> 0 >= $6 >>> 0) {
                 continue label$15
                }
                break label$15;
               };
               if (!$5) {
                break label$12
               }
              }
              if (($5 | 0) < (0 | 0)) {
               break label$10
              }
              $2 = __rust_alloc($5 | 0, 1 | 0) | 0;
              if (!$2) {
               break label$5
              }
              if (!$5) {
               break label$11
              }
              break label$3;
             }
             $2 = 1;
             if ($5) {
              break label$3
             }
            }
            $6 = reed_solomon_erasure__ReedSolomon__reconstruct_data__h75b192993bad1e0e($7 | 0, $9 | 0, $3 | 0, $2 | 0, 0 | 0) | 0;
            if ($5) {
             break label$2
            }
            break label$1;
           }
           alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa();
           wasm2js_trap();
          }
          core__result__unwrap_failed__hd6ba21361a7c9b4e(1048576 | 0, 43 | 0, HEAPU8[($6 + 1089 | 0) >> 0] | 0 | 0);
          wasm2js_trap();
         }
         core__panicking__panic__h3c512c7c2bb6da25(1120520 | 0);
         wasm2js_trap();
        }
        core__panicking__panic__h3c512c7c2bb6da25(1120472 | 0);
        wasm2js_trap();
       }
       core__panicking__panic__h3c512c7c2bb6da25(1120448 | 0);
       wasm2js_trap();
      }
      alloc__alloc__handle_alloc_error__h2bf444f047049b0e($5 | 0, 1 | 0);
      wasm2js_trap();
     }
     alloc__alloc__handle_alloc_error__h2bf444f047049b0e($1 | 0, 4 | 0);
     wasm2js_trap();
    }
    $0 = $5;
    $6 = $2;
    $1 = $4;
    label$16 : while (1) {
     HEAP8[$6 >> 0] = (HEAPU8[$1 >> 0] | 0 | 0) == (1 | 0);
     $6 = $6 + 1 | 0;
     $1 = $1 + 1 | 0;
     $0 = $0 + -1 | 0;
     if ($0) {
      continue label$16
     }
     break label$16;
    };
    $6 = reed_solomon_erasure__ReedSolomon__reconstruct_data__h75b192993bad1e0e($7 | 0, $9 | 0, $3 | 0, $2 | 0, $5 | 0) | 0;
    if (!$5) {
     break label$1
    }
   }
   __rust_dealloc($2 | 0, $5 | 0, 1 | 0);
  }
  label$17 : {
   if (!$8) {
    break label$17
   }
   __rust_dealloc($9 | 0, $8 << 3 | 0 | 0, 4 | 0);
  }
  $6 = $6 & 255 | 0;
  label$18 : {
   $1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
   if ($1 >>> 0 < 1025 >>> 0) {
    break label$18
   }
   __rust_dealloc(HEAP32[($7 + 28 | 0) >> 2] | 0 | 0, $1 | 0, 1 | 0);
  }
  $1 = $6 ^ 8 | 0;
  __rust_dealloc(HEAP32[($7 + 1052 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0);
  label$19 : {
   $0 = $7 + 1060 | 0;
   $6 = HEAP32[$0 >> 2] | 0;
   if (!$6) {
    break label$19
   }
   $2 = HEAP32[$6 >> 2] | 0;
   HEAP32[$6 >> 2] = $2 + -1 | 0;
   if (($2 | 0) != (1 | 0)) {
    break label$19
   }
   $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($0 | 0);
  }
  $8 = $1 << 2 | 0;
  label$20 : {
   $1 = HEAP32[($7 + 1072 | 0) >> 2] | 0;
   if (!$1) {
    break label$20
   }
   $6 = HEAP32[($7 + 1064 | 0) >> 2] | 0;
   $1 = $1 << 4 | 0;
   label$21 : while (1) {
    label$22 : {
     $0 = $6 + 4 | 0;
     if (!(HEAP32[$0 >> 2] | 0)) {
      break label$22
     }
     label$23 : {
      $2 = HEAP32[$6 >> 2] | 0;
      if (!$2) {
       break label$23
      }
      $3 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $3 + -1 | 0;
      if (($3 | 0) != (1 | 0)) {
       break label$23
      }
      $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($6 | 0);
     }
     core__ptr__real_drop_in_place__h85182afe7313c69c($0 | 0);
    }
    $6 = $6 + 16 | 0;
    $1 = $1 + -16 | 0;
    if ($1) {
     continue label$21
    }
    break label$21;
   };
  }
  $6 = $8 + 1048748 | 0;
  label$24 : {
   $1 = HEAP32[($7 + 1068 | 0) >> 2] | 0;
   if (!$1) {
    break label$24
   }
   __rust_dealloc(HEAP32[($7 + 1064 | 0) >> 2] | 0 | 0, $1 << 4 | 0 | 0, 4 | 0);
  }
  $6 = HEAP32[$6 >> 2] | 0;
  label$25 : {
   if (!$5) {
    break label$25
   }
   __rust_dealloc($4 | 0, $5 | 0, 1 | 0);
  }
  global$0 = $7 + 2176 | 0;
  return $6 | 0;
 }
 
 function reed_solomon_erasure__ReedSolomon__code_single_slice__h4d085708e8812f71($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $16 = 0, $15 = 0, $19 = 0, $9 = 0, $17 = 0, $20 = 0, $14 = 0, $18 = 0, $8 = 0, $12 = 0, $13 = 0, $23 = 0, $24 = 0, $10 = 0, $11 = 0, $21 = 0, $22 = 0;
  label$1 : {
   $7 = $7 << 3 | 0;
   if (!$7) {
    break label$1
   }
   $8 = $6 + $7 | 0;
   label$2 : {
    label$3 : {
     if (!$3) {
      break label$3
     }
     $9 = 0;
     $10 = 8;
     $11 = 3;
     $12 = $0 + 1080 | 0;
     $13 = 1;
     $7 = 0;
     break label$2;
    }
    $9 = 0;
    $21 = 8;
    $22 = 3;
    $23 = $0 + 1080 | 0;
    $24 = 1;
    $7 = 1;
   }
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                switch ($7 | 0) {
                case 0:
                 if ($9 >>> 0 >= $2 >>> 0) {
                  break label$11
                 }
                 $7 = $1 + ($9 << $11 | 0) | 0;
                 $0 = HEAP32[($7 + 4 | 0) >> 2] | 0;
                 if ($0 >>> 0 <= $3 >>> 0) {
                  break label$9
                 }
                 $14 = HEAPU8[((HEAP32[$7 >> 2] | 0) + $3 | 0) >> 0] | 0;
                 label$18 : {
                  label$19 : {
                   $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
                   $15 = HEAP32[$12 >> 2] | 0;
                   $0 = $7 >>> 0 > $15 >>> 0;
                   if (!$0) {
                    break label$19
                   }
                   if (!$15) {
                    break label$8
                   }
                   $16 = $0 ? $15 : $7;
                   $0 = $7 - $16 | 0;
                   $17 = HEAP32[$6 >> 2] | 0;
                   $18 = $17 + $16 | 0;
                   $19 = 0;
                   $20 = 1;
                   $7 = $16;
                   label$20 : while (1) {
                    if ($16 >>> 0 > $5 >>> 0) {
                     break label$15
                    }
                    reed_solomon_erasure__galois__mul_slice_xor__h07edddfec5e22900($14 | 0, $4 + $19 | 0 | 0, $7 | 0, $17 | 0, $7 | 0);
                    if (!$0) {
                     break label$18
                    }
                    $19 = Math_imul(HEAP32[$12 >> 2] | 0, $20);
                    $20 = $20 + $13 | 0;
                    $7 = $0 >>> 0 > $15 >>> 0 ? $15 : $0;
                    $0 = $0 - $7 | 0;
                    $17 = $18;
                    $18 = $17 + $7 | 0;
                    $16 = $19 + $7 | 0;
                    if ($16 >>> 0 >= $19 >>> 0) {
                     continue label$20
                    }
                    break label$14;
                   };
                  }
                  reed_solomon_erasure__galois__mul_slice_xor__h07edddfec5e22900($14 | 0, $4 | 0, $5 | 0, HEAP32[$6 >> 2] | 0 | 0, $7 | 0);
                 }
                 $9 = $9 + $13 | 0;
                 $6 = $6 + $10 | 0;
                 if (($6 | 0) != ($8 | 0)) {
                  break label$6
                 }
                 break label$1;
                default:
                 break label$16;
                };
               }
               if ($9 >>> 0 >= $2 >>> 0) {
                break label$11
               }
               $7 = $1 + ($9 << $22 | 0) | 0;
               if (!(HEAP32[($7 + 4 | 0) >> 2] | 0)) {
                break label$10
               }
               $14 = HEAPU8[(HEAP32[$7 >> 2] | 0) >> 0] | 0;
               label$21 : {
                label$22 : {
                 $7 = HEAP32[($6 + 4 | 0) >> 2] | 0;
                 $16 = HEAP32[$23 >> 2] | 0;
                 if ($7 >>> 0 <= $16 >>> 0) {
                  break label$22
                 }
                 if (!$16) {
                  break label$7
                 }
                 $15 = $7 >>> 0 > $16 >>> 0 ? $16 : $7;
                 $0 = $7 - $15 | 0;
                 $17 = HEAP32[$6 >> 2] | 0;
                 $18 = $17 + $15 | 0;
                 $19 = 0;
                 $20 = 1;
                 $7 = $15;
                 label$23 : while (1) {
                  if ($15 >>> 0 > $5 >>> 0) {
                   break label$13
                  }
                  reed_solomon_erasure__galois__mul_slice__hd47fe15bb8fd038e($14 | 0, $4 + $19 | 0 | 0, $7 | 0, $17 | 0, $7 | 0);
                  if (!$0) {
                   break label$21
                  }
                  $19 = Math_imul(HEAP32[$23 >> 2] | 0, $20);
                  $20 = $20 + $24 | 0;
                  $7 = $0 >>> 0 > $16 >>> 0 ? $16 : $0;
                  $0 = $0 - $7 | 0;
                  $17 = $18;
                  $18 = $17 + $7 | 0;
                  $15 = $19 + $7 | 0;
                  if ($15 >>> 0 >= $19 >>> 0) {
                   continue label$23
                  }
                  break label$12;
                 };
                }
                reed_solomon_erasure__galois__mul_slice__hd47fe15bb8fd038e($14 | 0, $4 | 0, $5 | 0, HEAP32[$6 >> 2] | 0 | 0, $7 | 0);
               }
               $9 = $9 + $24 | 0;
               $6 = $6 + $21 | 0;
               if (($6 | 0) != ($8 | 0)) {
                break label$5
               }
               break label$1;
              }
              core__slice__slice_index_len_fail__hf626520261f048fe($16 | 0, $5 | 0);
              wasm2js_trap();
             }
             core__slice__slice_index_order_fail__hdebcacf34982bb52($19 | 0, $16 | 0);
             wasm2js_trap();
            }
            core__slice__slice_index_len_fail__hf626520261f048fe($15 | 0, $5 | 0);
            wasm2js_trap();
           }
           core__slice__slice_index_order_fail__hdebcacf34982bb52($19 | 0, $15 | 0);
           wasm2js_trap();
          }
          core__panicking__panic_bounds_check__h273e49a380d01fb7(1120752 | 0, $9 | 0, $2 | 0);
          wasm2js_trap();
         }
         $0 = 0;
        }
        core__panicking__panic_bounds_check__h273e49a380d01fb7(1120752 | 0, $3 | 0, $0 | 0);
        wasm2js_trap();
       }
       core__panicking__panic__h3c512c7c2bb6da25(1120656 | 0);
       wasm2js_trap();
      }
      core__panicking__panic__h3c512c7c2bb6da25(1120656 | 0);
      wasm2js_trap();
     }
     $7 = 0;
     continue label$4;
    }
    $7 = 1;
    continue label$4;
   };
  }
 }
 
 function reed_solomon_erasure__matrix__Matrix__vandermonde__h4ebffb6c129618c3($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0, $8 = 0, $7 = 0, $9 = 0, $14 = 0, $15 = 0, $19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $111 = 0, $131 = 0, $166 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = global$0 - 2064 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = Math_imul($2, $1);
    if (($4 | 0) <= (-1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 1;
       $6 = __rust_alloc_zeroed($4 | 0, 1 | 0) | 0;
       if (!$6) {
        break label$1
       }
       $7 = $4;
       if ($4 >>> 0 <= 1024 >>> 0) {
        break label$4
       }
       break label$3;
      }
      $6 = 1;
     }
     $5 = memcpy($3 | 0, $6 | 0, $4 | 0) | 0;
     HEAP8[(($5 + 2060 | 0) + 2 | 0) >> 0] = HEAPU8[($5 + 2 | 0) >> 0] | 0;
     HEAP16[($5 + 2060 | 0) >> 1] = HEAPU8[$5 >> 0] | 0 | ((HEAPU8[($5 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     $8 = HEAPU8[($5 + 3 | 0) >> 0] | 0 | ((HEAPU8[($5 + 4 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 5 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 6 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $7 = HEAPU8[($5 + 7 | 0) >> 0] | 0 | ((HEAPU8[($5 + 8 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 9 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 10 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     memcpy($5 + 1044 | 0 | 0, $5 + 11 | 0 | 0, 1016 | 0) | 0;
     $5 = 0;
     label$6 : {
      if (!$4) {
       break label$6
      }
      __rust_dealloc($6 | 0, $4 | 0, 1 | 0);
     }
     $6 = $8;
    }
    HEAP8[($3 + 12 | 0) >> 0] = $5;
    $9 = $3 + 13 | 0;
    $19 = HEAPU16[($3 + 2060 | 0) >> 1] | 0;
    HEAP8[$9 >> 0] = $19;
    HEAP8[($9 + 1 | 0) >> 0] = $19 >>> 8 | 0;
    HEAP32[($3 + 20 | 0) >> 2] = $7;
    HEAP32[($3 + 16 | 0) >> 2] = $6;
    HEAP8[($3 + 15 | 0) >> 0] = HEAPU8[($3 + 2062 | 0) >> 0] | 0;
    HEAP32[($3 + 8 | 0) >> 2] = $4;
    HEAP32[($3 + 4 | 0) >> 2] = $2;
    HEAP32[$3 >> 2] = $1;
    memcpy($3 + 24 | 0 | 0, $3 + 1044 | 0 | 0, 1016 | 0) | 0;
    label$7 : {
     label$8 : {
      if (!$1) {
       break label$8
      }
      if (!$2) {
       break label$8
      }
      $8 = 0;
      $10 = $3 + 8 | 0;
      $11 = $3 + 20 | 0;
      $12 = $3 + 16 | 0;
      label$9 : while (1) {
       label$10 : {
        label$11 : {
         $13 = $8 & 255 | 0;
         if (!$13) {
          break label$11
         }
         $4 = 0;
         label$12 : while (1) {
          $5 = 1;
          label$13 : {
           if (!$4) {
            break label$13
           }
           $5 = Math_imul($4, HEAPU8[($13 + 1050040 | 0) >> 0] | 0);
           $111 = $5;
           $5 = ($5 + (($5 >>> 0 < 254 >>> 0 ? $5 : 254) ^ -1 | 0) | 0) + 255 | 0;
           $5 = HEAPU8[((($111 - $5 | 0) + (($5 >>> 0) % (255 >>> 0) | 0) | 0) + 1050296 | 0) >> 0] | 0;
          }
          $6 = HEAP32[$10 >> 2] | 0;
          $131 = $6;
          $6 = $6 >>> 0 > 1024 >>> 0;
          $14 = (wasm2js_i32$0 = HEAP32[$11 >> 2] | 0, wasm2js_i32$1 = $131, wasm2js_i32$2 = $6, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $7 = Math_imul($8, HEAP32[($3 + 4 | 0) >> 2] | 0);
          $15 = $4 + $7 | 0;
          if ($14 >>> 0 <= $15 >>> 0) {
           break label$7
          }
          HEAP8[((wasm2js_i32$0 = HEAP32[$12 >> 2] | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = $6, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($4 + $7 | 0) | 0) >> 0] = $5;
          $5 = $4 + 1 | 0;
          $4 = $5;
          if ($5 >>> 0 < $2 >>> 0) {
           continue label$12
          }
          break label$10;
         };
        }
        $4 = 0;
        label$14 : while (1) {
         $5 = HEAP32[$10 >> 2] | 0;
         $166 = $5;
         $5 = $5 >>> 0 > 1024 >>> 0;
         $14 = (wasm2js_i32$0 = HEAP32[$11 >> 2] | 0, wasm2js_i32$1 = $166, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
         $6 = Math_imul($8, HEAP32[($3 + 4 | 0) >> 2] | 0);
         $15 = $4 + $6 | 0;
         if ($14 >>> 0 <= $15 >>> 0) {
          break label$7
         }
         HEAP8[((wasm2js_i32$0 = HEAP32[$12 >> 2] | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + ($4 + $6 | 0) | 0) >> 0] = !$4;
         $5 = $4 + 1 | 0;
         $4 = $5;
         if ($5 >>> 0 < $2 >>> 0) {
          continue label$14
         }
         break label$14;
        };
       }
       $8 = $8 + 1 | 0;
       if ($8 >>> 0 < $1 >>> 0) {
        continue label$9
       }
       break label$9;
      };
     }
     memcpy($0 | 0, $3 | 0, 1040 | 0) | 0;
     global$0 = $3 + 2064 | 0;
     return;
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $15 | 0, $14 | 0);
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($4 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function $char_20as_20core__fmt__Debug___fmt__h8908b4afa9a885e3($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $2 = 0, $7 = 0, $7$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $4 = 0, $3 = 0, $18 = 0, $5 = 0, $111 = 0, $111$hi = 0, $113 = 0, $113$hi = 0;
  $2 = 1;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 39) | 0) {
    break label$1
   }
   $2 = 2;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $0 = HEAP32[$0 >> 2] | 0;
             $3 = $0 + -9 | 0;
             if ($3 >>> 0 > 30 >>> 0) {
              break label$11
             }
             $4 = 116;
             label$12 : {
              switch ($3 | 0) {
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 27:
              case 28:
              case 29:
               break label$10;
              case 1:
               break label$12;
              case 25:
              case 30:
               break label$6;
              case 4:
               break label$9;
              default:
               break label$2;
              };
             }
             $4 = 110;
             break label$8;
            }
            if (($0 | 0) == (92 | 0)) {
             break label$6
            }
           }
           if (!(core__unicode__bool_trie__BoolTrie__lookup__h0292b62b164623f4(1121696 | 0, $0 | 0) | 0)) {
            break label$7
           }
           i64toi32_i32$0 = 0;
           i64toi32_i32$2 = (Math_clz32($0 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
           i64toi32_i32$1 = 5;
           i64toi32_i32$3 = 0;
           i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
           $7 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
           $7$hi = i64toi32_i32$1;
           break label$4;
          }
          $4 = 114;
         }
         break label$2;
        }
        label$13 : {
         label$14 : {
          if ($0 >>> 0 > 65535 >>> 0) {
           break label$14
          }
          if (!(core__unicode__printable__check__h1a95ff94fcb738db($0 | 0, 1117600 | 0, 40 | 0, 1117680 | 0, 303 | 0, 1117983 | 0, 316 | 0) | 0)) {
           break label$5
          }
          break label$13;
         }
         label$15 : {
          if ($0 >>> 0 > 131071 >>> 0) {
           break label$15
          }
          if (core__unicode__printable__check__h1a95ff94fcb738db($0 | 0, 1118299 | 0, 33 | 0, 1118365 | 0, 158 | 0, 1118523 | 0, 381 | 0) | 0) {
           break label$13
          }
          break label$5;
         }
         if ($0 >>> 0 > 917999 >>> 0) {
          break label$5
         }
         if (($0 + -195102 | 0) >>> 0 < 722658 >>> 0) {
          break label$5
         }
         if (($0 + -191457 | 0) >>> 0 < 3103 >>> 0) {
          break label$5
         }
         if (($0 + -183970 | 0) >>> 0 < 14 >>> 0) {
          break label$5
         }
         if (($0 & 2097150 | 0 | 0) == (178206 | 0)) {
          break label$5
         }
         if (($0 + -173783 | 0) >>> 0 < 41 >>> 0) {
          break label$5
         }
         if (($0 + -177973 | 0) >>> 0 <= 10 >>> 0) {
          break label$5
         }
        }
        $2 = 1;
       }
       break label$3;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = (Math_clz32($0 | 1 | 0) >>> 2 | 0) ^ 7 | 0;
      i64toi32_i32$2 = 5;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
     }
     $2 = 3;
    }
    $4 = $0;
   }
   $3 = $1 + 24 | 0;
   $5 = $1 + 28 | 0;
   label$16 : {
    label$17 : while (1) {
     label$18 : {
      label$19 : {
       label$20 : {
        label$21 : {
         label$22 : {
          label$23 : {
           label$24 : {
            label$25 : {
             label$26 : {
              if (($2 | 0) == (1 | 0)) {
               break label$26
              }
              $0 = 92;
              if (($2 | 0) == (2 | 0)) {
               break label$25
              }
              if (($2 | 0) != (3 | 0)) {
               break label$16
              }
              i64toi32_i32$2 = $7$hi;
              i64toi32_i32$1 = $7;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$0 = 0;
               $18 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
               $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
              }
              $2 = ($18 & 255 | 0) + -1 | 0;
              if ($2 >>> 0 > 4 >>> 0) {
               break label$16
              }
              label$27 : {
               switch ($2 | 0) {
               case 4:
                break label$21;
               case 3:
                break label$22;
               case 2:
                break label$23;
               case 1:
                break label$24;
               default:
                break label$27;
               };
              }
              i64toi32_i32$0 = $7$hi;
              i64toi32_i32$2 = $7;
              i64toi32_i32$1 = -256;
              i64toi32_i32$3 = -1;
              i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
              $7 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
              $7$hi = i64toi32_i32$1;
              $0 = 125;
              break label$19;
             }
             $2 = 0;
             $0 = $4;
             break label$18;
            }
            $2 = 1;
            break label$18;
           }
           i64toi32_i32$1 = $7$hi;
           $2 = ($4 >>> (($7 << 2 | 0) & 28 | 0) | 0) & 15 | 0;
           $0 = $2 >>> 0 < 10 >>> 0 ? $2 | 48 | 0 : $2 + 87 | 0;
           if (!$7) {
            break label$20
           }
           i64toi32_i32$1 = $7$hi;
           i64toi32_i32$0 = $7;
           i64toi32_i32$2 = -1;
           i64toi32_i32$3 = -1;
           i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           i64toi32_i32$1 = i64toi32_i32$4;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = -1;
           i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
           $111 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
           $111$hi = i64toi32_i32$0;
           i64toi32_i32$0 = $7$hi;
           i64toi32_i32$5 = $7;
           i64toi32_i32$1 = -1;
           i64toi32_i32$3 = 0;
           i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
           $113 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
           $113$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $111$hi;
           i64toi32_i32$0 = $111;
           i64toi32_i32$5 = $113$hi;
           i64toi32_i32$3 = $113;
           i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
           $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
           $7$hi = i64toi32_i32$5;
           break label$19;
          }
          i64toi32_i32$5 = $7$hi;
          i64toi32_i32$1 = $7;
          i64toi32_i32$0 = -256;
          i64toi32_i32$3 = -1;
          i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
          i64toi32_i32$1 = 2;
          i64toi32_i32$3 = 0;
          i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
          $7 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
          $7$hi = i64toi32_i32$1;
          $0 = 123;
          break label$19;
         }
         i64toi32_i32$1 = $7$hi;
         i64toi32_i32$0 = $7;
         i64toi32_i32$5 = -256;
         i64toi32_i32$3 = -1;
         i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
         i64toi32_i32$0 = 3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
         $7 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
         $7$hi = i64toi32_i32$0;
         $0 = 117;
         break label$19;
        }
        i64toi32_i32$0 = $7$hi;
        i64toi32_i32$5 = $7;
        i64toi32_i32$1 = -256;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        i64toi32_i32$5 = 4;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
        $7 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        $7$hi = i64toi32_i32$5;
        break label$19;
       }
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$1 = $7;
       i64toi32_i32$0 = -256;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
       $7 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
       $7$hi = i64toi32_i32$1;
      }
      $2 = 3;
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$5 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[$3 >> 2] | 0, $0) | 0)) {
      continue label$17
     }
     break label$17;
    };
    return 1 | 0;
   }
   $2 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 39) | 0;
  }
  return $2 | 0;
 }
 
 function wee_alloc__alloc_first_fit__h9a598dd039cbf670($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $10 = 0, $12 = 0, $11 = 0, $7 = 0, $6 = 0, $8 = 0, $9 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5 = HEAP32[$2 >> 2] | 0;
     if (!$5) {
      break label$3
     }
     $6 = $1 + -1 | 0;
     $7 = $0 << 2 | 0;
     $8 = 0 - $1 | 0;
     $9 = $4 + 16 | 0;
     label$4 : while (1) {
      $4 = $5 + 8 | 0;
      label$5 : {
       $10 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       if (!($10 & 1 | 0)) {
        break label$5
       }
       label$6 : while (1) {
        HEAP32[$4 >> 2] = $10 & -2 | 0;
        label$7 : {
         label$8 : {
          label$9 : {
           $10 = HEAP32[($5 + 4 | 0) >> 2] | 0;
           $4 = $10 & -4 | 0;
           if ($4) {
            break label$9
           }
           $1 = 0;
           $11 = HEAP32[$5 >> 2] | 0;
           $12 = $11 & -4 | 0;
           if ($12) {
            break label$8
           }
           break label$7;
          }
          $1 = (HEAPU8[$4 >> 0] | 0) & 1 | 0 ? 0 : $4;
          $11 = HEAP32[$5 >> 2] | 0;
          $12 = $11 & -4 | 0;
          if (!$12) {
           break label$7
          }
         }
         if ($11 & 2 | 0) {
          break label$7
         }
         HEAP32[($12 + 4 | 0) >> 2] = (HEAP32[($12 + 4 | 0) >> 2] | 0) & 3 | 0 | $4 | 0;
         $10 = HEAP32[($5 + 4 | 0) >> 2] | 0;
         $4 = $10 & -4 | 0;
        }
        label$10 : {
         if (!$4) {
          break label$10
         }
         HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) & 3 | 0 | ((HEAP32[$5 >> 2] | 0) & -4 | 0) | 0;
         $10 = HEAP32[($5 + 4 | 0) >> 2] | 0;
        }
        HEAP32[($5 + 4 | 0) >> 2] = $10 & 3 | 0;
        $4 = HEAP32[$5 >> 2] | 0;
        HEAP32[$5 >> 2] = $4 & 3 | 0;
        label$11 : {
         if (!($4 & 2 | 0)) {
          break label$11
         }
         HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 2 | 0;
        }
        HEAP32[$2 >> 2] = $1;
        $4 = $1 + 8 | 0;
        $5 = $1;
        $10 = HEAP32[($5 + 8 | 0) >> 2] | 0;
        if ($10 & 1 | 0) {
         continue label$6
        }
        break label$6;
       };
       $5 = $1;
      }
      label$12 : {
       $1 = (HEAP32[$5 >> 2] | 0) & -4 | 0;
       if (($1 - $4 | 0) >>> 0 < $7 >>> 0) {
        break label$12
       }
       label$13 : {
        $1 = ($1 - $7 | 0) & $8 | 0;
        if ((($4 + ((FUNCTION_TABLE[HEAP32[$9 >> 2] | 0 | 0]($3, $0) | 0) << 2 | 0) | 0) + 8 | 0) >>> 0 <= $1 >>> 0) {
         break label$13
        }
        if ($6 & $4 | 0) {
         break label$12
        }
        break label$2;
       }
       HEAP32[$1 >> 2] = 0;
       $1 = $1 + -8 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[($1 + 4 | 0) >> 2] = 0;
       HEAP32[$1 >> 2] = (HEAP32[$5 >> 2] | 0) & -4 | 0;
       label$14 : {
        $12 = HEAP32[$5 >> 2] | 0;
        $10 = $12 & -4 | 0;
        if (!$10) {
         break label$14
        }
        if ($12 & 2 | 0) {
         break label$14
        }
        HEAP32[($10 + 4 | 0) >> 2] = (HEAP32[($10 + 4 | 0) >> 2] | 0) & 3 | 0 | $1 | 0;
       }
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) & 3 | 0 | $5 | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) & 3 | 0 | $1 | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) & -2 | 0;
       label$15 : {
        $4 = HEAP32[$5 >> 2] | 0;
        if (!($4 & 2 | 0)) {
         break label$15
        }
        HEAP32[$5 >> 2] = $4 & -3 | 0;
        HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 2 | 0;
       }
       HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 0 | 1 | 0;
       if ($1) {
        break label$1
       }
      }
      $5 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      HEAP32[$2 >> 2] = $5;
      if ($5) {
       continue label$4
      }
      break label$4;
     };
    }
    return 0 | 0;
   }
   HEAP32[$2 >> 2] = (HEAP32[$4 >> 2] | 0) & -4 | 0;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 0 | 1 | 0;
   return $5 + 8 | 0 | 0;
  }
  return $1 + 8 | 0 | 0;
 }
 
 function encode($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$4 = 0, $5 = 0, $6 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $7 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $15 = 0, $8 = 0, $16 = 0, $8$hi = 0;
  $4 = global$0 - 2176 | 0;
  global$0 = $4;
  reed_solomon_erasure__ReedSolomon__new__hddc7e003b2284e9d($4 + 1088 | 0 | 0, $2 | 0, $3 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ((HEAPU8[($4 + 1088 | 0) >> 0] | 0 | 0) == (1 | 0)) {
         break label$6
        }
        $5 = memcpy($4 | 0, $4 + 1088 | 0 | 4 | 0 | 0, 1084 | 0) | 0;
        $2 = $3 + $2 | 0;
        if (!$2) {
         break label$5
        }
        $4 = ($1 >>> 0) / ($2 >>> 0) | 0;
        if ($2 >>> 0 > $1 >>> 0) {
         break label$4
        }
        $6 = ($1 >>> 0) / ($4 >>> 0) | 0;
        $2 = Math_imul($6, $4);
        if ($1 >>> 0 < ($1 - $2 | 0) >>> 0) {
         break label$3
        }
        label$7 : {
         label$8 : {
          if ($4 >>> 0 <= $2 >>> 0) {
           break label$8
          }
          $6 = 0;
          $7 = 4;
          $3 = 0;
          break label$7;
         }
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = $6;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 3;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          $15 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
          $15 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         }
         $8 = $15;
         $8$hi = i64toi32_i32$1;
         i64toi32_i32$0 = $8;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 32;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = 0;
          $16 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
          $16 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
         }
         if ($16) {
          break label$2
         }
         i64toi32_i32$2 = $8$hi;
         $1 = $8;
         if (($1 | 0) < (0 | 0)) {
          break label$2
         }
         $7 = __rust_alloc($1 | 0, 4 | 0) | 0;
         if (!$7) {
          break label$1
         }
         $3 = 0;
         $1 = $7;
         label$9 : while (1) {
          HEAP32[$1 >> 2] = $0;
          HEAP32[($1 + 4 | 0) >> 2] = $4;
          $1 = $1 + 8 | 0;
          $3 = $3 + 1 | 0;
          $0 = $0 + $4 | 0;
          $2 = $2 - $4 | 0;
          if ($2 >>> 0 >= $4 >>> 0) {
           continue label$9
          }
          break label$9;
         };
        }
        $4 = (reed_solomon_erasure__ReedSolomon__encode__heb540feab6d46a0c($5 | 0, $7 | 0, $3 | 0) | 0) & 255 | 0;
        label$10 : {
         if (!$6) {
          break label$10
         }
         __rust_dealloc($7 | 0, $6 << 3 | 0 | 0, 4 | 0);
        }
        $4 = $4 ^ 8 | 0;
        label$11 : {
         $1 = HEAP32[($5 + 20 | 0) >> 2] | 0;
         if ($1 >>> 0 < 1025 >>> 0) {
          break label$11
         }
         __rust_dealloc(HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, $1 | 0, 1 | 0);
        }
        $1 = $4 << 2 | 0;
        __rust_dealloc(HEAP32[($5 + 1052 | 0) >> 2] | 0 | 0, 1 | 0, 1 | 0);
        label$12 : {
         $0 = $5 + 1060 | 0;
         $4 = HEAP32[$0 >> 2] | 0;
         if (!$4) {
          break label$12
         }
         $2 = HEAP32[$4 >> 2] | 0;
         HEAP32[$4 >> 2] = $2 + -1 | 0;
         if (($2 | 0) != (1 | 0)) {
          break label$12
         }
         $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($0 | 0);
        }
        $6 = $1 + 1048748 | 0;
        label$13 : {
         $1 = HEAP32[($5 + 1072 | 0) >> 2] | 0;
         if (!$1) {
          break label$13
         }
         $4 = HEAP32[($5 + 1064 | 0) >> 2] | 0;
         $1 = $1 << 4 | 0;
         label$14 : while (1) {
          label$15 : {
           $0 = $4 + 4 | 0;
           if (!(HEAP32[$0 >> 2] | 0)) {
            break label$15
           }
           label$16 : {
            $2 = HEAP32[$4 >> 2] | 0;
            if (!$2) {
             break label$16
            }
            $3 = HEAP32[$2 >> 2] | 0;
            HEAP32[$2 >> 2] = $3 + -1 | 0;
            if (($3 | 0) != (1 | 0)) {
             break label$16
            }
            $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($4 | 0);
           }
           core__ptr__real_drop_in_place__h85182afe7313c69c($0 | 0);
          }
          $4 = $4 + 16 | 0;
          $1 = $1 + -16 | 0;
          if ($1) {
           continue label$14
          }
          break label$14;
         };
        }
        $4 = HEAP32[$6 >> 2] | 0;
        label$17 : {
         $1 = HEAP32[($5 + 1068 | 0) >> 2] | 0;
         if (!$1) {
          break label$17
         }
         __rust_dealloc(HEAP32[($5 + 1064 | 0) >> 2] | 0 | 0, $1 << 4 | 0 | 0, 4 | 0);
        }
        global$0 = $5 + 2176 | 0;
        return $4 | 0;
       }
       core__result__unwrap_failed__hd6ba21361a7c9b4e(1048576 | 0, 43 | 0, HEAPU8[($4 + 1089 | 0) >> 0] | 0 | 0);
       wasm2js_trap();
      }
      core__panicking__panic__h3c512c7c2bb6da25(1120496 | 0);
      wasm2js_trap();
     }
     core__panicking__panic__h3c512c7c2bb6da25(1120472 | 0);
     wasm2js_trap();
    }
    core__panicking__panic__h3c512c7c2bb6da25(1120448 | 0);
    wasm2js_trap();
   }
   alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($1 | 0, 4 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__matrix__Matrix__sub_matrix__h7dd09f8655f0cb2b($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $10 = 0, $6 = 0, $9 = 0, $12 = 0, $11 = 0, $7 = 0, $8 = 0, $13 = 0, $22 = 0, $19 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $120 = 0, $142 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = global$0 - 2064 | 0;
  global$0 = $6;
  label$1 : {
   label$2 : {
    $7 = $5 - $3 | 0;
    $8 = $4 - $2 | 0;
    $9 = Math_imul($7, $8);
    if (($9 | 0) <= (-1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$9) {
        break label$5
       }
       $10 = 1;
       $11 = __rust_alloc_zeroed($9 | 0, 1 | 0) | 0;
       if (!$11) {
        break label$1
       }
       $12 = $9;
       if ($9 >>> 0 <= 1024 >>> 0) {
        break label$4
       }
       break label$3;
      }
      $11 = 1;
     }
     $10 = memcpy($6 | 0, $11 | 0, $9 | 0) | 0;
     HEAP8[(($10 + 2060 | 0) + 2 | 0) >> 0] = HEAPU8[($10 + 2 | 0) >> 0] | 0;
     HEAP16[($10 + 2060 | 0) >> 1] = HEAPU8[$10 >> 0] | 0 | ((HEAPU8[($10 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     $13 = HEAPU8[($10 + 3 | 0) >> 0] | 0 | ((HEAPU8[($10 + 4 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 5 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 6 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $12 = HEAPU8[($10 + 7 | 0) >> 0] | 0 | ((HEAPU8[($10 + 8 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 9 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 10 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     memcpy($10 + 1044 | 0 | 0, $10 + 11 | 0 | 0, 1016 | 0) | 0;
     $10 = 0;
     label$6 : {
      if (!$9) {
       break label$6
      }
      __rust_dealloc($11 | 0, $9 | 0, 1 | 0);
     }
     $11 = $13;
    }
    HEAP8[($6 + 12 | 0) >> 0] = $10;
    $13 = $6 + 13 | 0;
    $22 = HEAPU16[($6 + 2060 | 0) >> 1] | 0;
    HEAP8[$13 >> 0] = $22;
    HEAP8[($13 + 1 | 0) >> 0] = $22 >>> 8 | 0;
    HEAP32[($6 + 20 | 0) >> 2] = $12;
    HEAP32[($6 + 16 | 0) >> 2] = $11;
    HEAP8[($6 + 15 | 0) >> 0] = HEAPU8[($6 + 2062 | 0) >> 0] | 0;
    HEAP32[($6 + 8 | 0) >> 2] = $9;
    HEAP32[($6 + 4 | 0) >> 2] = $7;
    HEAP32[$6 >> 2] = $8;
    memcpy($6 + 24 | 0 | 0, $6 + 1044 | 0 | 0, 1016 | 0) | 0;
    label$7 : {
     label$8 : {
      label$9 : {
       if ($4 >>> 0 <= $2 >>> 0) {
        break label$9
       }
       if ($5 >>> 0 <= $3 >>> 0) {
        break label$9
       }
       $14 = $1 + 13 | 0;
       $8 = 0;
       $15 = $1 + 8 | 0;
       $16 = $1 + 20 | 0;
       $17 = $1 + 4 | 0;
       label$10 : while (1) {
        $18 = $2 + 1 | 0;
        $9 = 0;
        label$11 : while (1) {
         $10 = HEAP32[$15 >> 2] | 0;
         $120 = $10;
         $10 = $10 >>> 0 > 1024 >>> 0;
         $12 = (wasm2js_i32$0 = HEAP32[$16 >> 2] | 0, wasm2js_i32$1 = $120, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
         $11 = Math_imul($2, HEAP32[$17 >> 2] | 0);
         if ($12 >>> 0 <= (($3 + $9 | 0) + $11 | 0) >>> 0) {
          break label$8
         }
         $12 = HEAP32[($6 + 8 | 0) >> 2] | 0;
         $142 = $12;
         $12 = $12 >>> 0 > 1024 >>> 0;
         $19 = (wasm2js_i32$0 = HEAP32[($6 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $142, wasm2js_i32$2 = $12, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
         $7 = $9 + Math_imul($8, HEAP32[($6 + 4 | 0) >> 2] | 0) | 0;
         if ($19 >>> 0 <= $7 >>> 0) {
          break label$7
         }
         HEAP8[((wasm2js_i32$0 = HEAP32[($6 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $13, wasm2js_i32$2 = $12, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $7 | 0) >> 0] = HEAPU8[(((wasm2js_i32$0 = HEAP32[($1 + 16 | 0) >> 2] | 0, wasm2js_i32$1 = $14, wasm2js_i32$2 = $10, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $3 | 0) + ($9 + $11 | 0) | 0) >> 0] | 0;
         $9 = $9 + 1 | 0;
         if (($3 + $9 | 0) >>> 0 < $5 >>> 0) {
          continue label$11
         }
         break label$11;
        };
        $8 = $8 + 1 | 0;
        $2 = $18;
        if ($2 >>> 0 < $4 >>> 0) {
         continue label$10
        }
        break label$10;
       };
      }
      memcpy($0 | 0, $6 | 0, 1040 | 0) | 0;
      global$0 = $6 + 2064 | 0;
      return;
     }
     core__panicking__panic_bounds_check__h273e49a380d01fb7(1120916 | 0, ($11 + $3 | 0) + $9 | 0 | 0, $12 | 0);
     wasm2js_trap();
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $7 | 0, $19 | 0);
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($9 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__ReedSolomon__encode__heb540feab6d46a0c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $7 = 0, $8 = 0, $4 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = global$0 - 528 | 0;
  global$0 = $3;
  $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if ($5 >>> 0 > $2 >>> 0) {
        break label$5
       }
       $4 = 1;
       if ($5 >>> 0 < $2 >>> 0) {
        break label$5
       }
       if (!$2) {
        break label$2
       }
       $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (!$6) {
        break label$4
       }
       $5 = $2 << 3 | 0;
       $7 = $1;
       label$6 : while (1) {
        if (!$5) {
         break label$3
        }
        $5 = $5 + -8 | 0;
        $4 = 8;
        $8 = HEAP32[($7 + 4 | 0) >> 2] | 0;
        $7 = $7 + 8 | 0;
        if (($8 | 0) == ($6 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      global$0 = $3 + 528 | 0;
      return $4 | 0;
     }
     global$0 = $3 + 528 | 0;
     return 10 | 0;
    }
    $5 = HEAP32[$0 >> 2] | 0;
    if ($5 >>> 0 > $2 >>> 0) {
     break label$1
    }
    HEAP32[($3 + 264 | 0) >> 2] = 0;
    HEAP32[($3 + 268 | 0) >> 2] = 0;
    $9 = $1 + ($5 << 3 | 0) | 0;
    label$7 : {
     if ($5 >>> 0 < 33 >>> 0) {
      break label$7
     }
     $smallvec__SmallVec_A____grow__hb1d87153157c9a98($3 + 264 | 0 | 0, $5 | 0);
    }
    $10 = $2 - $5 | 0;
    $7 = memcpy($3 | 0, $3 + 264 | 0 | 0, 264 | 0) | 0;
    label$8 : {
     if (($9 | 0) == ($1 | 0)) {
      break label$8
     }
     $4 = $7 + 8 | 0;
     $11 = $7 + 12 | 0;
     label$9 : while (1) {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      $6 = HEAP32[$1 >> 2] | 0;
      label$10 : {
       $5 = HEAP32[$7 >> 2] | 0;
       $3 = $5 >>> 0 > 32 >>> 0;
       $8 = (wasm2js_i32$0 = HEAP32[$11 >> 2] | 0, wasm2js_i32$1 = $5, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       $3 = $3 ? $5 : 32;
       if (($8 | 0) != ($3 | 0)) {
        break label$10
       }
       label$11 : {
        label$12 : {
         $5 = $3 + 1 | 0;
         if ($5 >>> 0 < $3 >>> 0) {
          break label$12
         }
         $3 = 0;
         label$13 : {
          if ($5 >>> 0 < 2 >>> 0) {
           break label$13
          }
          $3 = -1 >>> Math_clz32($5 + -1 | 0) | 0;
         }
         $5 = $3 + 1 | 0;
         if ($5 >>> 0 >= $3 >>> 0) {
          break label$11
         }
        }
        $5 = -1;
       }
       $smallvec__SmallVec_A____grow__hb1d87153157c9a98($7 | 0, $5 | 0);
       $5 = HEAP32[$7 >> 2] | 0;
      }
      $3 = HEAP32[$4 >> 2] | 0;
      $5 = $5 >>> 0 > 32 >>> 0;
      HEAP32[($7 + ($5 ? 12 : 0) | 0) >> 2] = $8 + 1 | 0;
      $5 = ($5 ? $3 : $4) + ($8 << 3 | 0) | 0;
      HEAP32[($5 + 4 | 0) >> 2] = $2;
      HEAP32[$5 >> 2] = $6;
      $1 = $1 + 8 | 0;
      if (($1 | 0) != ($9 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    memcpy($7 + 264 | 0 | 0, $7 | 0, 264 | 0) | 0;
    $1 = $7 + 272 | 0;
    $5 = HEAP32[($7 + 264 | 0) >> 2] | 0;
    $8 = $5 >>> 0 > 32 >>> 0;
    $5 = reed_solomon_erasure__ReedSolomon__encode_sep__hd957cbdc77e33363($0 | 0, (wasm2js_i32$0 = HEAP32[$1 >> 2] | 0, wasm2js_i32$1 = $1, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, (wasm2js_i32$0 = HEAP32[($7 + 276 | 0) >> 2] | 0, wasm2js_i32$1 = $5, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | 0, $9 | 0, $10 | 0) | 0;
    label$14 : {
     $8 = HEAP32[($7 + 264 | 0) >> 2] | 0;
     if ($8 >>> 0 < 33 >>> 0) {
      break label$14
     }
     __rust_dealloc(HEAP32[$1 >> 2] | 0 | 0, $8 << 3 | 0 | 0, 4 | 0);
    }
    global$0 = $7 + 528 | 0;
    return $5 & 255 | 0 | 0;
   }
   core__panicking__panic_bounds_check__h273e49a380d01fb7(1120720 | 0, 0 | 0, 0 | 0);
   wasm2js_trap();
  }
  core__panicking__panic__h3c512c7c2bb6da25(1120680 | 0);
  wasm2js_trap();
 }
 
 function $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___alloc__h3481aab5b31ee87c($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2 = $2 ? $2 : 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1) {
       break label$4
      }
      $4 = $1 + 3 | 0;
      $1 = $4 >>> 2 | 0;
      label$5 : {
       if ($2 >>> 0 > 4 >>> 0) {
        break label$5
       }
       $5 = $1 + -1 | 0;
       if ($5 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $5 = ($0 + ($5 << 2 | 0) | 0) + 4 | 0;
       if (!$5) {
        break label$5
       }
       HEAP32[($3 + 20 | 0) >> 2] = $0;
       HEAP32[($3 + 24 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
       $0 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, $2 | 0, $3 + 24 | 0 | 0, $3 + 20 | 0 | 0, 1120624 | 0) | 0;
       if ($0) {
        break label$1
       }
       $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
       HEAP32[($3 + 28 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
       $0 = $1 + 2 | 0;
       $0 = Math_imul($0, $0);
       $7 = $0 >>> 0 > 2048 >>> 0 ? $0 : 2048;
       $4 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($7 | 0, 4 | 0, $3 + 28 | 0 | 0, 1048835 | 0, 1120576 | 0) | 0;
       if (!$4) {
        break label$3
       }
       HEAP32[$6 >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
       break label$2;
      }
      HEAP32[($3 + 28 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
      label$6 : {
       $5 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, $2 | 0, $3 + 28 | 0 | 0, 1048835 | 0, 1120600 | 0) | 0;
       if ($5) {
        break label$6
       }
       $5 = 0;
       $4 = $4 & -4 | 0;
       $7 = ($2 << 3 | 0) + 16384 | 0;
       $7 = ($7 >>> 0 < $4 >>> 0 ? $4 : $7) + 65543 | 0;
       $4 = __wasm_memory_grow($7 >>> 16 | 0 | 0);
       if (($4 | 0) == (-1 | 0)) {
        break label$6
       }
       $4 = $4 << 16 | 0;
       if (!$4) {
        break label$6
       }
       HEAP32[$4 >> 2] = $4 + ($7 & -65536 | 0) | 0 | 2 | 0;
       HEAP32[($4 + 4 | 0) >> 2] = 0;
       HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
       HEAP32[($3 + 28 | 0) >> 2] = $4;
       $5 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, $2 | 0, $3 + 28 | 0 | 0, 1048835 | 0, 1120600 | 0) | 0;
      }
      HEAP32[$0 >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
      global$0 = $3 + 32 | 0;
      return $5 | 0;
     }
     global$0 = $3 + 32 | 0;
     return $2 | 0;
    }
    $0 = 0;
    FUNCTION_TABLE[HEAP32[(0 + 1120588 | 0) >> 2] | 0 | 0]($3 + 8 | 0, 1048835, $7, 4);
    label$7 : {
     if (!(HEAP32[($3 + 8 | 0) >> 2] | 0)) {
      break label$7
     }
     HEAP32[$6 >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
     break label$1;
    }
    $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
    HEAP32[($3 + 28 | 0) >> 2] = $4;
    $4 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($7 | 0, 4 | 0, $3 + 28 | 0 | 0, 1048835 | 0, 1120576 | 0) | 0;
    HEAP32[$6 >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
    if (!$4) {
     break label$1
    }
   }
   HEAP32[($4 + 4 | 0) >> 2] = 0;
   HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
   HEAP32[$4 >> 2] = $4 + ($7 << 2 | 0) | 0 | 2 | 0;
   HEAP32[($3 + 24 | 0) >> 2] = $4;
   $0 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, $2 | 0, $3 + 24 | 0 | 0, $3 + 20 | 0 | 0, 1120624 | 0) | 0;
  }
  HEAP32[$5 >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
  global$0 = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function reed_solomon_erasure__ReedSolomon__get_parity_rows__h67582b0f15cf00b6($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $12 = 0, $3 = 0, $8 = 0, $11 = 0, $4 = 0, $7 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $148 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = global$0 - 528 | 0;
  global$0 = $2;
  $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[($2 + 264 | 0) >> 2] = 0;
  HEAP32[($2 + 268 | 0) >> 2] = 0;
  label$1 : {
   if ($3 >>> 0 < 33 >>> 0) {
    break label$1
   }
   $smallvec__SmallVec_A____grow__hb1d87153157c9a98($2 + 264 | 0 | 0, $3 | 0);
  }
  $3 = memcpy($2 | 0, $2 + 264 | 0 | 0, 264 | 0) | 0;
  label$2 : {
   label$3 : {
    $4 = HEAP32[$1 >> 2] | 0;
    $5 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if ($4 >>> 0 >= $5 >>> 0) {
     break label$3
    }
    label$4 : {
     $6 = $1 + 16 | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     $2 = Math_imul($7, $4);
     $8 = $2 + $7 | 0;
     if ($8 >>> 0 < $2 >>> 0) {
      break label$4
     }
     $9 = $1 + 32 | 0;
     $10 = $1 + 20 | 0;
     $11 = HEAP32[$10 >> 2] | 0;
     $12 = $11 >>> 0 > 1024 >>> 0;
     $11 = (wasm2js_i32$0 = HEAP32[$9 >> 2] | 0, wasm2js_i32$1 = $11, wasm2js_i32$2 = $12, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     $13 = $1 + 28 | 0;
     $14 = $1 + 25 | 0;
     $12 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $14, wasm2js_i32$2 = $12, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     $1 = $4 + 1 | 0;
     $4 = $3 + 8 | 0;
     $15 = $3 + 12 | 0;
     label$5 : while (1) {
      if ($11 >>> 0 < $8 >>> 0) {
       break label$2
      }
      $11 = $12 + $2 | 0;
      label$6 : {
       $2 = HEAP32[$3 >> 2] | 0;
       $12 = $2 >>> 0 > 32 >>> 0;
       $8 = (wasm2js_i32$0 = HEAP32[$15 >> 2] | 0, wasm2js_i32$1 = $2, wasm2js_i32$2 = $12, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       $12 = $12 ? $2 : 32;
       if (($8 | 0) != ($12 | 0)) {
        break label$6
       }
       label$7 : {
        label$8 : {
         $2 = $12 + 1 | 0;
         if ($2 >>> 0 < $12 >>> 0) {
          break label$8
         }
         $12 = 0;
         label$9 : {
          if ($2 >>> 0 < 2 >>> 0) {
           break label$9
          }
          $12 = -1 >>> Math_clz32($2 + -1 | 0) | 0;
         }
         $2 = $12 + 1 | 0;
         if ($2 >>> 0 >= $12 >>> 0) {
          break label$7
         }
        }
        $2 = -1;
       }
       $smallvec__SmallVec_A____grow__hb1d87153157c9a98($3 | 0, $2 | 0);
       $2 = HEAP32[$3 >> 2] | 0;
      }
      $12 = HEAP32[$4 >> 2] | 0;
      $2 = $2 >>> 0 > 32 >>> 0;
      HEAP32[($3 + ($2 ? 12 : 0) | 0) >> 2] = $8 + 1 | 0;
      $2 = ($2 ? $12 : $4) + ($8 << 3 | 0) | 0;
      HEAP32[($2 + 4 | 0) >> 2] = $7;
      HEAP32[$2 >> 2] = $11;
      if ($1 >>> 0 >= $5 >>> 0) {
       break label$3
      }
      $2 = HEAP32[$10 >> 2] | 0;
      $148 = $2;
      $2 = $2 >>> 0 > 1024 >>> 0;
      $11 = (wasm2js_i32$0 = HEAP32[$9 >> 2] | 0, wasm2js_i32$1 = $148, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $12 = (wasm2js_i32$0 = HEAP32[$13 >> 2] | 0, wasm2js_i32$1 = $14, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $7 = HEAP32[$6 >> 2] | 0;
      $2 = Math_imul($7, $1);
      $1 = $1 + 1 | 0;
      $8 = $2 + $7 | 0;
      if ($8 >>> 0 >= $2 >>> 0) {
       continue label$5
      }
      break label$5;
     };
    }
    core__slice__slice_index_order_fail__hdebcacf34982bb52($2 | 0, $8 | 0);
    wasm2js_trap();
   }
   memcpy($0 | 0, $3 | 0, 264 | 0) | 0;
   global$0 = $3 + 528 | 0;
   return;
  }
  core__slice__slice_index_len_fail__hf626520261f048fe($8 | 0, $11 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__ReedSolomon__encode_sep__hd957cbdc77e33363($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $7 = 0, $9 = 0, $5 = 0, $8 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = global$0 - 272 | 0;
  global$0 = $5;
  $6 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $7 = HEAP32[$0 >> 2] | 0;
      if ($7 >>> 0 > $2 >>> 0) {
       break label$4
      }
      $6 = 3;
      if ($7 >>> 0 < $2 >>> 0) {
       break label$4
      }
      $6 = 4;
      $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if ($7 >>> 0 > $4 >>> 0) {
       break label$4
      }
      $6 = 5;
      if ($7 >>> 0 < $4 >>> 0) {
       break label$4
      }
      if (!$2) {
       break label$3
      }
      $6 = 10;
      $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (!$8) {
       break label$4
      }
      $7 = $2 << 3 | 0;
      $9 = $1;
      label$5 : {
       label$6 : while (1) {
        if (!$7) {
         break label$5
        }
        $7 = $7 + -8 | 0;
        $6 = 8;
        $10 = HEAP32[($9 + 4 | 0) >> 2] | 0;
        $9 = $9 + 8 | 0;
        if (($10 | 0) == ($8 | 0)) {
         continue label$6
        }
        break label$4;
       };
      }
      if (!$4) {
       break label$1
      }
      $6 = 10;
      $11 = HEAP32[($3 + 4 | 0) >> 2] | 0;
      if (!$11) {
       break label$4
      }
      $7 = $4 << 3 | 0;
      $9 = $3;
      label$7 : {
       label$8 : while (1) {
        if (!$7) {
         break label$7
        }
        $7 = $7 + -8 | 0;
        $6 = 8;
        $10 = HEAP32[($9 + 4 | 0) >> 2] | 0;
        $9 = $9 + 8 | 0;
        if (($10 | 0) == ($11 | 0)) {
         continue label$8
        }
        break label$4;
       };
      }
      $6 = 8;
      if (($8 | 0) != ($11 | 0)) {
       break label$4
      }
      reed_solomon_erasure__ReedSolomon__get_parity_rows__h67582b0f15cf00b6($5 + 8 | 0 | 0, $0 | 0);
      $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      label$9 : {
       $9 = HEAP32[$0 >> 2] | 0;
       if (!$9) {
        break label$9
       }
       $7 = $6 >>> 0 > 32 >>> 0;
       $10 = (wasm2js_i32$0 = HEAP32[($5 + 20 | 0) >> 2] | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       $6 = ($5 + 8 | 0) + 8 | 0;
       $8 = (wasm2js_i32$0 = HEAP32[$6 >> 2] | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = $7, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       $6 = 0;
       label$10 : while (1) {
        if ($6 >>> 0 >= $2 >>> 0) {
         break label$2
        }
        reed_solomon_erasure__ReedSolomon__code_single_slice__h4d085708e8812f71($0 | 0, $8 | 0, $10 | 0, $6 | 0, HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, $3 | 0, $4 | 0);
        $1 = $1 + 8 | 0;
        $7 = $6 + 1 | 0;
        $6 = $7;
        if ($7 >>> 0 < $9 >>> 0) {
         continue label$10
        }
        break label$10;
       };
       $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      }
      label$11 : {
       if ($6 >>> 0 < 33 >>> 0) {
        break label$11
       }
       __rust_dealloc(HEAP32[($5 + 16 | 0) >> 2] | 0 | 0, $6 << 3 | 0 | 0, 4 | 0);
      }
      $6 = 13;
     }
     global$0 = $5 + 272 | 0;
     return $6 | 0;
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1120720 | 0, 0 | 0, 0 | 0);
    wasm2js_trap();
   }
   core__panicking__panic_bounds_check__h273e49a380d01fb7(1120736 | 0, $6 | 0, $2 | 0);
   wasm2js_trap();
  }
  core__panicking__panic_bounds_check__h273e49a380d01fb7(1120720 | 0, 0 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__ReedSolomon__with_pparam__h229bd7891bcca49f($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5 = 0, $119 = 0, $125 = 0, $129 = 0;
  $4 = global$0 - 4160 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1) {
      break label$3
     }
     if (!$2) {
      break label$2
     }
     $5 = $2 + $1 | 0;
     if ($5 >>> 0 < 257 >>> 0) {
      break label$1
     }
     HEAP16[$0 >> 1] = 257;
     global$0 = $4 + 4160 | 0;
     return;
    }
    HEAP16[$0 >> 1] = 513;
    global$0 = $4 + 4160 | 0;
    return;
   }
   HEAP16[$0 >> 1] = 1025;
   global$0 = $4 + 4160 | 0;
   return;
  }
  reed_solomon_erasure__matrix__Matrix__vandermonde__h4ebffb6c129618c3($4 | 0, $5 | 0, $1 | 0);
  reed_solomon_erasure__matrix__Matrix__sub_matrix__h7dd09f8655f0cb2b($4 + 1040 | 0 | 0, $4 | 0, 0 | 0, 0 | 0, $1 | 0, $1 | 0);
  reed_solomon_erasure__matrix__Matrix__invert__h18a6cfdcd52db06f($4 + 3120 | 0 | 0, $4 + 1040 | 0 | 0);
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      if ((HEAPU8[($4 + 3132 | 0) >> 0] | 0 | 0) == (2 | 0)) {
       break label$7
      }
      memcpy($4 + 2080 | 0 | 0, $4 + 3120 | 0 | 0, 1040 | 0) | 0;
      reed_solomon_erasure__matrix__Matrix__multiply__he7cd888fb638a99a($4 + 3120 | 0 | 0, $4 | 0, $4 + 2080 | 0 | 0);
      label$8 : {
       label$9 : {
        $6 = HEAP32[($4 + 1048 | 0) >> 2] | 0;
        if ($6 >>> 0 >= 1025 >>> 0) {
         break label$9
        }
        $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
        if ($6 >>> 0 >= 1025 >>> 0) {
         break label$8
        }
        break label$6;
       }
       __rust_dealloc(HEAP32[($4 + 1056 | 0) >> 2] | 0 | 0, $6 | 0, 1 | 0);
       $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       if ($6 >>> 0 < 1025 >>> 0) {
        break label$6
       }
      }
      __rust_dealloc(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, $6 | 0, 1 | 0);
      $6 = HEAP32[($4 + 2088 | 0) >> 2] | 0;
      if ($6 >>> 0 >= 1025 >>> 0) {
       break label$5
      }
      break label$4;
     }
     core__result__unwrap_failed__ha514fcd751db317e(1048835 | 0, 43 | 0);
     wasm2js_trap();
    }
    $6 = HEAP32[($4 + 2088 | 0) >> 2] | 0;
    if ($6 >>> 0 < 1025 >>> 0) {
     break label$4
    }
   }
   __rust_dealloc(HEAP32[($4 + 2096 | 0) >> 2] | 0 | 0, $6 | 0, 1 | 0);
  }
  reed_solomon_erasure__inversion_tree__InversionTree__new__hd899c7ab182e2faf($4 + 2080 | 0 | 0, $1 | 0, $2 | 0);
  HEAP32[($0 + 12 | 0) >> 2] = $5;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $1;
  memcpy($0 + 16 | 0 | 0, $4 + 3120 | 0 | 0, 1040 | 0) | 0;
  HEAP32[($0 + 1084 | 0) >> 2] = $3 ? $3 : 1;
  HEAP8[$0 >> 0] = 0;
  HEAP32[($0 + 1080 | 0) >> 2] = HEAP32[($4 + 2104 | 0) >> 2] | 0;
  i64toi32_i32$2 = ($4 + 2080 | 0) + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $119 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 1072 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $119;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($4 + 2080 | 0) + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 1064 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $125;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[($4 + 2080 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 2084 | 0) >> 2] | 0;
  $129 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 1056 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $129;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $4 + 4160 | 0;
 }
 
 function reed_solomon_erasure__matrix__Matrix__identity__h89e4942cee2d2ce4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $12 = 0, $10 = 0, $8 = 0, $9 = 0, $123 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = global$0 - 2064 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = Math_imul($1, $1);
     if (($3 | 0) <= (-1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3) {
         break label$6
        }
        $4 = 1;
        $5 = __rust_alloc_zeroed($3 | 0, 1 | 0) | 0;
        if (!$5) {
         break label$2
        }
        $6 = $3;
        if ($3 >>> 0 <= 1024 >>> 0) {
         break label$5
        }
        break label$4;
       }
       $5 = 1;
      }
      $4 = memcpy($2 | 0, $5 | 0, $3 | 0) | 0;
      HEAP8[(($4 + 2060 | 0) + 2 | 0) >> 0] = HEAPU8[($4 + 2 | 0) >> 0] | 0;
      HEAP16[($4 + 2060 | 0) >> 1] = HEAPU8[$4 >> 0] | 0 | ((HEAPU8[($4 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
      $7 = HEAPU8[($4 + 3 | 0) >> 0] | 0 | ((HEAPU8[($4 + 4 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 5 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 6 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      $6 = HEAPU8[($4 + 7 | 0) >> 0] | 0 | ((HEAPU8[($4 + 8 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 9 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 10 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      memcpy($4 + 1044 | 0 | 0, $4 + 11 | 0 | 0, 1016 | 0) | 0;
      $4 = 0;
      label$7 : {
       if (!$3) {
        break label$7
       }
       __rust_dealloc($5 | 0, $3 | 0, 1 | 0);
      }
      $5 = $7;
     }
     HEAP8[($2 + 12 | 0) >> 0] = $4;
     $7 = $2 + 13 | 0;
     $12 = HEAPU16[($2 + 2060 | 0) >> 1] | 0;
     HEAP8[$7 >> 0] = $12;
     HEAP8[($7 + 1 | 0) >> 0] = $12 >>> 8 | 0;
     HEAP32[($2 + 20 | 0) >> 2] = $6;
     HEAP32[($2 + 16 | 0) >> 2] = $5;
     HEAP8[($2 + 15 | 0) >> 0] = HEAPU8[($2 + 2062 | 0) >> 0] | 0;
     HEAP32[($2 + 8 | 0) >> 2] = $3;
     HEAP32[($2 + 4 | 0) >> 2] = $1;
     HEAP32[$2 >> 2] = $1;
     memcpy($2 + 24 | 0 | 0, $2 + 1044 | 0 | 0, 1016 | 0) | 0;
     label$8 : {
      if (!$1) {
       break label$8
      }
      $5 = $3 >>> 0 > 1024 >>> 0;
      $3 = $5 ? $6 : $3;
      if (!$3) {
       break label$1
      }
      $4 = 0;
      $6 = $2 + 16 | 0;
      $8 = $2 + 8 | 0;
      $9 = $2 + 20 | 0;
      $3 = 1;
      label$9 : while (1) {
       HEAP8[((wasm2js_i32$0 = HEAP32[$6 >> 2] | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $4 | 0) >> 0] = 1;
       if ($3 >>> 0 >= $1 >>> 0) {
        break label$8
       }
       $4 = Math_imul(HEAP32[($2 + 4 | 0) >> 2] | 0, $3) + $3 | 0;
       $3 = $3 + 1 | 0;
       $5 = HEAP32[$8 >> 2] | 0;
       $123 = $5;
       $5 = $5 >>> 0 > 1024 >>> 0;
       $10 = (wasm2js_i32$0 = HEAP32[$9 >> 2] | 0, wasm2js_i32$1 = $123, wasm2js_i32$2 = $5, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       if ($10 >>> 0 > $4 >>> 0) {
        continue label$9
       }
       break label$9;
      };
      core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $4 | 0, $10 | 0);
      wasm2js_trap();
     }
     memcpy($0 | 0, $2 | 0, 1040 | 0) | 0;
     global$0 = $2 + 2064 | 0;
     return;
    }
    $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
    wasm2js_trap();
   }
   alloc__alloc__handle_alloc_error__h2bf444f047049b0e($3 | 0, 1 | 0);
   wasm2js_trap();
  }
  core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, 0 | 0, $3 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__galois__mul_slice_xor__h07edddfec5e22900($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $10 = 0, $8 = 0, $9 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 64 | 0;
  global$0 = $5;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[($5 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (($2 | 0) != ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$2) {
     break label$2
    }
    $6 = $0 & 255 | 0;
    label$3 : {
     label$4 : {
      if (($2 | 0) < (5 | 0)) {
       break label$4
      }
      $7 = $2 + -4 | 0;
      $0 = 0;
      $8 = ($6 << 8 | 0) + 1050806 | 0;
      label$5 : while (1) {
       $4 = $3 + $0 | 0;
       $9 = $1 + $0 | 0;
       HEAP8[$4 >> 0] = (HEAPU8[$4 >> 0] | 0) ^ (HEAPU8[($8 + (HEAPU8[$9 >> 0] | 0) | 0) >> 0] | 0) | 0;
       $10 = $4 + 1 | 0;
       HEAP8[$10 >> 0] = (HEAPU8[$10 >> 0] | 0) ^ (HEAPU8[($8 + (HEAPU8[($9 + 1 | 0) >> 0] | 0) | 0) >> 0] | 0) | 0;
       $10 = $4 + 2 | 0;
       HEAP8[$10 >> 0] = (HEAPU8[$10 >> 0] | 0) ^ (HEAPU8[($8 + (HEAPU8[($9 + 2 | 0) >> 0] | 0) | 0) >> 0] | 0) | 0;
       $4 = $4 + 3 | 0;
       HEAP8[$4 >> 0] = (HEAPU8[$4 >> 0] | 0) ^ (HEAPU8[($8 + (HEAPU8[($9 + 3 | 0) >> 0] | 0) | 0) >> 0] | 0) | 0;
       $0 = $0 + 4 | 0;
       if (($0 | 0) < ($7 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $1 = $1 + $0 | 0;
      $3 = $3 + $0 | 0;
      if (($0 | 0) < ($2 | 0)) {
       break label$3
      }
      break label$2;
     }
     $0 = 0;
     if ((0 | 0) >= ($2 | 0)) {
      break label$2
     }
    }
    $4 = $2 - $0 | 0;
    $0 = $6 << 8 | 0;
    label$6 : while (1) {
     HEAP8[$3 >> 0] = (HEAPU8[$3 >> 0] | 0) ^ (HEAPU8[(($0 | (HEAPU8[$1 >> 0] | 0) | 0) + 1050806 | 0) >> 0] | 0) | 0;
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     $4 = $4 + -1 | 0;
     if ($4) {
      continue label$6
     }
     break label$6;
    };
   }
   global$0 = $5 + 64 | 0;
   return;
  }
  HEAP32[($5 + 56 | 0) >> 2] = $5 + 8 | 0;
  HEAP32[($5 + 52 | 0) >> 2] = 25;
  HEAP32[($5 + 36 | 0) >> 2] = 2;
  HEAP32[($5 + 44 | 0) >> 2] = 25;
  HEAP32[($5 + 20 | 0) >> 2] = 3;
  HEAP32[($5 + 24 | 0) >> 2] = 0;
  HEAP32[($5 + 16 | 0) >> 2] = 1121060;
  HEAP32[($5 + 48 | 0) >> 2] = $5 + 60 | 0;
  HEAP32[($5 + 40 | 0) >> 2] = $5 + 56 | 0;
  HEAP32[($5 + 60 | 0) >> 2] = $5 + 12 | 0;
  HEAP32[($5 + 32 | 0) >> 2] = $5 + 40 | 0;
  std__panicking__begin_panic_fmt__hf8f8362495d2ae80($5 + 16 | 0 | 0, 1121100 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__galois__mul_slice__hd47fe15bb8fd038e($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $8 = 0, $9 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 64 | 0;
  global$0 = $5;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[($5 + 12 | 0) >> 2] = $4;
  label$1 : {
   if (($2 | 0) != ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$2) {
     break label$2
    }
    $6 = $0 & 255 | 0;
    label$3 : {
     label$4 : {
      if (($2 | 0) < (5 | 0)) {
       break label$4
      }
      $7 = $2 + -4 | 0;
      $4 = 0;
      $0 = ($6 << 8 | 0) + 1050806 | 0;
      label$5 : while (1) {
       $8 = $3 + $4 | 0;
       $9 = $1 + $4 | 0;
       HEAP8[$8 >> 0] = HEAPU8[($0 + (HEAPU8[$9 >> 0] | 0) | 0) >> 0] | 0;
       HEAP8[($8 + 1 | 0) >> 0] = HEAPU8[($0 + (HEAPU8[($9 + 1 | 0) >> 0] | 0) | 0) >> 0] | 0;
       HEAP8[($8 + 2 | 0) >> 0] = HEAPU8[($0 + (HEAPU8[($9 + 2 | 0) >> 0] | 0) | 0) >> 0] | 0;
       HEAP8[($8 + 3 | 0) >> 0] = HEAPU8[($0 + (HEAPU8[($9 + 3 | 0) >> 0] | 0) | 0) >> 0] | 0;
       $4 = $4 + 4 | 0;
       if (($4 | 0) < ($7 | 0)) {
        continue label$5
       }
       break label$5;
      };
      $1 = $1 + $4 | 0;
      $3 = $3 + $4 | 0;
      if (($4 | 0) < ($2 | 0)) {
       break label$3
      }
      break label$2;
     }
     $4 = 0;
     if ((0 | 0) >= ($2 | 0)) {
      break label$2
     }
    }
    $4 = $2 - $4 | 0;
    $0 = $6 << 8 | 0;
    label$6 : while (1) {
     HEAP8[$3 >> 0] = HEAPU8[(($0 | (HEAPU8[$1 >> 0] | 0) | 0) + 1050806 | 0) >> 0] | 0;
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     $4 = $4 + -1 | 0;
     if ($4) {
      continue label$6
     }
     break label$6;
    };
   }
   global$0 = $5 + 64 | 0;
   return;
  }
  HEAP32[($5 + 56 | 0) >> 2] = $5 + 8 | 0;
  HEAP32[($5 + 52 | 0) >> 2] = 25;
  HEAP32[($5 + 36 | 0) >> 2] = 2;
  HEAP32[($5 + 44 | 0) >> 2] = 25;
  HEAP32[($5 + 20 | 0) >> 2] = 3;
  HEAP32[($5 + 24 | 0) >> 2] = 0;
  HEAP32[($5 + 16 | 0) >> 2] = 1121060;
  HEAP32[($5 + 48 | 0) >> 2] = $5 + 60 | 0;
  HEAP32[($5 + 40 | 0) >> 2] = $5 + 56 | 0;
  HEAP32[($5 + 60 | 0) >> 2] = $5 + 12 | 0;
  HEAP32[($5 + 32 | 0) >> 2] = $5 + 40 | 0;
  std__panicking__begin_panic_fmt__hf8f8362495d2ae80($5 + 16 | 0 | 0, 1121084 | 0);
  wasm2js_trap();
 }
 
 function core__unicode__printable__check__h1a95ff94fcb738db($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $10 = 0, $13 = 0, $7 = 0, $11 = 0, $8 = 0, $9 = 0, $12 = 0;
  $7 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$2) {
         break label$6
        }
        $8 = $1 + ($2 << 1 | 0) | 0;
        $9 = ($0 & 65280 | 0) >>> 8 | 0;
        $10 = 0;
        $11 = $0 & 255 | 0;
        label$7 : while (1) {
         $12 = $1 + 2 | 0;
         $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
         $13 = $10 + $2 | 0;
         label$8 : {
          label$9 : {
           $1 = HEAPU8[$1 >> 0] | 0;
           if (($1 | 0) != ($9 | 0)) {
            break label$9
           }
           if ($13 >>> 0 < $10 >>> 0) {
            break label$2
           }
           if ($13 >>> 0 > $4 >>> 0) {
            break label$1
           }
           $1 = $3 + $10 | 0;
           label$10 : while (1) {
            if (!$2) {
             break label$8
            }
            $2 = $2 + -1 | 0;
            $10 = HEAPU8[$1 >> 0] | 0;
            $1 = $1 + 1 | 0;
            if (($10 | 0) != ($11 | 0)) {
             continue label$10
            }
            break label$5;
           };
          }
          if ($1 >>> 0 > $9 >>> 0) {
           break label$6
          }
          $10 = $13;
          $1 = $12;
          if (($1 | 0) != ($8 | 0)) {
           continue label$7
          }
          break label$6;
         }
         $10 = $13;
         $1 = $12;
         if (($1 | 0) != ($8 | 0)) {
          continue label$7
         }
         break label$7;
        };
       }
       if (!$6) {
        break label$4
       }
       $11 = $5 + $6 | 0;
       $1 = $0 & 65535 | 0;
       $7 = 1;
       label$11 : while (1) {
        $10 = $5 + 1 | 0;
        label$12 : {
         label$13 : {
          $2 = HEAPU8[$5 >> 0] | 0;
          $13 = ($2 << 24 | 0) >> 24 | 0;
          if (($13 | 0) <= (-1 | 0)) {
           break label$13
          }
          $5 = $10;
          break label$12;
         }
         if (($10 | 0) == ($11 | 0)) {
          break label$3
         }
         $2 = ($13 & 127 | 0) << 8 | 0 | (HEAPU8[($5 + 1 | 0) >> 0] | 0) | 0;
         $5 = $5 + 2 | 0;
        }
        $1 = $1 - $2 | 0;
        if (($1 | 0) < (0 | 0)) {
         break label$4
        }
        $7 = $7 ^ 1 | 0;
        if (($5 | 0) != ($11 | 0)) {
         continue label$11
        }
        break label$4;
       };
      }
      $7 = 0;
     }
     return $7 & 1 | 0 | 0;
    }
    core__panicking__panic__h3c512c7c2bb6da25(1121352 | 0);
    wasm2js_trap();
   }
   core__slice__slice_index_order_fail__hdebcacf34982bb52($10 | 0, $13 | 0);
   wasm2js_trap();
  }
  core__slice__slice_index_len_fail__hf626520261f048fe($13 | 0, $4 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__inversion_tree__InversionNode__get_child__he53488bd3d402e2d($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $7 = 0, $4 = 0, $6 = 0, i64toi32_i32$1 = 0, $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9 = 0, $93 = 0, $98 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    label$3 : {
     $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
     $6 = $2 - $1 | 0;
     if ($5 >>> 0 <= $6 >>> 0) {
      break label$3
     }
     label$4 : {
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $7 = $2 + ($6 << 4 | 0) | 0;
      if (HEAP32[($7 + 4 | 0) >> 2] | 0) {
       break label$4
      }
      reed_solomon_erasure__inversion_tree__InversionNode__new__h694fd8389a3d8a02($4 | 0, 0 | 0, $3 - $1 | 0 | 0);
      label$5 : {
       $8 = $7 + 4 | 0;
       if (!(HEAP32[$8 >> 2] | 0)) {
        break label$5
       }
       label$6 : {
        $1 = HEAP32[$7 >> 2] | 0;
        if (!$1) {
         break label$6
        }
        $5 = HEAP32[$1 >> 2] | 0;
        HEAP32[$1 >> 2] = $5 + -1 | 0;
        if (($5 | 0) != (1 | 0)) {
         break label$6
        }
        $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($7 | 0);
       }
       label$7 : {
        $5 = HEAP32[($8 + 8 | 0) >> 2] | 0;
        if (!$5) {
         break label$7
        }
        $1 = HEAP32[$8 >> 2] | 0;
        $5 = $5 << 4 | 0;
        label$8 : while (1) {
         label$9 : {
          $2 = $1 + 4 | 0;
          if (!(HEAP32[$2 >> 2] | 0)) {
           break label$9
          }
          label$10 : {
           $3 = HEAP32[$1 >> 2] | 0;
           if (!$3) {
            break label$10
           }
           $9 = HEAP32[$3 >> 2] | 0;
           HEAP32[$3 >> 2] = $9 + -1 | 0;
           if (($9 | 0) != (1 | 0)) {
            break label$10
           }
           $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($1 | 0);
          }
          core__ptr__real_drop_in_place__hcd8e4fb8c251e2f1($2 | 0);
         }
         $1 = $1 + 16 | 0;
         $5 = $5 + -16 | 0;
         if ($5) {
          continue label$8
         }
         break label$8;
        };
       }
       $1 = HEAP32[($8 + 4 | 0) >> 2] | 0;
       if (!$1) {
        break label$5
       }
       __rust_dealloc(HEAP32[$8 >> 2] | 0 | 0, $1 << 4 | 0 | 0, 4 | 0);
      }
      i64toi32_i32$2 = $4;
      i64toi32_i32$0 = HEAP32[$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
      $93 = i64toi32_i32$0;
      i64toi32_i32$0 = $7;
      HEAP32[$7 >> 2] = $93;
      HEAP32[($7 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $4 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $98 = i64toi32_i32$1;
      i64toi32_i32$1 = $7 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $98;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5 = HEAP32[($0 + 12 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     }
     if ($5 >>> 0 <= $6 >>> 0) {
      break label$2
     }
     $1 = $2 + ($6 << 4 | 0) | 0;
     if (!(HEAP32[($1 + 4 | 0) >> 2] | 0)) {
      break label$1
     }
     global$0 = $4 + 16 | 0;
     return $1 | 0;
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1121132 | 0, $6 | 0, $5 | 0);
    wasm2js_trap();
   }
   core__panicking__panic_bounds_check__h273e49a380d01fb7(1121132 | 0, $6 | 0, $5 | 0);
   wasm2js_trap();
  }
  std__panicking__begin_panic__h2418fa6fbb16e3a8(1116623 | 0, 14 | 0, 1121164 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__inversion_tree__InversionTree__get_inverted_matrix__hdc0822e175f11f98($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $7 = 0, $6 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  $4 = HEAPU8[$3 >> 0] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if (!$2) {
             break label$10
            }
            if ($4 & 255 | 0) {
             break label$7
            }
            HEAP8[$3 >> 0] = 1;
            $5 = std__panicking__panicking__hd25645a73a60f14b() | 0;
            if (HEAPU8[($0 + 4 | 0) >> 0] | 0) {
             break label$6
            }
            $3 = $0 + 8 | 0;
            $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
            $4 = 0;
            label$11 : while (1) {
             $7 = HEAP32[$1 >> 2] | 0;
             $3 = reed_solomon_erasure__inversion_tree__InversionNode__get_child__he53488bd3d402e2d($3 | 0, $4 | 0, $7 | 0, $6 | 0) | 0;
             $1 = $1 + 4 | 0;
             $4 = $7 + 1 | 0;
             $2 = $2 + -1 | 0;
             if ($2) {
              continue label$11
             }
             break label$11;
            };
            $1 = HEAP32[$3 >> 2] | 0;
            if (!$1) {
             break label$9
            }
            $2 = HEAP32[$1 >> 2] | 0;
            HEAP32[$1 >> 2] = $2 + 1 | 0;
            if (($2 | 0) <= (-1 | 0)) {
             break label$8
            }
            if ($5) {
             break label$1
            }
            break label$2;
           }
           if ($4 & 255 | 0) {
            break label$5
           }
           HEAP8[$3 >> 0] = 1;
           $2 = std__panicking__panicking__hd25645a73a60f14b() | 0;
           if (HEAPU8[($0 + 4 | 0) >> 0] | 0) {
            break label$4
           }
           $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if (!$1) {
            break label$3
           }
           $3 = HEAP32[$1 >> 2] | 0;
           HEAP32[$1 >> 2] = $3 + 1 | 0;
           if (($3 | 0) <= (-1 | 0)) {
            break label$8
           }
           if ($2) {
            break label$1
           }
           if (!(std__panicking__panicking__hd25645a73a60f14b() | 0)) {
            break label$1
           }
           HEAP8[($0 + 4 | 0) >> 0] = 1;
           HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] = 0;
           return $1 | 0;
          }
          $1 = 0;
          if (!$5) {
           break label$2
          }
          break label$1;
         }
         wasm2js_trap();
        }
        std__panicking__begin_panic__h2418fa6fbb16e3a8(1116370 | 0, 32 | 0, 1121116 | 0);
        wasm2js_trap();
       }
       core__result__unwrap_failed__hf92ddcde0bda805c(1116402 | 0, 43 | 0, $0 | 0, $5 | 0);
       wasm2js_trap();
      }
      std__panicking__begin_panic__h2418fa6fbb16e3a8(1116370 | 0, 32 | 0, 1121116 | 0);
      wasm2js_trap();
     }
     core__result__unwrap_failed__hf92ddcde0bda805c(1116402 | 0, 43 | 0, $0 | 0, $2 | 0);
     wasm2js_trap();
    }
    std__panicking__begin_panic__h2418fa6fbb16e3a8(1116623 | 0, 14 | 0, 1121148 | 0);
    wasm2js_trap();
   }
   if (!(std__panicking__panicking__hd25645a73a60f14b() | 0)) {
    break label$1
   }
   HEAP8[($0 + 4 | 0) >> 0] = 1;
   HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] = 0;
   return $1 | 0;
  }
  HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] = 0;
  return $1 | 0;
 }
 
 function reed_solomon_erasure__inversion_tree__InversionTree__new__hd899c7ab182e2faf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$2 = 0, $9 = 0, $3 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $33 = 0, $87 = 0, $94 = 0, $97 = 0, $103 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = global$0 - 2080 | 0;
  global$0 = $3;
  reed_solomon_erasure__matrix__Matrix__new__h3160651b727b89ea($3 + 1040 | 0 | 0, $1 | 0, $1 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1) {
       break label$4
      }
      $4 = $3 + 1053 | 0;
      $5 = 0;
      $6 = $3 + 1048 | 0;
      $7 = $3 + 1060 | 0;
      $8 = $3 + 1056 | 0;
      label$5 : while (1) {
       $9 = HEAP32[$6 >> 2] | 0;
       $33 = $9;
       $9 = $9 >>> 0 > 1024 >>> 0;
       $10 = (wasm2js_i32$0 = HEAP32[$7 >> 2] | 0, wasm2js_i32$1 = $33, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       $11 = Math_imul(HEAP32[($3 + 1044 | 0) >> 2] | 0, $5) + $5 | 0;
       if ($10 >>> 0 <= $11 >>> 0) {
        break label$3
       }
       HEAP8[((wasm2js_i32$0 = HEAP32[$8 >> 2] | 0, wasm2js_i32$1 = $4, wasm2js_i32$2 = $9, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) + $11 | 0) >> 0] = 1;
       $5 = $5 + 1 | 0;
       if ($5 >>> 0 < $1 >>> 0) {
        continue label$5
       }
       break label$5;
      };
     }
     $5 = memcpy($3 | 0, $3 + 1040 | 0 | 0, 1040 | 0) | 0;
     $9 = __rust_alloc(1048 | 0, 4 | 0) | 0;
     if (!$9) {
      break label$2
     }
     i64toi32_i32$1 = $9;
     i64toi32_i32$0 = 1;
     HEAP32[i64toi32_i32$1 >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     memcpy(i64toi32_i32$1 + 8 | 0 | 0, $5 | 0, 1040 | 0) | 0;
     $11 = $2 + $1 | 0;
     reed_solomon_erasure__inversion_tree__InversionNode__new__h694fd8389a3d8a02($5 | 0, i64toi32_i32$1 | 0, $11 | 0);
     $9 = __rust_alloc(1 | 0, 1 | 0) | 0;
     if (!$9) {
      break label$1
     }
     (wasm2js_i32$0 = $9, wasm2js_i32$1 = std__sys_common__mutex__Mutex__new__h072282c718a449fa() | 0), HEAP8[wasm2js_i32$0 >> 0] = wasm2js_i32$1;
     $3 = std__sys_common__poison__Flag__new__h23cba358f9237c50() | 0;
     i64toi32_i32$2 = $5 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $87 = i64toi32_i32$0;
     i64toi32_i32$0 = $5 + 1051 | 0;
     $20 = $87;
     HEAP8[i64toi32_i32$0 >> 0] = $20;
     HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $20 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $20 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $20 >>> 24 | 0;
     HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     HEAP8[($0 + 4 | 0) >> 0] = $3;
     HEAP32[$0 >> 2] = $9;
     i64toi32_i32$2 = $5;
     i64toi32_i32$1 = HEAP32[$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
     $94 = i64toi32_i32$1;
     i64toi32_i32$1 = $5;
     $21 = $94;
     HEAP8[(i64toi32_i32$1 + 1043 | 0) >> 0] = $21;
     HEAP8[(i64toi32_i32$1 + 1044 | 0) >> 0] = $21 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 1045 | 0) >> 0] = $21 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 1046 | 0) >> 0] = $21 >>> 24 | 0;
     HEAP8[(i64toi32_i32$1 + 1047 | 0) >> 0] = i64toi32_i32$0;
     HEAP8[(i64toi32_i32$1 + 1048 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 1049 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 1050 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$1 + 1040 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1041 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 1042 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 1043 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$1 = HEAPU8[(i64toi32_i32$1 + 1044 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$1 + 1045 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$1 + 1046 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$1 + 1047 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $97 = i64toi32_i32$0;
     i64toi32_i32$0 = $0;
     $22 = $97;
     HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = $22;
     HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = $22 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = $22 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 8 | 0) >> 0] = $22 >>> 24 | 0;
     HEAP8[(i64toi32_i32$0 + 9 | 0) >> 0] = i64toi32_i32$1;
     HEAP8[(i64toi32_i32$0 + 10 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
     HEAP8[(i64toi32_i32$0 + 11 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
     HEAP8[(i64toi32_i32$0 + 12 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
     i64toi32_i32$2 = ($5 + 1040 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $103 = i64toi32_i32$1;
     i64toi32_i32$1 = $0 + 13 | 0;
     $23 = $103;
     HEAP8[i64toi32_i32$1 >> 0] = $23;
     HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $23 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $23 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $23 >>> 24 | 0;
     HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
     HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
     HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
     HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
     $24 = $5 + 1055 | 0;
     $25 = $0 + 20 | 0;
     $26 = HEAPU8[$24 >> 0] | 0 | ((HEAPU8[($24 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($24 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($24 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     HEAP8[$25 >> 0] = $26;
     HEAP8[($25 + 1 | 0) >> 0] = $26 >>> 8 | 0;
     HEAP8[($25 + 2 | 0) >> 0] = $26 >>> 16 | 0;
     HEAP8[($25 + 3 | 0) >> 0] = $26 >>> 24 | 0;
     HEAP32[($0 + 24 | 0) >> 2] = $11;
     global$0 = $5 + 2080 | 0;
     return;
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1120932 | 0, $11 | 0, $10 | 0);
    wasm2js_trap();
   }
   alloc__alloc__handle_alloc_error__h2bf444f047049b0e(1048 | 0, 4 | 0);
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e(1 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_char__h293d457094aaf69a($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 >= 128 >>> 0) {
     break label$2
    }
    label$3 : {
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($3 | 0) != (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $alloc__vec__Vec_T____reserve__hac8beb652f94bb08($0 | 0, 1 | 0);
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP8[((HEAP32[$0 >> 2] | 0) + $3 | 0) >> 0] = $1;
    $0 = $0 + 8 | 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   HEAP32[($2 + 12 | 0) >> 2] = 0;
   label$4 : {
    label$5 : {
     if ($1 >>> 0 >= 2048 >>> 0) {
      break label$5
     }
     HEAP8[($2 + 13 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
     HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 6 | 0) & 31 | 0 | 192 | 0;
     $1 = 2;
     break label$4;
    }
    label$6 : {
     if ($1 >>> 0 > 65535 >>> 0) {
      break label$6
     }
     HEAP8[($2 + 14 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
     HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     HEAP8[($2 + 12 | 0) >> 0] = ($1 >>> 12 | 0) & 15 | 0 | 224 | 0;
     $1 = 3;
     break label$4;
    }
    HEAP8[($2 + 15 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
    HEAP8[($2 + 12 | 0) >> 0] = $1 >>> 18 | 0 | 240 | 0;
    HEAP8[($2 + 14 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
    HEAP8[($2 + 13 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
    $1 = 4;
   }
   $alloc__vec__Vec_T____reserve__hac8beb652f94bb08($0 | 0, $1 | 0);
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = $3 + $1 | 0;
   memcpy($3 + (HEAP32[$0 >> 2] | 0) | 0 | 0, $2 + 12 | 0 | 0, $1 | 0) | 0;
  }
  global$0 = $2 + 16 | 0;
  return 0 | 0;
 }
 
 function core__fmt__num__imp__fmt_u64__hc393e337ab9bae99($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$2 = 0, $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $8 = 0, i64toi32_i32$3 = 0, $8$hi = 0, i64toi32_i32$5 = 0, $6 = 0, $7 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $24 = 0, $24$hi = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = 39;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1e4;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    $4 = 39;
    label$3 : while (1) {
     $5 = ($3 + 9 | 0) + $4 | 0;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 1e4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$0 = __wasm_i64_mul($8 | 0, i64toi32_i32$2 | 0, 1e4 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$0;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$1 = $24;
     i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     $6 = $0 - i64toi32_i32$1 | 0;
     $7 = ($6 >>> 0) / (100 >>> 0) | 0;
     $18 = ($7 << 1 | 0) + 1117332 | 0;
     $19 = $5 + -4 | 0;
     $20 = HEAPU8[$18 >> 0] | 0 | ((HEAPU8[($18 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[$19 >> 0] = $20;
     HEAP8[($19 + 1 | 0) >> 0] = $20 >>> 8 | 0;
     $21 = (($6 - Math_imul($7, 100) | 0) << 1 | 0) + 1117332 | 0;
     $22 = $5 + -2 | 0;
     $23 = HEAPU8[$21 >> 0] | 0 | ((HEAPU8[($21 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
     HEAP8[$22 >> 0] = $23;
     HEAP8[($22 + 1 | 0) >> 0] = $23 >>> 8 | 0;
     $4 = $4 + -4 | 0;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$2 = $0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 99999999;
     $5 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $8$hi;
     $0 = $8;
     $0$hi = i64toi32_i32$2;
     if ($5) {
      continue label$3
     }
     break label$1;
    };
   }
   i64toi32_i32$2 = $0$hi;
   $8 = $0;
   $8$hi = i64toi32_i32$2;
  }
  label$4 : {
   i64toi32_i32$2 = $8$hi;
   $5 = $8;
   if (($5 | 0) <= (99 | 0)) {
    break label$4
   }
   $4 = $4 + -2 | 0;
   i64toi32_i32$2 = $8$hi;
   $5 = $8;
   $5 = (($5 & 65535 | 0) >>> 0) / (100 >>> 0) | 0;
   $25 = ((($8 - Math_imul($5, 100) | 0) & 65535 | 0) << 1 | 0) + 1117332 | 0;
   $26 = ($3 + 9 | 0) + $4 | 0;
   $27 = HEAPU8[$25 >> 0] | 0 | ((HEAPU8[($25 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$26 >> 0] = $27;
   HEAP8[($26 + 1 | 0) >> 0] = $27 >>> 8 | 0;
  }
  label$5 : {
   label$6 : {
    if (($5 | 0) > (9 | 0)) {
     break label$6
    }
    $4 = $4 + -1 | 0;
    HEAP8[(($3 + 9 | 0) + $4 | 0) >> 0] = $5 + 48 | 0;
    break label$5;
   }
   $4 = $4 + -2 | 0;
   $28 = ($5 << 1 | 0) + 1117332 | 0;
   $29 = ($3 + 9 | 0) + $4 | 0;
   $30 = HEAPU8[$28 >> 0] | 0 | ((HEAPU8[($28 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$29 >> 0] = $30;
   HEAP8[($29 + 1 | 0) >> 0] = $30 >>> 8 | 0;
  }
  $4 = core__fmt__Formatter__pad_integral__hb936e47a334d7e83($2 | 0, $1 | 0, 1116968 | 0, 0 | 0, ($3 + 9 | 0) + $4 | 0 | 0, 39 - $4 | 0 | 0) | 0;
  global$0 = $3 + 48 | 0;
  return $4 | 0;
 }
 
 function reed_solomon_erasure__inversion_tree__InversionNode__new__h694fd8389a3d8a02($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, $4 = 0, i64toi32_i32$2 = 0, $8 = 0, $10 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10$hi = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         i64toi32_i32$0 = 0;
         $10 = $2;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$2 = $2;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 28;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = 0;
          $17 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
          $17 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
         }
         if ($17) {
          break label$7
         }
         i64toi32_i32$1 = $10$hi;
         i64toi32_i32$0 = $10;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 4;
         i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
          $18 = 0;
         } else {
          i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
          $18 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         }
         $3 = $18;
         if (($3 | 0) <= (-1 | 0)) {
          break label$6
         }
         label$8 : {
          label$9 : {
           if (!$3) {
            break label$9
           }
           $4 = __rust_alloc($3 | 0, 4 | 0) | 0;
           if (!$4) {
            break label$5
           }
           if (!$2) {
            break label$8
           }
           break label$4;
          }
          $4 = 4;
          if ($2) {
           break label$4
          }
         }
         $3 = 0;
         $8 = 0;
         break label$3;
        }
        $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
        wasm2js_trap();
       }
       $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
       wasm2js_trap();
      }
      alloc__alloc__handle_alloc_error__h2bf444f047049b0e($3 | 0, 4 | 0);
      wasm2js_trap();
     }
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = $2;
     label$10 : while (1) {
      $3 = $7 + 1 | 0;
      label$11 : {
       if (($7 | 0) != ($8 | 0)) {
        break label$11
       }
       $8 = $3 >>> 0 < $6 >>> 0 ? $6 : $3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = $8;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 4;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $19 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $19 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $10 = $19;
       $10$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $10;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $20 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($20) {
        break label$2
       }
       i64toi32_i32$1 = $10$hi;
       $9 = $10;
       if (($9 | 0) < (0 | 0)) {
        break label$2
       }
       label$12 : {
        if (!$7) {
         break label$12
        }
        $4 = __rust_realloc($4 | 0, $5 | 0, 4 | 0, $9 | 0) | 0;
        if ($4) {
         break label$11
        }
        break label$1;
       }
       $4 = __rust_alloc($9 | 0, 4 | 0) | 0;
       if (!$4) {
        break label$1
       }
      }
      HEAP32[(($4 + $5 | 0) + 4 | 0) >> 2] = 0;
      $5 = $5 + 16 | 0;
      $6 = $6 + 2 | 0;
      $7 = $3;
      if ($3 >>> 0 < $2 >>> 0) {
       continue label$10
      }
      break label$10;
     };
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4;
    HEAP32[$0 >> 2] = $1;
    HEAP32[($0 + 12 | 0) >> 2] = $3;
    HEAP32[($0 + 8 | 0) >> 2] = $8;
    return;
   }
   alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($9 | 0, 4 | 0);
  wasm2js_trap();
 }
 
 function core__fmt__num___impl_20core__fmt__Debug_20for_20usize___fmt__h5d401cd14a20c5ac($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0, i64toi32_i32$0 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $3 = HEAP32[$1 >> 2] | 0;
       if ($3 & 16 | 0) {
        break label$5
       }
       $4 = HEAP32[$0 >> 2] | 0;
       if ($3 & 32 | 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $0 = core__fmt__num__imp__fmt_u64__hc393e337ab9bae99($4 | 0, i64toi32_i32$0 | 0, 1 | 0, $1 | 0) | 0;
       break label$3;
      }
      $4 = HEAP32[$0 >> 2] | 0;
      $0 = 0;
      label$6 : while (1) {
       $3 = $4 & 15 | 0;
       HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $3 >>> 0 < 10 >>> 0 ? $3 | 48 | 0 : $3 + 87 | 0;
       $0 = $0 + -1 | 0;
       $4 = $4 >>> 4 | 0;
       if ($4) {
        continue label$6
       }
       break label$6;
      };
      $4 = $0 + 128 | 0;
      if ($4 >>> 0 >= 129 >>> 0) {
       break label$2
      }
      $0 = core__fmt__Formatter__pad_integral__hb936e47a334d7e83($1 | 0, 1 | 0, 1117330 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
      break label$3;
     }
     $0 = 0;
     label$7 : while (1) {
      $3 = $4 & 15 | 0;
      HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $3 >>> 0 < 10 >>> 0 ? $3 | 48 | 0 : $3 + 55 | 0;
      $0 = $0 + -1 | 0;
      $4 = $4 >>> 4 | 0;
      if ($4) {
       continue label$7
      }
      break label$7;
     };
     $4 = $0 + 128 | 0;
     if ($4 >>> 0 >= 129 >>> 0) {
      break label$1
     }
     $0 = core__fmt__Formatter__pad_integral__hb936e47a334d7e83($1 | 0, 1 | 0, 1117330 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
    }
    global$0 = $2 + 128 | 0;
    return $0 | 0;
   }
   core__slice__slice_index_order_fail__hdebcacf34982bb52($4 | 0, 128 | 0);
   wasm2js_trap();
  }
  core__slice__slice_index_order_fail__hdebcacf34982bb52($4 | 0, 128 | 0);
  wasm2js_trap();
 }
 
 function wee_alloc__WeeAlloc__dealloc_impl___7b_7bclosure_7d_7d__hec80e80c0c589b86($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = HEAP32[$0 >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  $0 = $4 + -8 | 0;
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) & -2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!(FUNCTION_TABLE[HEAP32[($3 + 20 | 0) >> 2] | 0 | 0]($2) | 0)) {
       break label$4
      }
      label$5 : {
       $3 = $4 + -4 | 0;
       $2 = (HEAP32[$3 >> 2] | 0) & -4 | 0;
       if (!$2) {
        break label$5
       }
       $5 = HEAP32[$2 >> 2] | 0;
       if ($5 & 1 | 0) {
        break label$5
       }
       $1 = HEAP32[$0 >> 2] | 0;
       $4 = $1 & -4 | 0;
       if (!$4) {
        break label$3
       }
       if ($1 & 2 | 0) {
        break label$3
       }
       HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) & 3 | 0 | $2 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       $1 = $4 & -4 | 0;
       if (!$1) {
        break label$1
       }
       $4 = (HEAP32[$0 >> 2] | 0) & -4 | 0;
       $5 = HEAP32[$1 >> 2] | 0;
       break label$2;
      }
      $2 = HEAP32[$0 >> 2] | 0;
      $3 = $2 & -4 | 0;
      if (!$3) {
       break label$4
      }
      if ($2 & 2 | 0) {
       break label$4
      }
      if ((HEAPU8[$3 >> 0] | 0) & 1 | 0) {
       break label$4
      }
      HEAP32[$4 >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) & -4 | 0;
      HEAP32[($3 + 8 | 0) >> 2] = $0 | 1 | 0;
      return;
     }
     HEAP32[$4 >> 2] = HEAP32[$1 >> 2] | 0;
     HEAP32[$1 >> 2] = $0;
     return;
    }
    $1 = $2;
   }
   HEAP32[$1 >> 2] = $5 & 3 | 0 | $4 | 0;
   $4 = HEAP32[$3 >> 2] | 0;
  }
  HEAP32[$3 >> 2] = $4 & 3 | 0;
  $4 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $4 & 3 | 0;
  label$6 : {
   if (!($4 & 2 | 0)) {
    break label$6
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 0 | 2 | 0;
  }
 }
 
 function $std__panicking__continue_panic_fmt__PanicPayload__a__20as_20core__panic__BoxMeUp___box_me_up__h8d57c67b0c8f15fc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $6 = 0, $25 = 0, $32 = 0, $35 = 0, $46 = 0, $62 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  label$1 : {
   $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
   if ($3) {
    break label$1
   }
   $3 = HEAP32[$1 >> 2] | 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 1;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 20 | 0) >> 2] = $2 + 8 | 0;
   i64toi32_i32$2 = $3 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $4 = ($2 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $3 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[i64toi32_i32$1 >> 2] = $32;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $35 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $35;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   core__fmt__write__h822cd2648d8eacf5($2 + 20 | 0 | 0, 1121204 | 0, $2 + 24 | 0 | 0) | 0;
   HEAP32[$4 >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $46 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $46;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    $3 = $1 + 4 | 0;
    $5 = HEAP32[$3 >> 2] | 0;
    if (!$5) {
     break label$2
    }
    $6 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$6) {
     break label$2
    }
    __rust_dealloc($5 | 0, $6 | 0, 1 | 0);
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   $62 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $62;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
   $3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  }
  HEAP32[($1 + 4 | 0) >> 2] = 1;
  $4 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $1 = $1 + 8 | 0;
  $5 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$0 = $1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$3 : {
   $1 = __rust_alloc(12 | 0, 4 | 0) | 0;
   if (!$1) {
    break label$3
   }
   HEAP32[($1 + 8 | 0) >> 2] = $4;
   HEAP32[($1 + 4 | 0) >> 2] = $5;
   HEAP32[$1 >> 2] = $3;
   HEAP32[($0 + 4 | 0) >> 2] = 1121264;
   HEAP32[$0 >> 2] = $1;
   global$0 = $2 + 48 | 0;
   return;
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e(12 | 0, 4 | 0);
  wasm2js_trap();
 }
 
 function core__unicode__bool_trie__BoolTrie__lookup__h0292b62b164623f4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $13 = 0, $72 = 0, $72$hi = 0, $75$hi = 0, $76$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1 >>> 0 >= 2048 >>> 0) {
          break label$7
         }
         $0 = $0 + (($1 >>> 3 | 0) & 536870904 | 0) | 0;
         break label$6;
        }
        label$8 : {
         if ($1 >>> 0 >= 65536 >>> 0) {
          break label$8
         }
         $2 = ($1 >>> 6 | 0) + -32 | 0;
         if ($2 >>> 0 >= 992 >>> 0) {
          break label$5
         }
         $3 = HEAP32[($0 + 260 | 0) >> 2] | 0;
         $2 = HEAPU8[(($0 + $2 | 0) + 280 | 0) >> 0] | 0;
         if ($3 >>> 0 <= $2 >>> 0) {
          break label$4
         }
         $0 = (HEAP32[($0 + 256 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
         break label$6;
        }
        $2 = ($1 >>> 12 | 0) + -16 | 0;
        if ($2 >>> 0 >= 256 >>> 0) {
         break label$3
        }
        $2 = (HEAPU8[(($0 + $2 | 0) + 1272 | 0) >> 0] | 0) << 6 | 0 | (($1 >>> 6 | 0) & 63 | 0) | 0;
        $3 = HEAP32[($0 + 268 | 0) >> 2] | 0;
        if ($2 >>> 0 >= $3 >>> 0) {
         break label$2
        }
        $3 = HEAP32[($0 + 276 | 0) >> 2] | 0;
        $2 = HEAPU8[((HEAP32[($0 + 264 | 0) >> 2] | 0) + $2 | 0) >> 0] | 0;
        if ($3 >>> 0 <= $2 >>> 0) {
         break label$1
        }
        $0 = (HEAP32[($0 + 272 | 0) >> 2] | 0) + ($2 << 3 | 0) | 0;
       }
       i64toi32_i32$2 = $0;
       i64toi32_i32$0 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $72 = i64toi32_i32$0;
       $72$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $75$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$0 = $75$hi;
       i64toi32_i32$3 = $1 & 63 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $13 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $13 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $76$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $72$hi;
       i64toi32_i32$1 = $72;
       i64toi32_i32$2 = $76$hi;
       i64toi32_i32$3 = $13;
       i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       return (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0 | 0;
      }
      core__panicking__panic_bounds_check__h273e49a380d01fb7(1121616 | 0, $2 | 0, 992 | 0);
      wasm2js_trap();
     }
     core__panicking__panic_bounds_check__h273e49a380d01fb7(1121632 | 0, $2 | 0, $3 | 0);
     wasm2js_trap();
    }
    core__panicking__panic_bounds_check__h273e49a380d01fb7(1121648 | 0, $2 | 0, 256 | 0);
    wasm2js_trap();
   }
   core__panicking__panic_bounds_check__h273e49a380d01fb7(1121664 | 0, $2 | 0, $3 | 0);
   wasm2js_trap();
  }
  core__panicking__panic_bounds_check__h273e49a380d01fb7(1121680 | 0, $2 | 0, $3 | 0);
  wasm2js_trap();
 }
 
 function $smallvec__SmallVec_A____grow__h383ea6e3b3c827e0($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, $5 = 0, $3 = 0, i64toi32_i32$0 = 0, $2 = 0, $4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6 = 0, $7 = 0, $15 = 0, $16 = 0, $8 = 0, $8$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = HEAP32[$0 >> 2] | 0;
      $3 = $2 >>> 0 > 32 >>> 0;
      $4 = (wasm2js_i32$0 = HEAP32[($0 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $2, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      if ($4 >>> 0 > $1 >>> 0) {
       break label$4
      }
      $5 = $0 + 8 | 0;
      $6 = (wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$1 = $5, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $3 = $3 ? $2 : 32;
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1 >>> 0 > 32 >>> 0) {
          break label$7
         }
         if ($2 >>> 0 <= 32 >>> 0) {
          break label$5
         }
         HEAP32[($0 + 4 | 0) >> 2] = 0;
         memcpy($5 | 0, $6 | 0, $4 << 2 | 0 | 0) | 0;
         HEAP32[$0 >> 2] = $4;
         if ($3) {
          break label$6
         }
         break label$5;
        }
        if (($3 | 0) == ($1 | 0)) {
         break label$5
        }
        i64toi32_i32$0 = 0;
        $8 = $1;
        $8$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 30;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = 0;
         $15 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        } else {
         i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
         $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
        }
        if ($15) {
         break label$3
        }
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$0 = $8;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 2;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $16 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
         $16 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $5 = $16;
        if (($5 | 0) <= (-1 | 0)) {
         break label$2
        }
        $7 = 4;
        label$8 : {
         if (!$5) {
          break label$8
         }
         $7 = __rust_alloc($5 | 0, 4 | 0) | 0;
         if (!$7) {
          break label$1
         }
        }
        $5 = memcpy($7 | 0, $6 | 0, $4 << 2 | 0 | 0) | 0;
        HEAP32[($0 + 12 | 0) >> 2] = $4;
        HEAP32[($0 + 8 | 0) >> 2] = $5;
        HEAP32[($0 + 4 | 0) >> 2] = 1;
        HEAP32[$0 >> 2] = $1;
        if ($2 >>> 0 < 33 >>> 0) {
         break label$5
        }
        if (!$3) {
         break label$5
        }
       }
       __rust_dealloc($6 | 0, $3 << 2 | 0 | 0, 4 | 0);
      }
      return;
     }
     std__panicking__begin_panic__h2418fa6fbb16e3a8(1049747 | 0, 32 | 0, 1121028 | 0);
     wasm2js_trap();
    }
    $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($5 | 0, 4 | 0);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__matrix__Matrix__new__h3160651b727b89ea($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $6 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $8 = 0;
  $3 = global$0 - 2048 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $4 = Math_imul($2, $1);
    if (($4 | 0) <= (-1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$4) {
        break label$5
       }
       $5 = 1;
       $6 = __rust_alloc_zeroed($4 | 0, 1 | 0) | 0;
       if (!$6) {
        break label$1
       }
       $7 = $4;
       if ($4 >>> 0 <= 1024 >>> 0) {
        break label$4
       }
       break label$3;
      }
      $6 = 1;
     }
     memcpy($3 + 1021 | 0 | 0, $6 | 0, $4 | 0) | 0;
     HEAP8[(($3 + 1018 | 0) + 2 | 0) >> 0] = HEAPU8[(($3 + 1021 | 0) + 2 | 0) >> 0] | 0;
     HEAP16[($3 + 1018 | 0) >> 1] = HEAPU8[($3 + 1021 | 0) >> 0] | 0 | ((HEAPU8[($3 + 1022 | 0) >> 0] | 0) << 8 | 0) | 0;
     $8 = HEAPU8[($3 + 1024 | 0) >> 0] | 0 | ((HEAPU8[($3 + 1025 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 1026 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 1027 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     $7 = HEAPU8[($3 + 1028 | 0) >> 0] | 0 | ((HEAPU8[($3 + 1029 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 1030 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 1031 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     memcpy($3 | 0, $3 + 1032 | 0 | 0, 1016 | 0) | 0;
     $5 = 0;
     label$6 : {
      if (!$4) {
       break label$6
      }
      __rust_dealloc($6 | 0, $4 | 0, 1 | 0);
     }
     $6 = $8;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $4;
    HEAP32[($0 + 4 | 0) >> 2] = $2;
    HEAP32[$0 >> 2] = $1;
    HEAP8[($0 + 12 | 0) >> 0] = $5;
    $9 = $0 + 13 | 0;
    $10 = HEAPU16[($3 + 1018 | 0) >> 1] | 0;
    HEAP8[$9 >> 0] = $10;
    HEAP8[($9 + 1 | 0) >> 0] = $10 >>> 8 | 0;
    HEAP32[($0 + 20 | 0) >> 2] = $7;
    HEAP32[($0 + 16 | 0) >> 2] = $6;
    HEAP8[($0 + 15 | 0) >> 0] = HEAPU8[($3 + 1020 | 0) >> 0] | 0;
    memcpy($0 + 24 | 0 | 0, $3 | 0, 1016 | 0) | 0;
    global$0 = $3 + 2048 | 0;
    return;
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e($4 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function $smallvec__SmallVec_A____grow__hda194786982433d3($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, $5 = 0, $3 = 0, i64toi32_i32$0 = 0, $2 = 0, $4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6 = 0, $7 = 0, $15 = 0, $16 = 0, $8 = 0, $8$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[$0 >> 2] | 0;
     $3 = $2 >>> 0 > 32 >>> 0;
     $4 = (wasm2js_i32$0 = HEAP32[($0 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $2, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     if ($4 >>> 0 > $1 >>> 0) {
      break label$3
     }
     $5 = $0 + 8 | 0;
     $6 = (wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$1 = $5, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     $3 = $3 ? $2 : 32;
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1 >>> 0 > 32 >>> 0) {
         break label$6
        }
        if ($2 >>> 0 <= 32 >>> 0) {
         break label$4
        }
        HEAP32[($0 + 4 | 0) >> 2] = 0;
        memcpy($5 | 0, $6 | 0, $4 << 3 | 0 | 0) | 0;
        HEAP32[$0 >> 2] = $4;
        if ($3) {
         break label$5
        }
        break label$4;
       }
       if (($3 | 0) == ($1 | 0)) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $8 = $1;
       $8$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 29;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $15 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($15) {
        break label$2
       }
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$0 = $8;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 3;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $16 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $16 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $5 = $16;
       if (($5 | 0) <= (-1 | 0)) {
        break label$1
       }
       label$7 : {
        label$8 : {
         if (!$5) {
          break label$8
         }
         $7 = __rust_alloc($5 | 0, 4 | 0) | 0;
         if ($7) {
          break label$7
         }
         alloc__alloc__handle_alloc_error__h2bf444f047049b0e($5 | 0, 4 | 0);
         wasm2js_trap();
        }
        $7 = 4;
       }
       $5 = memcpy($7 | 0, $6 | 0, $4 << 3 | 0 | 0) | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($0 + 8 | 0) >> 2] = $5;
       HEAP32[($0 + 4 | 0) >> 2] = 1;
       HEAP32[$0 >> 2] = $1;
       if ($2 >>> 0 < 33 >>> 0) {
        break label$4
       }
       if (!$3) {
        break label$4
       }
      }
      __rust_dealloc($6 | 0, $3 << 3 | 0 | 0, 4 | 0);
     }
     return;
    }
    std__panicking__begin_panic__h2418fa6fbb16e3a8(1049747 | 0, 32 | 0, 1121028 | 0);
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
  wasm2js_trap();
 }
 
 function $smallvec__SmallVec_A____grow__hb1d87153157c9a98($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, $5 = 0, $3 = 0, i64toi32_i32$0 = 0, $2 = 0, $4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6 = 0, $7 = 0, $15 = 0, $16 = 0, $8 = 0, $8$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[$0 >> 2] | 0;
     $3 = $2 >>> 0 > 32 >>> 0;
     $4 = (wasm2js_i32$0 = HEAP32[($0 + 12 | 0) >> 2] | 0, wasm2js_i32$1 = $2, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     if ($4 >>> 0 > $1 >>> 0) {
      break label$3
     }
     $5 = $0 + 8 | 0;
     $6 = (wasm2js_i32$0 = HEAP32[$5 >> 2] | 0, wasm2js_i32$1 = $5, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     $3 = $3 ? $2 : 32;
     label$4 : {
      label$5 : {
       label$6 : {
        if ($1 >>> 0 > 32 >>> 0) {
         break label$6
        }
        if ($2 >>> 0 <= 32 >>> 0) {
         break label$4
        }
        HEAP32[($0 + 4 | 0) >> 2] = 0;
        memcpy($5 | 0, $6 | 0, $4 << 3 | 0 | 0) | 0;
        HEAP32[$0 >> 2] = $4;
        if ($3) {
         break label$5
        }
        break label$4;
       }
       if (($3 | 0) == ($1 | 0)) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $8 = $1;
       $8$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 29;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $15 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $15 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       if ($15) {
        break label$2
       }
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$0 = $8;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 3;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        $16 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $16 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
       }
       $5 = $16;
       if (($5 | 0) <= (-1 | 0)) {
        break label$1
       }
       label$7 : {
        label$8 : {
         if (!$5) {
          break label$8
         }
         $7 = __rust_alloc($5 | 0, 4 | 0) | 0;
         if ($7) {
          break label$7
         }
         alloc__alloc__handle_alloc_error__h2bf444f047049b0e($5 | 0, 4 | 0);
         wasm2js_trap();
        }
        $7 = 4;
       }
       $5 = memcpy($7 | 0, $6 | 0, $4 << 3 | 0 | 0) | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($0 + 8 | 0) >> 2] = $5;
       HEAP32[($0 + 4 | 0) >> 2] = 1;
       HEAP32[$0 >> 2] = $1;
       if ($2 >>> 0 < 33 >>> 0) {
        break label$4
       }
       if (!$3) {
        break label$4
       }
      }
      __rust_dealloc($6 | 0, $3 << 3 | 0 | 0, 4 | 0);
     }
     return;
    }
    std__panicking__begin_panic__h2418fa6fbb16e3a8(1049747 | 0, 32 | 0, 1121028 | 0);
    wasm2js_trap();
   }
   $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
   wasm2js_trap();
  }
  $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098();
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__inversion_tree__InversionTree__insert_inverted_matrix__h21d4b53dbc33c1b2($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $8 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$2) {
       break label$4
      }
      $4 = 1;
      label$5 : {
       $5 = HEAP32[$3 >> 2] | 0;
       if ((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 12 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       $3 = HEAP32[$0 >> 2] | 0;
       if (HEAPU8[$3 >> 0] | 0) {
        break label$3
       }
       HEAP8[$3 >> 0] = 1;
       $6 = std__panicking__panicking__hd25645a73a60f14b() | 0;
       if (HEAPU8[($0 + 4 | 0) >> 0] | 0) {
        break label$2
       }
       $3 = $0 + 8 | 0;
       $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $4 = 0;
       label$6 : while (1) {
        $8 = HEAP32[$1 >> 2] | 0;
        $3 = reed_solomon_erasure__inversion_tree__InversionNode__get_child__he53488bd3d402e2d($3 | 0, $4 | 0, $8 | 0, $7 | 0) | 0;
        $1 = $1 + 4 | 0;
        $4 = $8 + 1 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue label$6
        }
        break label$6;
       };
       $1 = HEAP32[$5 >> 2] | 0;
       HEAP32[$5 >> 2] = $1 + 1 | 0;
       if (($1 | 0) <= (-1 | 0)) {
        break label$1
       }
       label$7 : {
        $1 = HEAP32[$3 >> 2] | 0;
        if (!$1) {
         break label$7
        }
        $2 = HEAP32[$1 >> 2] | 0;
        HEAP32[$1 >> 2] = $2 + -1 | 0;
        if (($2 | 0) != (1 | 0)) {
         break label$7
        }
        $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($3 | 0);
       }
       HEAP32[$3 >> 2] = $5;
       label$8 : {
        if ($6) {
         break label$8
        }
        if (!(std__panicking__panicking__hd25645a73a60f14b() | 0)) {
         break label$8
        }
        HEAP8[($0 + 4 | 0) >> 0] = 1;
       }
       HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] = 0;
       $4 = 2;
      }
      return $4 | 0;
     }
     return 0 | 0;
    }
    std__panicking__begin_panic__h2418fa6fbb16e3a8(1116370 | 0, 32 | 0, 1121116 | 0);
    wasm2js_trap();
   }
   core__result__unwrap_failed__hf92ddcde0bda805c(1116402 | 0, 43 | 0, $0 | 0, $6 | 0);
   wasm2js_trap();
  }
  wasm2js_trap();
 }
 
 function std__panicking__rust_panic_with_hook__hb71d5fe4dc6cebd3($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5 = 0, i64toi32_i32$2 = 0, $6 = 0, $7 = 0, $8 = 0, $37 = 0, $44 = 0, $62 = 0;
  $4 = global$0 - 64 | 0;
  global$0 = $4;
  $5 = 1;
  $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $7 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $8 = HEAP32[($3 + 4 | 0) >> 2] | 0;
  $3 = HEAP32[$3 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ((HEAP32[(0 + 1124296 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break label$4
      }
      $5 = (HEAP32[(0 + 1124300 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[(0 + 1124300 | 0) >> 2] = $5;
      if ($5 >>> 0 < 3 >>> 0) {
       break label$3
      }
      break label$2;
     }
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     HEAP32[(i64toi32_i32$1 + 1124296 | 0) >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 1124300 | 0) >> 2] = i64toi32_i32$0;
    }
    core__panic__Location__internal_constructor__he6e551b090ce3652($4 + 48 | 0 | 0, $3 | 0, $8 | 0, $7 | 0, $6 | 0);
    i64toi32_i32$2 = $4 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 36 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4 + 24 | 0) >> 2] = $2;
    HEAP32[($4 + 20 | 0) >> 2] = 1121228;
    HEAP32[($4 + 16 | 0) >> 2] = 1116864;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 52 | 0) >> 2] | 0;
    $44 = i64toi32_i32$1;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 28 | 0) >> 2] = $44;
    HEAP32[($4 + 32 | 0) >> 2] = i64toi32_i32$0;
    $3 = HEAP32[(0 + 1124284 | 0) >> 2] | 0;
    if (($3 | 0) <= (-1 | 0)) {
     break label$2
    }
    $3 = $3 + 1 | 0;
    HEAP32[(0 + 1124284 | 0) >> 2] = $3;
    label$5 : {
     $2 = HEAP32[(0 + 1124292 | 0) >> 2] | 0;
     if (!$2) {
      break label$5
     }
     $3 = HEAP32[(0 + 1124288 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[($1 + 16 | 0) >> 2] | 0 | 0]($4 + 8 | 0, $0);
     i64toi32_i32$2 = $4;
     i64toi32_i32$0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $62 = i64toi32_i32$0;
     i64toi32_i32$0 = $4;
     HEAP32[($4 + 16 | 0) >> 2] = $62;
     HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
     FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($3, $4 + 16 | 0);
     $3 = HEAP32[(0 + 1124284 | 0) >> 2] | 0;
    }
    HEAP32[(0 + 1124284 | 0) >> 2] = $3 + -1 | 0;
    if ($5 >>> 0 < 2 >>> 0) {
     break label$1
    }
   }
   wasm2js_trap();
  }
  rust_panic($0 | 0, $1 | 0);
  wasm2js_trap();
 }
 
 function $reed_solomon_erasure__errors__Error_20as_20core__fmt__Debug___fmt__heefe8a5ab0558bc9($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               $0 = (HEAPU8[$0 >> 0] | 0) + -1 | 0;
               if ($0 >>> 0 > 11 >>> 0) {
                break label$13
               }
               label$14 : {
                switch ($0 | 0) {
                case 3:
                 break label$10;
                case 2:
                 break label$11;
                case 1:
                 break label$12;
                case 11:
                 break label$2;
                case 10:
                 break label$3;
                case 9:
                 break label$4;
                case 8:
                 break label$5;
                case 7:
                 break label$6;
                case 6:
                 break label$7;
                case 5:
                 break label$8;
                case 4:
                 break label$9;
                default:
                 break label$14;
                };
               }
               core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116839 | 0, 13 | 0);
               break label$1;
              }
              core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116852 | 0, 12 | 0);
              break label$1;
             }
             core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116823 | 0, 16 | 0);
             break label$1;
            }
            core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116806 | 0, 17 | 0);
            break label$1;
           }
           core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116788 | 0, 18 | 0);
           break label$1;
          }
          core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116769 | 0, 19 | 0);
          break label$1;
         }
         core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116751 | 0, 18 | 0);
         break label$1;
        }
        core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116732 | 0, 19 | 0);
        break label$1;
       }
       core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116714 | 0, 18 | 0);
       break label$1;
      }
      core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116695 | 0, 19 | 0);
      break label$1;
     }
     core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116685 | 0, 10 | 0);
     break label$1;
    }
    core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116668 | 0, 17 | 0);
    break label$1;
   }
   core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116656 | 0, 12 | 0);
  }
  $1 = core__fmt__builders__DebugTuple__finish__h368649cc8b3a0c1e($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____new_cell_for_free_list__hb001aab1fbafe07a($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  $5 = HEAP32[$1 >> 2] | 0;
  HEAP32[($4 + 12 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = $2 + 2 | 0;
     $2 = Math_imul($2, $2);
     $1 = $2 >>> 0 > 2048 >>> 0 ? $2 : 2048;
     $2 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, 4 | 0, $4 + 12 | 0 | 0, 1048835 | 0, 1120576 | 0) | 0;
     if (!$2) {
      break label$3
     }
     HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
     break label$2;
    }
    $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____new_cell_for_free_list__h3f00889d138eb76f($4 | 0, 1048835 | 0, $1 | 0, 4 | 0);
    label$4 : {
     label$5 : {
      if (!(HEAP32[$4 >> 2] | 0)) {
       break label$5
      }
      HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
      break label$4;
     }
     $2 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
     HEAP32[($4 + 12 | 0) >> 2] = $2;
     $2 = wee_alloc__alloc_first_fit__h9a598dd039cbf670($1 | 0, 4 | 0, $4 + 12 | 0 | 0, 1048835 | 0, 1120576 | 0) | 0;
     HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
     if ($2) {
      break label$2
     }
    }
    $1 = 1;
    break label$1;
   }
   HEAP32[($2 + 4 | 0) >> 2] = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 0;
   HEAP32[$2 >> 2] = $2 + ($1 << 2 | 0) | 0 | 2 | 0;
   $1 = 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
  global$0 = $4 + 16 | 0;
 }
 
 function $std__panicking__continue_panic_fmt__PanicPayload__a__20as_20core__panic__BoxMeUp___get__he14c66d3771d7b8c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $3 = 0, $5 = 0, $25 = 0, $32 = 0, $35 = 0, $46 = 0, $60 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  $3 = $1 + 4 | 0;
  label$1 : {
   if (HEAP32[($1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   $4 = HEAP32[$1 >> 2] | 0;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 1;
   HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($2 + 20 | 0) >> 2] = $2 + 8 | 0;
   i64toi32_i32$2 = $4 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25 = i64toi32_i32$0;
   i64toi32_i32$0 = ($2 + 24 | 0) + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $5 = ($2 + 24 | 0) + 8 | 0;
   i64toi32_i32$2 = $4 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[i64toi32_i32$1 >> 2] = $32;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $35 = i64toi32_i32$0;
   i64toi32_i32$0 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $35;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$1;
   core__fmt__write__h822cd2648d8eacf5($2 + 20 | 0 | 0, 1121204 | 0, $2 + 24 | 0 | 0) | 0;
   HEAP32[$5 >> 2] = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   $46 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[($2 + 24 | 0) >> 2] = $46;
   HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
   label$2 : {
    $4 = HEAP32[$3 >> 2] | 0;
    if (!$4) {
     break label$2
    }
    $1 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    if (!$1) {
     break label$2
    }
    __rust_dealloc($4 | 0, $1 | 0, 1 | 0);
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[($2 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2 + 28 | 0) >> 2] | 0;
   $60 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $60;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 1121264;
  HEAP32[$0 >> 2] = $3;
  global$0 = $2 + 48 | 0;
 }
 
 function core__fmt__builders__DebugTuple__finish__h368649cc8b3a0c1e($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = HEAPU8[($0 + 8 | 0) >> 0] | 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   $3 = $1 & 255 | 0;
   $1 = 1;
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if (!((HEAPU8[$3 >> 0] | 0) & 4 | 0)) {
      break label$3
     }
     $1 = 1;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($3 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3 + 24 | 0) >> 2] | 0, 1117533, 1) | 0) {
      break label$2
     }
     $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    }
    label$4 : {
     if (($2 | 0) != (1 | 0)) {
      break label$4
     }
     if (!(HEAPU8[($0 + 9 | 0) >> 0] | 0)) {
      break label$4
     }
     $1 = 1;
     $3 = HEAP32[$0 >> 2] | 0;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($3 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($3 + 24 | 0) >> 2] | 0, 1117532, 1) | 0) {
      break label$2
     }
    }
    $1 = HEAP32[$0 >> 2] | 0;
    $1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, 1117534, 1) | 0;
   }
   HEAP8[($0 + 8 | 0) >> 0] = $1;
  }
  return ($1 & 255 | 0 | 0) != (0 | 0) | 0;
 }
 
 function $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___dealloc__hb140c1ea270fb2a9($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    HEAP32[($4 + 4 | 0) >> 2] = $1;
    if (!$2) {
     break label$2
    }
    if ($3 >>> 0 > 4 >>> 0) {
     break label$1
    }
    $1 = (($2 + 3 | 0) >>> 2 | 0) + -1 | 0;
    if ($1 >>> 0 > 255 >>> 0) {
     break label$1
    }
    $1 = ($0 + ($1 << 2 | 0) | 0) + 4 | 0;
    if (!$1) {
     break label$1
    }
    HEAP32[($4 + 8 | 0) >> 2] = $0;
    HEAP32[($4 + 12 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
    wee_alloc__WeeAlloc__dealloc_impl___7b_7bclosure_7d_7d__hec80e80c0c589b86($4 + 4 | 0 | 0, $4 + 12 | 0 | 0, $4 + 8 | 0 | 0, 1120624 | 0);
    HEAP32[$1 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
   }
   global$0 = $4 + 16 | 0;
   return;
  }
  HEAP32[($4 + 12 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  wee_alloc__WeeAlloc__dealloc_impl___7b_7bclosure_7d_7d__hec80e80c0c589b86($4 + 4 | 0 | 0, $4 + 12 | 0 | 0, 1048835 | 0, 1120600 | 0);
  HEAP32[$0 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  global$0 = $4 + 16 | 0;
 }
 
 function core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__h6f537157f3b23627($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 >> 2] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 87 | 0;
   $0 = $0 + -1 | 0;
   $3 = $3 >>> 4 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__hb936e47a334d7e83($1 | 0, 1 | 0, 1117330 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__hdebcacf34982bb52($3 | 0, 128 | 0);
  wasm2js_trap();
 }
 
 function core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__h3d43c13c5273271c($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 >> 2] | 0;
  $0 = 0;
  label$1 : while (1) {
   $4 = $3 & 15 | 0;
   HEAP8[(($2 + $0 | 0) + 127 | 0) >> 0] = $4 >>> 0 < 10 >>> 0 ? $4 | 48 | 0 : $4 + 55 | 0;
   $0 = $0 + -1 | 0;
   $3 = $3 >>> 4 | 0;
   if ($3) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   $3 = $0 + 128 | 0;
   if ($3 >>> 0 >= 129 >>> 0) {
    break label$2
   }
   $0 = core__fmt__Formatter__pad_integral__hb936e47a334d7e83($1 | 0, 1 | 0, 1117330 | 0, 2 | 0, ($2 + $0 | 0) + 128 | 0 | 0, 0 - $0 | 0 | 0) | 0;
   global$0 = $2 + 128 | 0;
   return $0 | 0;
  }
  core__slice__slice_index_order_fail__hdebcacf34982bb52($3 | 0, 128 | 0);
  wasm2js_trap();
 }
 
 function core__ptr__real_drop_in_place__h85182afe7313c69c($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   $1 = $1 << 4 | 0;
   label$2 : while (1) {
    label$3 : {
     $3 = $2 + 4 | 0;
     if (!(HEAP32[$3 >> 2] | 0)) {
      break label$3
     }
     label$4 : {
      $4 = HEAP32[$2 >> 2] | 0;
      if (!$4) {
       break label$4
      }
      $5 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $5 + -1 | 0;
      if (($5 | 0) != (1 | 0)) {
       break label$4
      }
      $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($2 | 0);
     }
     core__ptr__real_drop_in_place__h85182afe7313c69c($3 | 0);
    }
    $2 = $2 + 16 | 0;
    $1 = $1 + -16 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$5 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$5
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $2 << 4 | 0 | 0, 4 | 0);
  }
 }
 
 function core__ptr__real_drop_in_place__hcd8e4fb8c251e2f1($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   $1 = $1 << 4 | 0;
   label$2 : while (1) {
    label$3 : {
     $3 = $2 + 4 | 0;
     if (!(HEAP32[$3 >> 2] | 0)) {
      break label$3
     }
     label$4 : {
      $4 = HEAP32[$2 >> 2] | 0;
      if (!$4) {
       break label$4
      }
      $5 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $5 + -1 | 0;
      if (($5 | 0) != (1 | 0)) {
       break label$4
      }
      $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($2 | 0);
     }
     core__ptr__real_drop_in_place__hcd8e4fb8c251e2f1($3 | 0);
    }
    $2 = $2 + 16 | 0;
    $1 = $1 + -16 | 0;
    if ($1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$5 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$2) {
    break label$5
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $2 << 4 | 0 | 0, 4 | 0);
  }
 }
 
 function $alloc__vec__Vec_T____reserve__hac8beb652f94bb08($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (($2 - $3 | 0) >>> 0 >= $1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1 = $3 + $1 | 0;
     if ($1 >>> 0 < $3 >>> 0) {
      break label$3
     }
     $3 = $2 << 1 | 0;
     $1 = $1 >>> 0 < $3 >>> 0 ? $3 : $1;
     if (($1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (!$2) {
        break label$5
       }
       $2 = __rust_realloc(HEAP32[$0 >> 2] | 0 | 0, $2 | 0, 1 | 0, $1 | 0) | 0;
       if (!$2) {
        break label$4
       }
       break label$2;
      }
      $2 = __rust_alloc($1 | 0, 1 | 0) | 0;
      if ($2) {
       break label$2
      }
     }
     alloc__alloc__handle_alloc_error__h2bf444f047049b0e($1 | 0, 1 | 0);
     wasm2js_trap();
    }
    alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa();
    wasm2js_trap();
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = $1;
  }
 }
 
 function $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____new_cell_for_free_list__h3f00889d138eb76f($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   $2 = $2 << 2 | 0;
   $3 = ($3 << 3 | 0) + 16384 | 0;
   $2 = ($3 >>> 0 < $2 >>> 0 ? $2 : $3) + 65543 | 0;
   $3 = __wasm_memory_grow($2 >>> 16 | 0 | 0);
   $3 = ($3 | 0) == (-1 | 0) ? 0 : $3 << 16 | 0;
   if (!$3) {
    break label$1
   }
   HEAP32[($3 + 4 | 0) >> 2] = 0;
   HEAP32[($3 + 8 | 0) >> 2] = 0;
   HEAP32[$3 >> 2] = $3 + ($2 & -65536 | 0) | 0 | 2 | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $3;
   HEAP32[$0 >> 2] = 0;
   return;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $3;
  HEAP32[$0 >> 2] = 1;
 }
 
 function core__result__unwrap_failed__hf92ddcde0bda805c($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 64 | 0;
  global$0 = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP8[($4 + 20 | 0) >> 0] = $3;
  HEAP32[($4 + 16 | 0) >> 2] = $2;
  HEAP32[($4 + 60 | 0) >> 2] = 17;
  HEAP32[($4 + 44 | 0) >> 2] = 2;
  HEAP32[($4 + 52 | 0) >> 2] = 15;
  HEAP32[($4 + 28 | 0) >> 2] = 2;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  HEAP32[($4 + 24 | 0) >> 2] = 1120832;
  HEAP32[($4 + 56 | 0) >> 2] = $4 + 16 | 0;
  HEAP32[($4 + 48 | 0) >> 2] = $4 + 8 | 0;
  HEAP32[($4 + 40 | 0) >> 2] = $4 + 48 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($4 + 24 | 0 | 0, 1120848 | 0);
  wasm2js_trap();
 }
 
 function $core__ops__range__Range_Idx__20as_20core__fmt__Debug___fmt__he1909bfcd99fdf26($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 20 | 0) >> 2] = 42;
  HEAP32[($2 + 12 | 0) >> 2] = 42;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 16 | 0) >> 2] = $0 + 4 | 0;
  $0 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  HEAP32[($2 + 44 | 0) >> 2] = 2;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  HEAP32[($2 + 24 | 0) >> 2] = 1121304;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 8 | 0;
  $1 = core__fmt__write__h822cd2648d8eacf5($1 | 0, $0 | 0, $2 + 24 | 0 | 0) | 0;
  global$0 = $2 + 48 | 0;
  return $1 | 0;
 }
 
 function core__result__unwrap_failed__hd6ba21361a7c9b4e($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP8[($3 + 23 | 0) >> 0] = $2;
  HEAP32[($3 + 60 | 0) >> 2] = 1;
  HEAP32[($3 + 44 | 0) >> 2] = 2;
  HEAP32[($3 + 52 | 0) >> 2] = 2;
  HEAP32[($3 + 28 | 0) >> 2] = 2;
  HEAP32[($3 + 32 | 0) >> 2] = 0;
  HEAP32[($3 + 24 | 0) >> 2] = 1120544;
  HEAP32[($3 + 56 | 0) >> 2] = $3 + 23 | 0;
  HEAP32[($3 + 48 | 0) >> 2] = $3 + 8 | 0;
  HEAP32[($3 + 40 | 0) >> 2] = $3 + 48 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($3 + 24 | 0 | 0, 1120560 | 0);
  wasm2js_trap();
 }
 
 function core__result__unwrap_failed__h09c73adcaf303a47($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 64 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP8[($3 + 23 | 0) >> 0] = $2;
  HEAP32[($3 + 60 | 0) >> 2] = 14;
  HEAP32[($3 + 44 | 0) >> 2] = 2;
  HEAP32[($3 + 52 | 0) >> 2] = 15;
  HEAP32[($3 + 28 | 0) >> 2] = 2;
  HEAP32[($3 + 32 | 0) >> 2] = 0;
  HEAP32[($3 + 24 | 0) >> 2] = 1120832;
  HEAP32[($3 + 56 | 0) >> 2] = $3 + 23 | 0;
  HEAP32[($3 + 48 | 0) >> 2] = $3 + 8 | 0;
  HEAP32[($3 + 40 | 0) >> 2] = $3 + 48 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($3 + 24 | 0 | 0, 1120848 | 0);
  wasm2js_trap();
 }
 
 function core__result__unwrap_failed__ha514fcd751db317e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 64 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 52 | 0) >> 2] = 16;
  HEAP32[($2 + 36 | 0) >> 2] = 2;
  HEAP32[($2 + 44 | 0) >> 2] = 15;
  HEAP32[($2 + 20 | 0) >> 2] = 2;
  HEAP32[($2 + 24 | 0) >> 2] = 0;
  HEAP32[($2 + 16 | 0) >> 2] = 1120832;
  HEAP32[($2 + 48 | 0) >> 2] = $2 + 56 | 0;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 8 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2 + 40 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($2 + 16 | 0 | 0, 1120848 | 0);
  wasm2js_trap();
 }
 
 function std__panicking__continue_panic_fmt__h1da9be3c07fed979($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $4 = 0, $28 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  $2 = $core__option__Option_T____unwrap__h0b7d2ac4f0732d08(core__panic__PanicInfo__location__hc82b6d802476df54($0 | 0) | 0 | 0) | 0;
  $3 = $core__option__Option_T____unwrap__hf9ceb8f62b095501(core__panic__PanicInfo__message__hbd1742af3eb19027($0 | 0) | 0 | 0) | 0;
  core__panic__Location__file__ha99975e04abea287($1 + 8 | 0 | 0, $2 | 0);
  i64toi32_i32$0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $4 = core__panic__Location__line__h18fbceab2c6d00cc($2 | 0) | 0;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = core__panic__Location__column__h997ae3dfaeda7808($2 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($1 + 24 | 0) >> 2] = $4;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[($1 + 16 | 0) >> 2] = $28;
  HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1 + 36 | 0) >> 2] = 0;
  HEAP32[($1 + 32 | 0) >> 2] = $3;
  std__panicking__rust_panic_with_hook__hb71d5fe4dc6cebd3($1 + 32 | 0 | 0, 1121244 | 0, core__panic__PanicInfo__message__hbd1742af3eb19027($0 | 0) | 0 | 0, $1 + 16 | 0 | 0);
  wasm2js_trap();
 }
 
 function core__slice__slice_index_len_fail__hf626520261f048fe($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  HEAP32[$2 >> 2] = $0;
  HEAP32[($2 + 44 | 0) >> 2] = 24;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 36 | 0) >> 2] = 24;
  HEAP32[($2 + 12 | 0) >> 2] = 2;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 1121376;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $2 + 32 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($2 + 8 | 0 | 0, 1121392 | 0);
  wasm2js_trap();
 }
 
 function core__panicking__panic_bounds_check__h273e49a380d01fb7($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  HEAP32[$3 >> 2] = $1;
  HEAP32[($3 + 44 | 0) >> 2] = 24;
  HEAP32[($3 + 28 | 0) >> 2] = 2;
  HEAP32[($3 + 36 | 0) >> 2] = 24;
  HEAP32[($3 + 12 | 0) >> 2] = 2;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 1121336;
  HEAP32[($3 + 40 | 0) >> 2] = $3;
  HEAP32[($3 + 32 | 0) >> 2] = $3 + 4 | 0;
  HEAP32[($3 + 24 | 0) >> 2] = $3 + 32 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($3 + 8 | 0 | 0, $0 | 0);
  wasm2js_trap();
 }
 
 function core__slice__slice_index_order_fail__hdebcacf34982bb52($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  HEAP32[$2 >> 2] = $0;
  HEAP32[($2 + 44 | 0) >> 2] = 24;
  HEAP32[($2 + 28 | 0) >> 2] = 2;
  HEAP32[($2 + 36 | 0) >> 2] = 24;
  HEAP32[($2 + 12 | 0) >> 2] = 2;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  HEAP32[($2 + 8 | 0) >> 2] = 1121408;
  HEAP32[($2 + 40 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $2 + 32 | 0;
  core__panicking__panic_fmt__h472d766e4dff71a2($2 + 8 | 0 | 0, 1121424 | 0);
  wasm2js_trap();
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_fmt__hb7fd6522f842193d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $14 = 0, $20 = 0, $23 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[($2 + 4 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
  i64toi32_i32$2 = $1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $14;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$1;
  i64toi32_i32$1 = ($2 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $20;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 8 | 0) >> 2] = $23;
  HEAP32[($2 + 12 | 0) >> 2] = i64toi32_i32$1;
  $1 = core__fmt__write__h822cd2648d8eacf5($2 + 4 | 0 | 0, 1121204 | 0, $2 + 8 | 0 | 0) | 0;
  global$0 = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function core__panicking__panic__h3c512c7c2bb6da25($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $1 = 0, $2 = 0, $2$hi = 0, $3 = 0, $3$hi = 0, $17 = 0;
  $1 = global$0 - 48 | 0;
  global$0 = $1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $2 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $3 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 0;
  $17 = i64toi32_i32$0;
  i64toi32_i32$0 = $1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = 1116968;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$0 + 24 | 0;
  i64toi32_i32$1 = $3$hi;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $3;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  core__panicking__panic_fmt__h472d766e4dff71a2(i64toi32_i32$0 | 0, i64toi32_i32$0 + 32 | 0 | 0);
  wasm2js_trap();
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__h5bdcbc5030715655($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    $3 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $1 = __rust_alloc(8 | 0, 4 | 0) | 0;
    if (!$1) {
     break label$1
    }
    HEAP32[($1 + 4 | 0) >> 2] = $3;
    HEAP32[$1 >> 2] = $2;
    HEAP32[($0 + 4 | 0) >> 2] = 1120884;
    HEAP32[$0 >> 2] = $1;
    return;
   }
   HEAP32[($0 + 4 | 0) >> 2] = 1120900;
   HEAP32[$0 >> 2] = 1;
   return;
  }
  alloc__alloc__handle_alloc_error__h2bf444f047049b0e(8 | 0, 4 | 0);
  wasm2js_trap();
 }
 
 function std__panicking__begin_panic_fmt__hf8f8362495d2ae80($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $20 = 0, $27 = 0;
  $2 = global$0 - 48 | 0;
  global$0 = $2;
  core__panic__Location__internal_constructor__he6e551b090ce3652($2 + 32 | 0 | 0, HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0);
  i64toi32_i32$2 = $2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 20 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 4 | 0) >> 2] = 1121228;
  HEAP32[$2 >> 2] = 1116864;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 36 | 0) >> 2] | 0;
  $27 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $27;
  HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
  std__panicking__continue_panic_fmt__h1da9be3c07fed979($2 | 0);
  wasm2js_trap();
 }
 
 function $alloc__sync__Arc_T____drop_slow__hdfe5fdd063630e71($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   if ($2 >>> 0 < 1025 >>> 0) {
    break label$1
   }
   __rust_dealloc(HEAP32[($1 + 24 | 0) >> 2] | 0 | 0, $2 | 0, 1 | 0);
   $1 = HEAP32[$0 >> 2] | 0;
  }
  $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2 + -1 | 0;
  label$2 : {
   if (($2 | 0) != (1 | 0)) {
    break label$2
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, 1048 | 0, 4 | 0);
  }
 }
 
 function $alloc__sync__Arc_T____drop_slow__hd854a19c2e714b08($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   if ($2 >>> 0 < 1025 >>> 0) {
    break label$1
   }
   __rust_dealloc(HEAP32[($1 + 24 | 0) >> 2] | 0 | 0, $2 | 0, 1 | 0);
   $1 = HEAP32[$0 >> 2] | 0;
  }
  $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2 + -1 | 0;
  label$2 : {
   if (($2 | 0) != (1 | 0)) {
    break label$2
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, 1048 | 0, 4 | 0);
  }
 }
 
 function core__fmt__Formatter__pad_integral__write_prefix__hfdcfd074be35c5e0($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 | 0) == (1114112 | 0)) {
      break label$3
     }
     $4 = 1;
     if (FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $1) | 0) {
      break label$2
     }
    }
    if (!$2) {
     break label$1
    }
    $4 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($0 + 24 | 0) >> 2] | 0, $2, $3) | 0;
   }
   return $4 | 0;
  }
  return 0 | 0;
 }
 
 function $reed_solomon_erasure__inversion_tree__Error_20as_20core__fmt__Debug___fmt__h885ee5d0a838643e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  label$1 : {
   label$2 : {
    if ((HEAPU8[$0 >> 0] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116637 | 0, 9 | 0);
    break label$1;
   }
   core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1116646 | 0, 10 | 0);
  }
  $1 = core__fmt__builders__DebugTuple__finish__h368649cc8b3a0c1e($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function core__panicking__panic_fmt__h472d766e4dff71a2($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $3$hi = 0, $12 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3 = i64toi32_i32$0;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $12 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 20 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $3;
  HEAP32[($2 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  HEAP32[($2 + 4 | 0) >> 2] = 1121320;
  HEAP32[$2 >> 2] = 1116968;
  rust_begin_unwind($2 | 0);
  wasm2js_trap();
 }
 
 function __wbindgen_malloc($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 >>> 0 > -4 >>> 0) {
    break label$1
   }
   label$2 : {
    if (!$0) {
     break label$2
    }
    $0 = __rust_alloc($0 | 0, ($0 >>> 0 < -3 >>> 0) << 2 | 0 | 0) | 0;
    if (!$0) {
     break label$1
    }
    return $0 | 0;
   }
   return 4 | 0;
  }
  wasm_bindgen____rt__malloc_failure__hc190b5d9a6a5786f();
  wasm2js_trap();
 }
 
 function memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $0;
   label$2 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __rg_realloc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   $4 = $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___alloc__h3481aab5b31ee87c(1123224 | 0, $3 | 0, $2 | 0) | 0;
   if (!$4) {
    break label$1
   }
   memcpy($4 | 0, $0 | 0, ($1 >>> 0 > $3 >>> 0 ? $3 : $1) | 0) | 0;
   $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___dealloc__hb140c1ea270fb2a9(1123224 | 0, $0 | 0, $1 | 0, $2 | 0);
  }
  return $4 | 0;
 }
 
 function $_T_20as_20core__fmt__Debug___fmt__h13bf5bdb36688e55($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (!(core__fmt__Formatter__debug_lower_hex__h05e296ab3f8b1bb7($1 | 0) | 0)) {
    break label$1
   }
   return core__fmt__num___impl_20core__fmt__LowerHex_20for_20i32___fmt__h6f537157f3b23627($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if (!(core__fmt__Formatter__debug_upper_hex__h08505d53bb04104f($1 | 0) | 0)) {
    break label$2
   }
   return core__fmt__num___impl_20core__fmt__UpperHex_20for_20i32___fmt__h3d43c13c5273271c($0 | 0, $1 | 0) | 0 | 0;
  }
  return core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h62fc8994f4f5edb3($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function std__panicking__panicking__hd25645a73a60f14b() {
  var $0 = 0, i64toi32_i32$1 = 0;
  $0 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 1124296 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    $0 = HEAP32[(0 + 1124300 | 0) >> 2] | 0;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   HEAP32[(i64toi32_i32$1 + 1124296 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$1 + 1124300 | 0) >> 2] = 0;
  }
  HEAP32[(0 + 1124300 | 0) >> 2] = $0;
  return ($0 | 0) != (0 | 0) | 0;
 }
 
 function core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0](HEAP32[($1 + 24 | 0) >> 2] | 0, $2, $3) | 0), HEAP8[(wasm2js_i32$0 + 8 | 0) >> 0] = wasm2js_i32$1;
  HEAP32[$0 >> 2] = $1;
  HEAP8[($0 + 9 | 0) >> 0] = !$3;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function $_mut_20W_20as_20core__fmt__Write___write_str__h66bd5d493a9e68c5($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = HEAP32[$0 >> 2] | 0;
  $alloc__vec__Vec_T____reserve__hac8beb652f94bb08($0 | 0, $2 | 0);
  $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $3 + $2 | 0;
  memcpy($3 + (HEAP32[$0 >> 2] | 0) | 0 | 0, $1 | 0, $2 | 0) | 0;
  return 0 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $0;
   label$2 : while (1) {
    HEAP8[$3 >> 0] = $1;
    $3 = $3 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function std__panicking__begin_panic__h2418fa6fbb16e3a8($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  std__panicking__rust_panic_with_hook__hb71d5fe4dc6cebd3($3 + 8 | 0 | 0, 1120864 | 0, 0 | 0, $2 | 0);
  wasm2js_trap();
 }
 
 function $reed_solomon_erasure__matrix__Error_20as_20core__fmt__Debug___fmt__h000a1fd9904f6069($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  core__fmt__Formatter__debug_tuple__h973e2ae1389276bb($2 | 0, $1 | 0, 1049648 | 0, 14 | 0);
  $1 = core__fmt__builders__DebugTuple__finish__h368649cc8b3a0c1e($2 | 0) | 0;
  global$0 = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function core__ptr__real_drop_in_place__h1adbcbfd8a49c633($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   __rust_dealloc($1 | 0, $0 | 0, 1 | 0);
  }
 }
 
 function rust_panic($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 8 | 0) >> 2] = $0;
  __rust_start_panic($2 + 8 | 0 | 0) | 0;
  wasm2js_trap();
 }
 
 function __rg_alloc_zeroed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   $1 = $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___alloc__h3481aab5b31ee87c(1123224 | 0, $0 | 0, $1 | 0) | 0;
   if (!$1) {
    break label$1
   }
   memset($1 | 0, 0 | 0, $0 | 0) | 0;
  }
  return $1 | 0;
 }
 
 function $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h5800c80ab64204e9($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = $2 ? 1120884 : 1120900;
  HEAP32[$0 >> 2] = $2 ? $1 : 1049283;
 }
 
 function core__str__traits___impl_20core__slice__SliceIndex_str__20for_20core__ops__range__Range_usize____index___7b_7bclosure_7d_7d__h5a4b9c29955ace4b($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  core__str__slice_error_fail__h6cf288c1f70d29b2(HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($0 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0);
  wasm2js_trap();
 }
 
 function core__panic__Location__internal_constructor__he6e551b090ce3652($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $4;
  HEAP32[($0 + 8 | 0) >> 2] = $3;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
 }
 
 function wasm_bindgen__anyref__HEAP_SLAB____init__hdaa41433b9f93bed($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 4;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function core__ptr__real_drop_in_place__h4d9fa4668e300c6a($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   __rust_dealloc(HEAP32[$0 >> 2] | 0 | 0, $1 | 0, 1 | 0);
  }
 }
 
 function rust_oom($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[(0 + 1124280 | 0) >> 2] | 0;
  FUNCTION_TABLE[($2 ? $2 : 26) | 0]($0, $1);
  wasm2js_trap();
 }
 
 function reed_solomon_erasure__ReedSolomon__reconstruct_data__h75b192993bad1e0e($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return (reed_solomon_erasure__ReedSolomon__reconstruct_internal__hd438acba54572b30($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, 1 | 0) | 0) & 255 | 0 | 0;
 }
 
 function $core__option__Option_T____unwrap__h0b7d2ac4f0732d08($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return $0 | 0;
  }
  core__panicking__panic__h3c512c7c2bb6da25(1121180 | 0);
  wasm2js_trap();
 }
 
 function $core__option__Option_T____unwrap__hf9ceb8f62b095501($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   return $0 | 0;
  }
  core__panicking__panic__h3c512c7c2bb6da25(1121180 | 0);
  wasm2js_trap();
 }
 
 function __wbindgen_free($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   __rust_dealloc($0 | 0, $1 | 0, 4 | 0);
  }
 }
 
 function $_T_20as_20core__fmt__Display___fmt__hac193f3a429241fb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Display___fmt__hb16a699130034034(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Display___fmt__hdd1e1246cb2483b3($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Display___fmt__hb16a699130034034(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0) | 0 | 0;
 }
 
 function $_T_20as_20core__fmt__Display___fmt__haa893ef509229e08($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return core__fmt__Formatter__pad__h96c9d32207b4250a($1 | 0, HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function core__fmt__Formatter__debug_lower_hex__h05e296ab3f8b1bb7($0) {
  $0 = $0 | 0;
  return ((HEAPU8[$0 >> 0] | 0) & 16 | 0) >>> 4 | 0 | 0;
 }
 
 function core__fmt__Formatter__debug_upper_hex__h08505d53bb04104f($0) {
  $0 = $0 | 0;
  return ((HEAPU8[$0 >> 0] | 0) & 32 | 0) >>> 5 | 0 | 0;
 }
 
 function __rg_dealloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___dealloc__hb140c1ea270fb2a9(1123224 | 0, $0 | 0, $1 | 0, $2 | 0);
 }
 
 function __rust_realloc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return __rg_realloc($0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function reed_solomon_erasure__ReedSolomon__new__hddc7e003b2284e9d($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  reed_solomon_erasure__ReedSolomon__with_pparam__h229bd7891bcca49f($0 | 0, $1 | 0, $2 | 0, 32768 | 0);
 }
 
 function core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h62fc8994f4f5edb3($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return core__fmt__num__imp__fmt_u64__hc393e337ab9bae99(HEAP32[$0 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 1 | 0, $1 | 0) | 0 | 0;
 }
 
 function core__fmt__ArgumentV1__show_usize__hed9324dbe69dfc41($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0;
  i64toi32_i32$1 = 0;
  return core__fmt__num__imp__fmt_u64__hc393e337ab9bae99(HEAP32[$0 >> 2] | 0 | 0, i64toi32_i32$1 | 0, 1 | 0, $1 | 0) | 0 | 0;
 }
 
 function __rg_alloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $wee_alloc__WeeAlloc__static__20as_20core__alloc__GlobalAlloc___alloc__h3481aab5b31ee87c(1123224 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __rust_dealloc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __rg_dealloc($0 | 0, $1 | 0, $2 | 0);
 }
 
 function $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__hded6df29cab2214d($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $str_20as_20core__fmt__Debug___fmt__he119db1bfac18c67(1049283 | 0, 25 | 0, $1 | 0) | 0 | 0;
 }
 
 function alloc__alloc__handle_alloc_error__h2bf444f047049b0e($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  rust_oom($0 | 0, $1 | 0);
  wasm2js_trap();
 }
 
 function core__panic__Location__file__ha99975e04abea287($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4 = 0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $4;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $str_20as_20core__fmt__Display___fmt__hb16a699130034034($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return core__fmt__Formatter__pad__h96c9d32207b4250a($2 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __rust_alloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __rg_alloc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __rust_alloc_zeroed($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __rg_alloc_zeroed($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function rust_begin_unwind($0) {
  $0 = $0 | 0;
  std__panicking__continue_panic_fmt__h1da9be3c07fed979($0 | 0);
  wasm2js_trap();
 }
 
 function alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa() {
  core__panicking__panic__h3c512c7c2bb6da25(1121280 | 0);
  wasm2js_trap();
 }
 
 function core__panic__PanicInfo__location__hc82b6d802476df54($0) {
  $0 = $0 | 0;
  return $0 + 12 | 0 | 0;
 }
 
 function wasm_bindgen____rt__malloc_failure__hc190b5d9a6a5786f() {
  std__process__abort__hf621ee75276928ab();
  wasm2js_trap();
 }
 
 function $alloc__raw_vec__RawVec_T_2c_20A____allocate_in___7b_7bclosure_7d_7d__h202430000f6f4098() {
  alloc__raw_vec__capacity_overflow__ha3ff247cf1d072fa();
  wasm2js_trap();
 }
 
 function core__panic__PanicInfo__message__hbd1742af3eb19027($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function core__panic__Location__line__h18fbceab2c6d00cc($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function core__panic__Location__column__h997ae3dfaeda7808($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____min_cell_size__h901c145ef9d61fd6($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $1 | 0;
 }
 
 function $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____should_merge_adjacent_free_cells__h4382dfdbbd31f3a5($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____min_cell_size__h9f1d72a08630a6b4($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 512 | 0;
 }
 
 function $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____should_merge_adjacent_free_cells__h466767d8f086ac63($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function wasm_bindgen__anyref__HEAP_SLAB____getit__hdde7bb023deeda9f() {
  return 1124252 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h6bd77f9717dbcf89($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 286299353;
  return 1890621284 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h841fd025799fdb00($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 1757840133;
  return -801715452 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__h7c481940f101baea($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = -1789335250;
  return 244208589 | 0;
 }
 
 function $T_20as_20core__any__Any___type_id__hcd1a193be6f1d541($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = 2012881600;
  return 279812429 | 0;
 }
 
 function std__process__abort__hf621ee75276928ab() {
  wasm2js_trap();
 }
 
 function std__sys_common__mutex__Mutex__new__h072282c718a449fa() {
  return 0 | 0;
 }
 
 function std__sys_common__poison__Flag__new__h23cba358f9237c50() {
  return 0 | 0;
 }
 
 function __rust_start_panic($0) {
  $0 = $0 | 0;
  wasm2js_trap();
 }
 
 function $T_20as_20core__any__Any___type_id__h705062876d7795f8($0) {
  $0 = $0 | 0;
  i64toi32_i32$HIGH_BITS = -1789335250;
  return 244208589 | 0;
 }
 
 function core__ptr__real_drop_in_place__hbfe1050c3b2e6924($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h01460ae9428cb590($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__hbfe1050c3b2e6924_1($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__hc65f12ba6b4513af($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__hecade1c9e5797ba5($0) {
  $0 = $0 | 0;
 }
 
 function core__ptr__real_drop_in_place__h2eadc8fc13758e04($0) {
  $0 = $0 | 0;
 }
 
 function $std__sys_common__thread_local__Key_20as_20core__ops__drop__Drop___drop__h86d932992885b388($0) {
  $0 = $0 | 0;
 }
 
 function std__alloc__default_alloc_error_hook__h192fb48ac95e0614($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function core__ptr__real_drop_in_place__h9d20a436e8931685($0) {
  $0 = $0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = [null, $reed_solomon_erasure__errors__Error_20as_20core__fmt__Debug___fmt__heefe8a5ab0558bc9, $_T_20as_20core__fmt__Display___fmt__hac193f3a429241fb, core__ptr__real_drop_in_place__hbfe1050c3b2e6924, $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____new_cell_for_free_list__h3f00889d138eb76f, $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____min_cell_size__h9f1d72a08630a6b4, $wee_alloc__LargeAllocPolicy_20as_20wee_alloc__AllocPolicy__a____should_merge_adjacent_free_cells__h466767d8f086ac63, core__ptr__real_drop_in_place__hbfe1050c3b2e6924_1, core__ptr__real_drop_in_place__h01460ae9428cb590, $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____new_cell_for_free_list__hb001aab1fbafe07a, $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____min_cell_size__h901c145ef9d61fd6, $wee_alloc__size_classes__SizeClassAllocPolicy__a_2c_20_b__20as_20wee_alloc__AllocPolicy__a____should_merge_adjacent_free_cells__h4382dfdbbd31f3a5, wasm_bindgen__anyref__HEAP_SLAB____getit__hdde7bb023deeda9f, wasm_bindgen__anyref__HEAP_SLAB____init__hdaa41433b9f93bed, $reed_solomon_erasure__inversion_tree__Error_20as_20core__fmt__Debug___fmt__h885ee5d0a838643e, $_T_20as_20core__fmt__Display___fmt__hdd1e1246cb2483b3, $reed_solomon_erasure__matrix__Error_20as_20core__fmt__Debug___fmt__h000a1fd9904f6069, $std__sys_common__poison__PoisonError_T__20as_20core__fmt__Debug___fmt__hded6df29cab2214d, core__ptr__real_drop_in_place__hecade1c9e5797ba5, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___box_me_up__h5bdcbc5030715655, $std__panicking__begin_panic__PanicPayload_A__20as_20core__panic__BoxMeUp___get__h5800c80ab64204e9, $T_20as_20core__any__Any___type_id__h6bd77f9717dbcf89, core__ptr__real_drop_in_place__hc65f12ba6b4513af, $T_20as_20core__any__Any___type_id__h841fd025799fdb00, core__fmt__num__imp___impl_20core__fmt__Display_20for_20u32___fmt__h62fc8994f4f5edb3, $_T_20as_20core__fmt__Debug___fmt__h13bf5bdb36688e55, std__alloc__default_alloc_error_hook__h192fb48ac95e0614, $std__sys_common__thread_local__Key_20as_20core__ops__drop__Drop___drop__h86d932992885b388, $_mut_20W_20as_20core__fmt__Write___write_str__h66bd5d493a9e68c5, $_mut_20W_20as_20core__fmt__Write___write_char__h293d457094aaf69a, $_mut_20W_20as_20core__fmt__Write___write_fmt__hb7fd6522f842193d, core__ptr__real_drop_in_place__h2eadc8fc13758e04, $T_20as_20core__any__Any___type_id__h7c481940f101baea, core__ptr__real_drop_in_place__h1adbcbfd8a49c633, $std__panicking__continue_panic_fmt__PanicPayload__a__20as_20core__panic__BoxMeUp___box_me_up__h8d57c67b0c8f15fc, $std__panicking__continue_panic_fmt__PanicPayload__a__20as_20core__panic__BoxMeUp___get__he14c66d3771d7b8c, core__ptr__real_drop_in_place__h4d9fa4668e300c6a, $T_20as_20core__any__Any___type_id__hcd1a193be6f1d541, $_T_20as_20core__fmt__Display___fmt__haa893ef509229e08, $core__ops__range__Range_Idx__20as_20core__fmt__Debug___fmt__he1909bfcd99fdf26, $char_20as_20core__fmt__Debug___fmt__h8908b4afa9a885e3, core__fmt__ArgumentV1__show_usize__hed9324dbe69dfc41, core__fmt__num___impl_20core__fmt__Debug_20for_20usize___fmt__h5d401cd14a20c5ac, core__ptr__real_drop_in_place__h9d20a436e8931685, $T_20as_20core__any__Any___type_id__h705062876d7795f8];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "encode": encode, 
  "reconstruct": reconstruct, 
  "__wbindgen_malloc": __wbindgen_malloc, 
  "__wbindgen_free": __wbindgen_free
 };
}

var retasmFunc = asmFunc({
});
export var memory = retasmFunc.memory;
export var encode = retasmFunc.encode;
export var reconstruct = retasmFunc.reconstruct;
export var __wbindgen_malloc = retasmFunc.__wbindgen_malloc;
export var __wbindgen_free = retasmFunc.__wbindgen_free;
